Name,Slug,Collection ID,Item ID,Created On,Updated On,Published On,Post Body,Post Summary,Main Image,Thumbnail image,Featured?,Date,Category
2021 Map technology in review,2021-map-technology-in-review,616750c12c0aece979319ccd,61c3920233dfbeac844b6a7a,Wed Dec 22 2021 21:00:50 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:33:50 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<p id="""">With so much happening in the geospatial industry, it's hard to keep track of everything, much less to find some overarching storyline in it all. Nevertheless, in an attempt at sense-making, I'm going to try and highlight the things that felt like <em id="""">big news</em> this year, and what's on the horizon. Let's dive in!</p><h3 id="""">Planet goes public</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2393px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2393px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61c39358a3ec8421b93c61a0_planet.jpg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A satellite rendering of a cube set""></div><figcaption id="""">Planet Labs satellite launch from the ISS&nbsp;(<a href=""https://en.wikipedia.org/wiki/Planet_Labs#/media/File:Planet_Labs_satellite_launch_from_ISS.jpg"" id="""">PD</a>)</figcaption></figure><p id=""""><a href=""https://www.planet.com/"" id="""">Planet Labs</a>, a satellite company famous for deploying lots of small satellites, went public through a <a href=""https://en.wikipedia.org/wiki/Special-purpose_acquisition_company"" id="""">SPAC merger</a>. There aren't many imaging-satellite companies out there, so this is pretty big news. Plus, they make really neat looking photos. We're still very far away from the day that an ordinary person can point a satellite at the earth and take a custom picture with just a website, but we're getting there.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1920px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1920px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61c393ab60e088d41db2b3bd_planet-mountains.jpg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Off-nadir imagery showing a steep set of mountains""></div><figcaption id="""">SkySat sample image (<a href=""https://en.wikipedia.org/wiki/SkySat#/media/File:Monte_Fitz_Roy_19Mar2018_SkySat.jpg"" id="""">CC-BY-SA 4.0</a>)</figcaption></figure><h3 id="""">Second-generation API companies sprout up</h3><p id="""">One of the more interesting company evolutions I've seen is Foursquare. It started as a social-mobile-local app, which Dennis Crowley thought would <a href=""https://www.inc.com/chris-beier-and-daniel-wolfman/dennis-crowley-foursquare.html"" id="""">segue into a recommendation engine</a>, but instead grew into a two-sided business which produces marketing &amp; spatial data for businesses and investors. Now their <a href=""https://foursquare.com/"" id="""">website is just about the second part of the business</a>, not the first, and they do things like <a href=""https://foursquare.com/products/unfolded/"" id="""">acquire geospatial analytics companies</a>.</p><p id="""">Learning from that, it seems like we're skipping some steps now: <a href=""https://www.askiggy.com/"" id="""">Iggy is just doing the data &amp; machine-learning part</a> that some startups want. On a similar wavelength, <a href=""https://nextbillion.ai/"" id="""">Next Billion</a> is just intentionally building the product that a company like Uber or GrubHub would want, an API-centric thing specifically for gig and delivery use-cases.</p><h3 id="""">Adaptive projections hit the mainstream</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:3586px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""3586px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61c393664a869456dbc78141_mapbox-gl-projections.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Mapbox map demonstrating new support for projections""></div></figure><p id="""">Map projections - <a href=""https://macwright.com/2012/01/27/projections-understanding.html"" id="""">the way you transform a 3D globe onto a 2D page</a> - have long been a point of conflict in the world of maps. The default projection for most web maps, Web Mercator, does an exceptionally bad job at representing a global view of the world with correct sizes.</p><p id="""">So every year someone rediscovers that Web Mercator distorts land masses, and we have a big conversation about how, for zoomed-out maps, that's true and problematic. But Web Mercator has been dominant for a long time, for a number of practical and happenstance reasons that I won't get into here.</p><p id="""">This year, <a href=""https://docs.mapbox.com/mapbox-gl-js/guides/projections/"" id="""">Mapbox GL JS introduced proper adaptive projections</a>, allowing people to use any projection they like for the global view, while transitioning back to Web Mercator for zoomed-in maps. And Google Maps has been showing a sphere for zoomed-out views, which also transitions to Web Mercator for zoomed-in maps. So, a big swath of web maps can finally shake free the bonds of Web Mercator as a global view.</p><p id="""">This wasn't evenly distributed. The version of Google Maps you can use as a developer doesn't really support custom projections yet - there's <a href=""https://developers.google.com/maps/documentation/javascript/examples/map-projection-simple"" id="""">a very, very hacky example</a>, which isn't very useful.</p><h3 id="""">Hot new image formats</h3><figure id="""" class=""w-richtext-figure-type-video w-richtext-align-fullwidth"" style=""padding-bottom:56.199999999999996%"" data-rt-type=""video"" data-rt-align=""fullwidth"" data-rt-max-width="""" data-rt-max-height=""56.199999999999996%"" data-rt-dimensions=""500:281"" data-page-url=""https://twitter.com/bseymour/status/1298511541227139072""><div id=""""><iframe allowfullscreen=""true"" frameborder=""0"" scrolling=""no"" src=""//cdn.embedly.com/widgets/media.html?type=text%2Fhtml&key=96f1f04c5f4143bcb0f2e68c87d65feb&schema=twitter&url=https%3A//twitter.com/bseymour/status/1298511541227139072&image=https%3A//abs.twimg.com/errors/logo46x38.png""></iframe></div></figure><p id="""">WebGL-powered vector mapping tech aside, a lot of maps have satellite data and other sorts of raster data - and <em id="""">lots of it</em>. So efficient raster formats have been a big focus for a long time.</p><p id="""">The state of the art used to be <a href=""https://developers.google.com/speed/webp"" id="""">WebP</a>, but new as of last year, <a href=""https://caniuse.com/avif"" id="""">AVIF</a> is the new kid of the block, and browser support is growing. AVIF was announced in 2020, but it takes a while for browser support to be high enough for switching to become worthwhile.</p><p id="""">The obvious metric for these formats is size versus quality. WebP did a bit better than JPEG, and AVIF improves upon WebP. But if you're working in maps and mostly use JPEG, the other big advance is the <em id="""">alpha channel</em>. The JPEG format doesn't support an alpha, or transparency, channel, so it doesn't work well for any image overlay on a map that doesn't cover the entire earth. These new formats do! Plus, WebM video supports alpha transparency, so you could do animated video overlays on a map. Niche stuff. But cool.</p><h3 id="""">Two semi-anonymous mesh networks emerge</h3><figure id="""" class=""w-richtext-figure-type-video w-richtext-align-fullwidth"" style=""padding-bottom:56.199999999999996%"" data-rt-type=""video"" data-rt-align=""fullwidth"" data-rt-max-width="""" data-rt-max-height=""56.199999999999996%"" data-rt-dimensions=""500:281"" data-page-url=""https://twitter.com/benedictevans/status/1393126191004012545""><div id=""""><iframe allowfullscreen=""true"" frameborder=""0"" scrolling=""no"" src=""//cdn.embedly.com/widgets/media.html?type=text%2Fhtml&key=96f1f04c5f4143bcb0f2e68c87d65feb&schema=twitter&url=https%3A//twitter.com/benedictevans/status/1393126191004012545&image=https%3A//abs.twimg.com/errors/logo46x38.png""></iframe></div></figure><p id="""">That is, <a href=""https://covid19.apple.com/contacttracing"" id="""">contact tracing</a> and <a href=""https://www.apple.com/airtag/"" id="""">AirTags</a>. This kind of passive, always-on tracking has been tried before with <a href=""https://developer.apple.com/ibeacon/"" id="""">beacons</a>, but that approach didn't catch on, or at least I've never encountered it in any setting.</p><p id="""">Whether this sort of tracking technology becomes ubiquitous in the long-term is anyone's guess. The rollout <a href=""https://www.theverge.com/2021/11/10/22774124/ios-15-2-beta-2-airtag-tracker-scan-privacy-invasion"" id="""">has not gone very well</a>: people are <a href=""https://www.theverge.com/2021/6/3/22516178/apple-airtags-tracking-devices-update-play-sound-privacy-android-app"" id="""">really scared</a> of AirTags. But technology always simultaneously tests and affects people's expectations and privacy tolerance. And penetration of technology is always uneven:&nbsp;my security-conscious friends almost entirely swear off smart-home technology, but around 1 in 4 Americans <a href=""https://rainnews.com/npr-edison-smart-audio-report-finds-157-million-smart-speakers-are-in-u-s-households/"" id="""">have a smart speaker</a> with an always-on microphone in their house.</p><h3 id="""">What didn't happen</h3><figure id="""" class=""w-richtext-figure-type-video w-richtext-align-fullwidth"" style=""padding-bottom:56.206088992974244%"" data-rt-type=""video"" data-rt-align=""fullwidth"" data-rt-max-width="""" data-rt-max-height=""56.206088992974244%"" data-rt-dimensions=""854:480"" data-page-url=""https://www.youtube.com/watch?v=2ub2F-UnXIU""><div id=""""><iframe allowfullscreen=""true"" frameborder=""0"" scrolling=""no"" src=""https://www.youtube.com/embed/2ub2F-UnXIU""></iframe></div></figure><p id="""">There aren't any fully-autonomous, legally-operated cars in America. The self-driving car storyline was central to some of the geospatial world's marketing about HD maps. From what I'm seeing of the early prototypes, self-driving isn't coming anytime soon.</p><p id="""">Augmented reality is still very hypothetical. But virtual reality had a big year, judging by the number of people using <a href="""" id="""">Zwift</a> to virtually bicycle in the alps, from the comfort of their Peloton nook.</p><h3 id="""">What's on the horizon</h3><p id="""">I'll make some guesses about what's next. It's fun to guess!</p><ul id=""""><li id="""">I think that ""edge compute"", the idea that's currently being pushed by <a href=""https://workers.cloudflare.com/"" id="""">Cloudflare Workers</a> and <a href=""https://deno.com/deploy"" id="""">Deno Deploy</a>, is a match made in heaven for a lot of geospatial tech. Tile-based web maps are wildly parallel and extremely performance-critical. There are use-cases like optimizing vector tiles based on the style they're paired with, that would fit into the edge compute model very neatly. Or things like optimizing your JPEG&nbsp;map tiles to WebP and AV1 - a perfect fit for edge compute.</li><li id="""">Collaboration technology had a <em id="""">huge</em> year, as everyone transitioned into remote work or doubled-down on remote work being a semi-permanent state. Some of the tech underpinning collaboration, like <a href=""https://crdt.tech/"" id="""">CRDTs</a>, seems like it could revolutionize parts of geospatial technology in the long run. That said, map data is possibly one of the hardest things to fit into collaboration - it's large, complex, and has inter-relations.</li><li id="""">Map technology tends to be performance-critical - it's one of the things pushing adoption of WebGL, binary formats in the frontend, and basically all vector maps use cutting-edge tech like WebWorkers. So there's big potential for it to level-up with <a href=""https://www.rust-lang.org/"" id="""">Rust</a>, for better control over memory and performance, and <a href=""https://webassembly.org/"" id="""">WebAssembly</a>, to run that memory-managed code in the browser. So far this hasn't happened! There are experiments of cross-compiling desktop map renderers to the web, but they tend to be slow and half-baked. But it seems likely that in the next few years we see a new map renderer that cuts out the JavaScript.</li></ul>","From image formats to satellites, what seemed inspiring in geospatial technology this year.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61c4921e54d0ca62a1eab475_Map%20tech%202021.png,true,Thu Dec 23 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Product
A big boost for properties,a-big-boost-for-properties,616750c12c0aece979319ccd,62a6439961f5b66ce31b30f7,Sun Jun 12 2022 19:50:49 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:36:29 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<p id="""">Placemark’s support for properties just got a really big improvement</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2049px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2049px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a755b26ec75092c9904ed1_Properties%20(2).png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""""></div></figure><p id="""">‍</p><p id="""">We've always supported all the kinds of <a href=""/documentation/properties"" id="""">properties</a> that geospatial data can have - arbitrary names and values, plus values can have types like string, true/false, JSON values, and more. And because a property like a ""description"" field might contain paragraphs of an article, you could pop up a larger property text editor. But there's always more to improve about properties - especially when people are writing reviews, research, and guides using the property editor. So this week brings some big improvements.</p><p id="""">‍</p><h3 id="""">Rich text properties</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1600px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a74628b85a96b782795b22_image%201%20(1).png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Popover showing the ability to embed images in rich text""></div></figure><p id="""">Now you can edit a property and switch between different kinds of values - Text, Rich text, JSON, and Color. The rich text editor can do everything you'd expect from a rich text interface, like adding links, bold, headings. Plus, you can even add images! Building your index of the best restaurants or map of bird sightings? Rich text lets you do it all in one tool.</p><p id="""">Rich text plays nice with importing &amp;&nbsp;exporting! When you export features with rich text as GeoJSON, the rich text becomes a descriptive object containing HTML. Importing KML&nbsp;files with HTML in their &lt;description&gt; tags - like you can author in Google Earth - will yield rich text in Placemark, and vice-versa for exporting KML.</p><p id="""">‍</p><h3 id="""">Editing colors</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1600px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a7466414a52d0eefc142df_image%202.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Popover editing color values""></div></figure><p id="""">The improved color picker detects valid colors and lets you edit colors using direct hex-code input or with a selector UI.</p><p id="""">‍</p><h3 id="""">Keyboard shortcuts</h3><div id=""""></div><p id="""">Keyboard shortcuts have been improved - you can navigate the whole properties panel, and the feature panel, using arrow keys.</p><p id="""">‍</p><h3 id="""">True and false values</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1600px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a7469bc349647e7101935e_image%203.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Property editor with a checkbox for boolean features""></div></figure><p id="""">True and false values get a new UI, too - you can toggle them with a checkbox. And if you need to change the type of a property, it's easy to just convert it to something different.</p><p id="""">‍</p><h3 id="""">Converting between types</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1600px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a746c9424faa5009c9027f_image%204.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Property editor popover with type selector""></div></figure><p id="""">Need to change a property's type? You can do that too - convert your plain text to rich text, clean up data that has numbers stored a strings, you can do it all.</p><h3 id="""">Open source improvements</h3><p id="""">The code that adds this support for HTML&nbsp;values in KML&nbsp;is open source, part of <a href=""/open-source"" id="""">Placemark's supported toGeoJSON&nbsp;and toKML modules</a>. You can use it in your applications today, and all of the users of those JavaScript modules can upgrade for the new support.</p>","Rich text, images, improved keyboard shortcuts, and a lot of improvements for the data that lives in geospatial files.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a754f421cd928de87a3a39_Properties%20(1).png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a754f421cd928de87a3a39_Properties%20(1).png,true,Mon Jun 13 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
A simpler router progress bar for this Next.js application,a-simpler-router-progress-bar-for-this-next-js-application,616750c12c0aece979319ccd,634dc13d00ca7c37a4e5e7e8,Mon Oct 17 2022 20:55:25 GMT+0000 (Coordinated Universal Time),Mon Oct 17 2022 21:27:28 GMT+0000 (Coordinated Universal Time),Mon Oct 17 2022 21:27:33 GMT+0000 (Coordinated Universal Time),"<p id="""">Placemark uses client-side routing with <a href=""https://nextjs.org/docs/api-reference/next/router"" id="""">Next.js's router</a>, which means that most of the time, when you click a link, you're not making a full page transition like you would with a traditional multi-page application. This has some benefits, in smoother page transitions and in some cases faster performance, but it has a few drawbacks: particularly, that you might be waiting for a second or two after clicking a link, wondering if the page is loading. So we now do what many other similar applications do. We show a progress bar within the application.</p><div id=""""></div><p id="""">Shopping around for prior art, I&nbsp;found a surprising number of sites using <a href=""https://github.com/rstacruz/nprogress"" id="""">NProgress</a>, a lovely but dated library for progress bars. Its development started to slow down five years ago, and now the library has some idiosyncratic legacy code. It contains code for adding CSS&nbsp;prefixes, constructing classNames, and working with older JavaScript environments. NProgress operates by writing its own HTML&nbsp;to the page, outside of the realm of React or any framework. It's working code, proven by the test of time and used everywhere, but it would be an oddball addition for Placemark, a system that tries to build a system using common parts.</p><p id="""">And, thankfully, we've got the parts to build a progress bar in React. Here's how the new progress bar works.</p><h3 id="""">The state machine</h3><div id=""""></div><p id="""">Placemark has started to use state machines in a few key places. The <a href=""/post/introducing-our-free-map-file-converter"" id="""">free file format converter</a> is based on a state machine. <a href=""https://xstate.js.org/docs/"" id="""">XState</a> is the library of choice here, and while in some cases it's felt like over-architecting to use a state machine, it's really nice to have a managed system for things that are asynchronous and have many sorts of transitions from one state to another. The progress bar is one of those situations:&nbsp;when a page finishes loading, we want to set the progress to 100% and then hide the bar only after 200 milliseconds, so that people can see the bar advancing to the ""finished""&nbsp;state.</p><div id=""""></div><p id="""">We've following the approach of using React's <a href=""https://reactjs.org/docs/hooks-effect.html"" id="""">useEffect</a> hook as infrequently as possible in Placemark. There are still quite a few uses&nbsp;(including in this component), but they're narrowly focused on connecting components to libraries or managing event handlers. There's a possible version of this component that uses useEffect more and XState less, but it's probably harder to implement correctly.</p><p id="""">The key element that's adopted from NProgress here is the ""inc"" method, which gradually increments the progress bar to show that something's going on. The router doesn't expose any sort of determinate progress, like saying that the page is 25% loaded, so it's the job of the UI to show an arbitrarily increasing progress bar that slows down when it gets near 100% so that it doesn't prematurely show success.</p><div id=""""></div><p id="""">The outline of this component is:</p><ul id=""""><li id="""">The progress bar starts in the state <strong id="""">hidden</strong>, in which it's not visible and its parent element has zero opacity.</li><li id="""">When a page transition starts, we send a <strong id="""">start</strong> event to the state machine, which transitions to the <strong id="""">visible</strong> state.</li><li id="""">While in the <strong id="""">visible</strong> state, the state machine sends a <strong id="""">tick</strong> event to itself every 200 milliseconds, which causes it to gradually increment the percentage shown for the progress bar.</li><li id="""">When the page transition finishes or fails, we send a <strong id="""">finish</strong> event to the state machine, which sets its percentage to 100% and enters the <strong id="""">done</strong> state.</li><li id="""">After 200 milliseconds, we automatically transition from the <strong id="""">done</strong> state to the <strong id="""">hidden</strong> state.</li></ul><h3 id="""">The component</h3><div id=""""></div><p id="""">The component connects that state machine to Next.js's router, so that when the router starts a transition, the state machine gets a 'start' event. Then it renders a component based on the state of the state machine. Continuing the theme of using existing parts, this uses Radix's <a href=""https://www.radix-ui.com/docs/primitives/utilities/portal"" id="""">Portal component</a> to render the progress bar in a div outside of the rest of the page's elements. This is pretty essential: Placemark's layouts are complex, so for anything that's floating or layered, it's best to use a portal and avoid any potential sizing or z-index issues.</p><p id="""">From there all that's left to do is import this component from _app.tsx and add it to every page.</p><h3 id="""">All together now</h3><p id="""">Here's the whole progress bar as a <a href=""https://gist.github.com/tmcw/f35f56ee55d47260d2ace7110bf03e18"" id="""">GitHub Gist</a>. It's something that you can start with and customize to use in your application. This gist assumes that you have some of modules we use already installed:&nbsp;<a href=""https://github.com/lukeed/clsx"" id="""">clsx</a> for managing class names, <a href=""https://lodash.com/"" id="""">lodash</a> for general utilities, Radix for the <a href=""https://www.radix-ui.com/docs/primitives/utilities/portal"" id="""">Portal</a> component, <a href=""https://xstate.js.org/docs/"" id="""">XState</a> for state machines, and <a href=""https://jotai.org/"" id="""">Jotai</a> for state management. If you don't use those, it should be pretty easy to refactor it - clsx for some string interpolation, lodash for Math.min &amp;&nbsp;Math.max, Jotai for XState's <a href=""https://xstate.js.org/docs/packages/xstate-react/#quick-start"" id="""">React integration</a>.</p><p>In large part because we have these nice abstractions to build on, this component is much smaller than NProgress: 143 lines compared to NProgress's 499. NProgress is still an impressive library that's stood the test of time, and it's easy to use with any framework. For Placemark's particular needs and setup, though, it's nice to build as much as possible with the same dependencies and style.</p><p id="""">I'm hesitant to package something like this into a module, for precisely that reason - a UI component like this is best written on top of some nice abstractions, and is probably better in the long term as a component within your application rather than a third-party dependency.</p>","How we built a concise implementation of a page loading bar, just using the Placemark application's existing ingredients",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/634dc52885d300c8fecc5c7d_Loading%20bar.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/634dc52885d300c8fecc5c7d_Loading%20bar.png,true,Mon Oct 17 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Announcing Layouts,announcing-layouts,616750c12c0aece979319ccd,637691d3c0a45f31f7830b6b,Thu Nov 17 2022 19:56:03 GMT+0000 (Coordinated Universal Time),Thu Nov 17 2022 20:00:43 GMT+0000 (Coordinated Universal Time),Thu Nov 17 2022 20:00:49 GMT+0000 (Coordinated Universal Time),"<p id="""">One thing that makes maps unique is their dimensionality. Geospatial data can be seen as a table of attributes, a tree structure of features and folders, as rendered shapes, as code, or in aggregate statistics. Placemark embraces this paradigm by giving you multiple views into your data, all synced and updated in real-time.</p><p id="""">‍</p><p id="""">So one of the most important features we have is the <strong id="""">Table view</strong>. The theory of Placemark's table is that it should be as powerful as possible, as close to a spreadsheet as we can get, but still integrated into the complexity of geospatial data. A lot of people spend a <em id="""">lot</em> of time using the table. So it made sense to add a way to really center the table and make it a primary part of the UI. Today, that's becoming a lot better, with <strong id="""">Layouts</strong>.</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:3640px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""3640px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63768fe4766d5e49ff745888_Layouts%20(1).png"" loading=""lazy"" alt=""Placemark layouts"" id="""" width=""auto"" height=""auto""></div></figure><p>‍</p><p id="""">There are now three layouts, that you can select from a menu in the top-right of the map. The three serve complimentary purposes:</p><h3 id="""">Default</h3><p id="""">This is the old-fashioned layout, which you’ve been using so far. It shows the structured list of features on the left, which you can use to organize features into folders and change their order in the map. You can resize the left and right panels, or hide them entirely to interact with a full-screen map.</p><p id="""">‍</p><h3 id="""">Floating</h3><p id="""">This view makes the table the star of the show and places the map as a draggable, resizable popup over the screen. This way you can interact with the table and see the maximum amount of attribute data.</p><p id="""">‍</p><h3 id="""">Vertical</h3><p id="""">This view shows the map at the top of the screen, and the attribute table below it. Perfect for small screens (this is the default view when you open Placemark on a phone), or for work that requires both deep attribute editing and some geospatial awareness. In this view, you can also resize the split, to show as much or as little map or table as you'd like.</p><p>‍</p><h3>Try them out!</h3><p>Layouts are available now - <a href=""https://app.placemark.io/signup"">check them out by signing up today</a>! Placemark is the best way to edit maps, with built-in APIs, collaboration, and more.</p>",Embracing attributes and improving Placemark's table editing!,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/637691cbd81a9f0e631d1758_Layouts%20(2).png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/637691cbd81a9f0e631d1758_Layouts%20(2).png,true,Thu Nov 17 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
"Announcing multi-feature selection, SVG export, and lasso selection",announcing-multi-feature-selection-svg-export-and-lasso-selection,616750c12c0aece979319ccd,6345b1ae76b77dac28dd1e95,Tue Oct 11 2022 18:10:54 GMT+0000 (Coordinated Universal Time),Mon Oct 17 2022 20:29:27 GMT+0000 (Coordinated Universal Time),Mon Oct 17 2022 21:13:13 GMT+0000 (Coordinated Universal Time),"<h3 id="""">Style multiple features at once with multi-selection</h3><div id=""""></div><p id="""">‍</p><p id="""">Multi-selection is a big part of how Placemark can make your map editing workflow better. You can multi-select from the map with shift-dragging and ""lasso""&nbsp;selection, or select multiple rows in the table view, and then from there you can do everything - run operations on those features, edit all of their properties, move, rotate, or delete them. It's a really powerful detail. And now you can edit the styles of multiple features just the same way, with a multi-selection!</p><h3 id="""">Scale control</h3><div id=""""></div><p id="""">‍</p><p id="""">Placemark now includes the classic map feature of…&nbsp;a scale control. With your choice of units - imperial, metric, or, for those seafarers out there, nautical!</p><h3 id="""">SVG Export</h3><div></div><p>‍</p><p>Finally, maybe burying the lede here, is SVG export. This is an exciting new beta of a feature that lets you bring your maps from Placemark to Figma, Illustrator, Sketch, or your design tool of choice. It turns Placemark folders into svg ""g""&nbsp;elements, projects your features into paths, and makes it all exportable. Plus, it supports a bunch of projections - off the bat there's Web Mercator, Equal Earth, Albers, and Equirectangular. More to come, and more options to make this the best way to create an SVG from a GeoJSON&nbsp;file, or from a map in general, without having to code or learn a complex library.</p>",A slew of new features that make it easier to style maps and use them everywhere,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6345b5e84483bc0aa903d703_Changelog%20-%20Oct%2011.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6345b5e84483bc0aa903d703_Changelog%20-%20Oct%2011.png,true,Tue Oct 11 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Announcing Placemark,announcing-placemark,616750c12c0aece979319ccd,625d86bf57186668a1138502,Mon Apr 18 2022 15:41:51 GMT+0000 (Coordinated Universal Time),Mon Apr 25 2022 16:47:25 GMT+0000 (Coordinated Universal Time),Mon Apr 25 2022 16:47:25 GMT+0000 (Coordinated Universal Time),"<p>Today <a href=""/pricing"">you can sign up for Placemark and start collaborating and creating maps</a>!</p><p>After more than a year in development, with hundreds of maps created in the beta period, it’s ready for everyone.</p><p>This is just the beginning. In the last year this has gone from a wishful thought to a platform that you can use to build, import, export, and edit geospatial data in over 10 formats, with all the essential GIS operations like buffering, intersection, and simplification. There's much more over the horizon. Placemark thrives for collaboratively-edited small vector datasets, but expanding the kind &amp; size of datasets, and the kinds of things you can do with them, is our main focus.</p><p>I’m excited to share the rest of the progress just like I’ve shared it so far. The only difference is that now, you can sign up and use it.</p><p>So head over to product &amp; pricing info and check out the rest of the site - there are <a href=""/videos"">lots of videos</a> showing what's possible, <a href=""/documentation-index"">documentation</a>, a <a href=""/roadmap"">roadmap</a>, and more. I'd love for you to give it a try. Any other questions, <a href=""mailto:tom@placemark.io?subject=Placemark%20launch%20questions"">shoot me an email</a>.</p><p>Cheers!</p><p>-Tom MacWright</p>",Announcing a big new feature: the sign up button.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6266cf9d9793ad1aa054550e_Release.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6266cf9d9793ad1aa054550e_Release.png,true,Thu Apr 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Betterknown: a new WKT & EWKT parser,betterknown-a-new-wkt-ewkt-parser,616750c12c0aece979319ccd,6306600c3883486dfcccd540,Wed Aug 24 2022 17:29:48 GMT+0000 (Coordinated Universal Time),Wed Aug 24 2022 17:31:30 GMT+0000 (Coordinated Universal Time),Wed Aug 24 2022 17:31:34 GMT+0000 (Coordinated Universal Time),"<p id="""">Our approach to open source is pretty simple:&nbsp;use a lot of it, make some of it, and maintain the things we release as best we can. The best open source projects are the ones heavily used by their creators. Placemark is an especially good place for open source projects to mature:&nbsp;when there's a bug in a parser, generator, or another utility, it'll usually show up because of the many different kinds of data and tasks that people do with this system.</p><h3>Placemark's open source projects</h3><p id="""">If you aren't familiar with our open source projects, here are the existing ones:</p><ul id=""""><li id=""""><a href=""https://github.com/placemark/togeojson"" id="""">toGeoJSON</a> is a module that Tom started working on in 2013! Such a long time ago. It converts <a href=""/documentation/kml"" id="""">KML</a>, <a href=""/documentation/gpx"" id="""">GPX</a>, and <a href=""/documentation/tcx"" id="""">TCX</a> - three very popular, XML-based geospatial formats - into GeoJSON. Over the years it's grown to include lots of little features, like support for folders, feature visibility, streaming parsing, GPX&nbsp;extensions, and a lot more. Placemark's fork is used in the importer. At this point, it's super battle-tested, but with our maintenance it'll keep getting better.</li><li id=""""><a href=""https://github.com/placemark/tokml"" id="""">toKML</a> converts GeoJSON into KML. This one also goes way back, but it's now maintained under the Placemark umbrella and has gotten features like visibility &amp;&nbsp;folder support, plus TypeScript types to make it easier to integrate into applications.</li><li id=""""><a href=""https://github.com/placemark/check-geojson"" id="""">check-geojson</a> is the successor to the longstanding <a href=""https://github.com/mapbox/geojsonhint"" id="""">geojsonhint</a> module, also written by Placemark's creators. It takes geojsonhint's mission a step further by reporting more specific errors and letting you import only the ""good"" data from partially-valid files.</li></ul><p id="""">Today we're adding another one:&nbsp;<a href=""https://github.com/placemark/betterknown"" id="""">betterknown, a new parser and stringifier for WKT</a>.</p><h3 id="""">Betterknown</h3><p id="""">WKT&nbsp;parsing &amp; stringification can be a challenge. We wrote <a href=""https://github.com/mapbox/wellknown"" id="""">wellknown</a>, a WKT parser &amp;&nbsp;stringifier, years ago. But it had quite a few basic limitations and was too liberal in the inputs it would accept. Plus, it hasn't been maintained since 2017. Not great. There's also <a href=""https://github.com/cschwarz/wkx"" id="""">wkx</a>, which was maintained until 2020 and is better than wellknown in some ways - its parser is more mature - but also a large dependency and has some inelegant API&nbsp;touches.</p><div></div><p id="""">Betterknown aims to be the synthesis of the two - wellknown's simplicity, wkx's correctness, and maintained and updated for software in 2022. It combines parts of wkx, crediting Christian Schwarz's amazing work, with new touches and improvements.</p><ul id=""""><li id="""">Written in TypeScript, includes its own types</li><li id="""">Only 1.5kb <a href=""https://bundlephobia.com/package/betterknown@1.0.2"" id="""">minified &amp;&nbsp;gzipped</a></li><li id=""""><a href=""https://placemark.github.io/betterknown/"" id="""">Well-documented</a></li><li id="""">Support for EWKT&nbsp;with pluggable reprojection</li></ul><p id="""">Betterknown is powering Placemark's support for WKT&nbsp;import &amp;&nbsp;export, and will get better as we put it through its paces in production. <a href=""https://github.com/placemark/betterknown"" id="""">Try it out - it's now on GitHub!</a></p>","Placemark's new open source WKT & EWKT parser, and a review of our existing open source modules.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63065fd488cfb63fda54abaa_Betterknown.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63065fd488cfb63fda54abaa_Betterknown.png,true,Wed Aug 24 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Changelog: April 25,changelog-april-25,616750c12c0aece979319ccd,6262ac49c3d5f64e69191059,Fri Apr 22 2022 13:23:21 GMT+0000 (Coordinated Universal Time),Mon Apr 25 2022 17:07:28 GMT+0000 (Coordinated Universal Time),Mon Apr 25 2022 17:07:34 GMT+0000 (Coordinated Universal Time),"<p>What a month it has been since late last week when <a href=""/post/announcing-placemark"">Placemark officially opened to the public</a>! Besides receiving a lot of love and sending a lot of emails, here's what's new!</p><h3>Improvements</h3><ul><li>Placemark supports simplifying features. The amount of simplification, set in units of degrees, was previously on a set range. That really clobbered small features. The simplification slider now allows values relative to the size of the feature.</li><li>Units are better represented: they're grouped into Imperial, Metric, and Other, and sorted by their size. This should make it a lot easier to find the right unit when you're measuring the length of a line, the area of a polygon, or choosing how much to buffer a feature's geometry.</li><li>There are lots of ways to <a href=""/documentation/importing"">import data into Placemark</a>, but there was one missing:&nbsp;dropping a file on the index page, the one where your maps are listed. Dropping a file there should create a map and open the import dialog to import that data, right?&nbsp;This feels like it <em>should work</em>, and now it does!</li></ul><h3>Fixes</h3><ul><li>Opening and saving files in Safari is more reliable now. Previously clicking ""Import File…""&nbsp;through the main menu wouldn't consistently open the provided file.</li><li>Some icons didn't properly flip in dark mode. They now do.</li><li>Some invalid GPX&nbsp;data was able to be imported and would crash Placemark. This is fixed now! Placemark's KML, GPX, and TCX importers are all part of our <a href=""https://github.com/placemark/togeojson"">open-source toGeoJSON module</a>, which you can use for your own projects and software too! The fixes for GPX&nbsp;are in that module.</li></ul><h3>Commentary</h3><p>It's great to be writing a changelog. I love progress. As much fun as it is to release Placemark, I know that the real work is in responding quickly to feedback and building something useful. There are no overnight successes, and we don't get everything right on the first try. But now I&nbsp;get to improve Placemark and tell you about it, and you can sign up and see for yourself. Isn't that cool? There are plenty of features and improvements on the way, both the big ones hinted at <a href=""/roadmap"">on the roadmap</a> and a million quality-of-life improvements that I hope will really make this product nice.</p><p>Sorting those units swept me down a deep Wikipedia rabbit hole about units. Did you know that there's a <a href=""https://en.wikipedia.org/wiki/Foot_(unit)#U.S._survey_foot"">US Survey foot</a>, a unit that's infinitesimally smaller than the ""foot"" that we usually refer to? And also a <a href=""https://en.wikipedia.org/wiki/Mile#U.S._survey"">US Survey mile</a>, that's also just barely different than a regular old fashioned mile? Certainly some surveyors are reading this and nodding <em>yes</em>.</p>","Just another Monday, with some improvements, fixes, and commentary!",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6266ce870ff2824c3f271707_Changelog.png,false,Mon Apr 25 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: August 16,changelog-august-16,616750c12c0aece979319ccd,62f5b182c23d655dd6285e27,Fri Aug 12 2022 01:48:50 GMT+0000 (Coordinated Universal Time),Tue Aug 16 2022 15:44:29 GMT+0000 (Coordinated Universal Time),Tue Aug 16 2022 15:44:35 GMT+0000 (Coordinated Universal Time),"<p id="""">It's been a busy, and fun week at the Placemark factory! Let's dive in. Oh, and would you rather read news about Placemark as a monthly email, rather than a blog post? <a href=""https://confirmsubscription.com/h/y/13501B63095BB913"" id="""">Now you can do just that - sign up for email updates.</a></p><p id="""">‍</p><h5 id="""">WKT</h5><p id="""">The <a href=""/documentation/wkt"" id="""">WKT</a>&nbsp;format has gotten a lot of improvements. Despite only being able to encode geometries and not properties (check out the <a href=""/format-matrix"" id="""">format matrix</a>), it's pretty complex and has a lot of optional or vaguely-specified features. But Placemark aims to support it all, and we've made another effort to!</p><ul id=""""><li id="""">""ZM""&nbsp;coordinates are supported</li><li id="""">GeometryCollections can be imported</li><li id="""">The ""EMPTY""&nbsp;form of Geometries, like POINT&nbsp;EMPTY, is now supported.</li></ul><p id="""">You can now import files of <strong id="""">any size your browser can handle</strong> when you're working in draft mode. They won't be saved to the server, but you can use the mode to work with those files for the length of your browser session.</p><p id="""">‍</p><h5 id="""">KML &amp; Visibility</h5><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1443px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1443px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62fbb9c2cf876008e67011cb_layer-visibility.png"" loading=""lazy"" id="""" width=""auto"" height=""auto""></div><figcaption id="""">Controlling layer visibility</figcaption></figure><p id="""">You can now toggle the visibility of individual features, not just folders. This support translates to and from the <a href=""/documentation/kml"" id="""">KML&nbsp;format</a> support, too:</p><ul id=""""><li id="""">Imported KML&nbsp;features with individual &lt;visibility&gt;&nbsp;tags will get a ""visibility"" property</li><li id="""">Exported data with a ""visibility"" property will be translated into KML&nbsp;visibility when it's exported to KML.</li></ul><p id="""">These changes are also available as part of Placemark's sponsored open source projects, <a href=""https://github.com/placemark/togeojson"" id="""">toGeoJSON</a> and <a href=""https://github.com/placemark/tokml"" id="""">toKML</a>.</p><p id="""">‍</p><h5 id="""">CSV files with GeoJSON&nbsp;and WKT&nbsp;columns</h5><p id="""">GeoJSON support now can handle GeoJSON&nbsp;or WKT&nbsp;geometries in columns of a <a href=""/documentation/csv"" id="""">CSV</a>&nbsp;file. These are common when you export data from systems like Google BigQuery. Now you can use them in Placemark.</p><p id="""">‍</p><h5 id="""">Dragging features into folders</h5><p id="""">It's much easier to drop features into folders now, and the visual distinction of a feature being in a folder versus just below it is easier to notice.</p><p id="""">‍</p><h5 id="""">Dividing multiple Multi-geometries</h5><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1958px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1958px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62fbbb5a26e811366f99b363_divide.png"" loading=""lazy""></div></figure><p id="""">The ""Divide Features"" operation now supports multi-selections. This operation lets you take a MultiPoint, MultiGeometry, MultiLineString, or GeometryCollection, and split it into multiple features with ""single""&nbsp;geometry types, like LineString, Point, and Polygon. Now it works with multi-selections, so if you have a big dataset with mixed Polygon &amp;&nbsp;MultiPolygons, you can select-all and normalize all the MultiPolygons to Polygons. This can be super useful for massaging data into a format that some downstream scripting prefers.</p>","Better WKT support, hide individual features, import CSV files with GeoJSON columns, and more!",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62fbb7f6163bd46b4752777e_Changelog%20-%20Aug%2016.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62fbb7f6163bd46b4752777e_Changelog%20-%20Aug%2016.png,true,Tue Aug 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: December 15,changelog-december-15,616750c12c0aece979319ccd,639b886c0178742359dd5a92,Thu Dec 15 2022 20:49:48 GMT+0000 (Coordinated Universal Time),Thu Dec 15 2022 20:53:13 GMT+0000 (Coordinated Universal Time),Thu Dec 15 2022 20:53:17 GMT+0000 (Coordinated Universal Time),"<p id="""">Here's what's new in Placemark!</p><h3 id="""">20% off till the end of the year!</h3><p id="""">Inflation is roaring and most services are increasing their prices, but we're doing the opposite:&nbsp;Placemark is now 20% off for new accounts, till the end of the year!</p><h3 id="""">Lots of new open source</h3><p id="""">The Placemark Open Source Strategy™️ is simple:&nbsp;we incubate modules as part of Placemark itself, making sure that they work in production. Then, when they're stable and ready to go, they get released as open source modules, that Placemark then uses. So when you use a module from the Placemark GitHub organization, you're using the same thing that Placemark uses. This motivates us to maintain these modules, and hopefully a few of the folks using the open source code also hear about and use Placemark.</p><p id="""">So what's new in open source?</p><ul id=""""><li id=""""><a href=""https://github.com/placemark/geojson-rewind"" id="""">GeoJSON Rewind</a>:&nbsp;this is a module that Tom wrote in 2014 back at Mapbox, which has been refreshed, with TypeScript types, better tests, thorough documentation, and a more understandable API. Explaining what it does is a job for another post: what it does is esoteric but essential in the world of maps.</li><li id=""""><a href=""https://github.com/placemark/micro-totp"" id="""">Micro TOTP</a>:&nbsp;inspired by <a href=""https://drewdevault.com/2022/10/18/TOTP-is-easy.html"" id="""">Drew DeVault</a>, this module implements the basic parts of the <a href=""https://en.wikipedia.org/wiki/Time-based_one-time_password"" id="""">Time-based one time password</a> algorithm, and is a key ingredient of Placemark's upcoming support for 2FA.</li><li id=""""><a href=""https://github.com/placemark/geo-viewport"" id="""">geo-viewport</a>: another refreshed classic, this module lets you convert between zoom / centerpoint map configurations and extent-based ones.</li></ul><h3 id="""">Drawing &amp; resizing rectangles</h3><p id="""">This feature has been requested pretty often! When you draw a rectangle in Placemark, you're drawing <em id="""">a rectangular polygon</em> - which means that if you then move one of the corners of that rectangle, it moves like a shape would, not like a rectangle would. It immediately stops being a rectangle. This makes sense, but isn't always what people expect. But now, you can resize rectangles as rectangles:</p><p id="""">‍</p><div id=""""></div><p id="""">‍</p><p id="""">In classic Placemark style, this behavior works in a few extra places. Let's say you have a MultiPolygon with multiple rectangles - those you can also modify like rectangles. Or a polygon with rectangular inner rings. That works too. If it's a closed, rectangular ring, it just works. And you can hit <strong id="""">Cmd</strong>, while dragging, to turn your rectangles into irregular polygons.</p><p id="""">Another related <em id="""">orthogonal-themed</em> drawing improvement:&nbsp;when you're drawing lines or polygons, you can now hold down the Shift key to draw at right angles:</p><p>‍</p><div id=""""></div><p>‍</p><p id="""">As you might have noticed in that video, this also comes with a new hints interface for drawing that will show you how to edit lines, polygons, and rectangles:</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/639b86ce8a927f14a1533ef5_CleanShot%202022-12-15%20at%2015.42.26%402x.png"" loading=""lazy"" alt=""Mode hint"" id="""" width=""auto"" height=""auto""></div></figure><h3 id="""">Reauth &amp; SAML</h3><ul id=""""><li id="""">If you get logged out while editing a map, Placemark will now intelligently ask you to log in again, rather than doing the usual flow of redirecting to the sign-in page.</li><li id="""">SAML&nbsp;is now generally available, for Enterprise plans. If you're interested, reach out!</li></ul>","Rectangles, right angles, and open source modules!",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/639b885df91be0f600f0d778_Changelog%20-%20Dec%2015.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/639b885df91be0f600f0d778_Changelog%20-%20Dec%2015.png,true,Thu Dec 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Changelog: February 5 - Introducing Circles!,changelog-february-5-introducing-circles,616750c12c0aece979319ccd,63e0669610d0b97ac2607f7b,Mon Feb 06 2023 02:31:50 GMT+0000 (Coordinated Universal Time),Mon Feb 06 2023 02:31:50 GMT+0000 (Coordinated Universal Time),Mon Feb 06 2023 13:27:19 GMT+0000 (Coordinated Universal Time),"<p id="""">After a brief end-of-year pause, welcome back to the Placemark changelog! We've got some good new stuff to introduce.</p><p id="""">‍</p><h3 id="""">Drawing circles</h3><p id="""">‍</p><div id=""""></div><p id="""">‍</p><p id="""">This one was requested for a long time: the ability to draw circles. I could write about circles for hours, but I'll try to summarize why circles on maps are a <em id="""">bit odd</em>, and why this feature includes three different kinds of circles.</p><p id="""">Placemark is a tool that really embraces open geospatial <a href=""/format-matrix"" id="""">formats</a>. If you are coming from the world of drawing tools, or even technologies like <a href=""https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg"" id="""">SVG</a>, the standard for putting graphics in webpages, you might expect those formats to support the idea of a ""circle"", and be surprised that virtually none of them do. There are a few formats that do support circles, like the tremendously complex <a href=""https://en.wikipedia.org/wiki/Geography_Markup_Language"" id="""">GML</a>&nbsp;format, but generally none of the geospatial data types that you'll come across support the idea of a circle - not ESRI Shapefiles, not GeoJSON, or KML, or WKT.</p><p id="""">The reason why most formats don't support circles is in part because most formats are based on a meta-format, the Simple Features Standard (brace for <a href=""https://www.ogc.org/standards/sfa"" id="""">PDF&nbsp;link</a>), and most formats only support part of it, and that specification doesn't have circles (though it does have curves). The other reason is that circles are really hard to define.</p><p id="""">Placemark's implementation of circle drawing allows for three distinct kinds of circles, but there are certainly more. They are:</p><ol start="""" id=""""><li id=""""><strong id="""">Geodesic circles.</strong> These have a constant radius in real-world units. If you're taking about a circle with a ""one mile radius"", then it's a geodesic circle.</li><li id=""""><strong id="""">Degrees circles.</strong> These have a constant radius in decimal degrees, longitude and latitude. Let's say you have a circle with a ""one degree radius"", then that's a circle in degrees. This is probably the kind of circle you'd make if you were writing an algorithm to make circles - <a href=""https://macwright.com/2013/03/05/math-for-pictures.html"" id="""">just spinning sine and cosine functions around a circle using some math</a>.</li><li id=""""><strong id="""">Mercator circles.</strong> These circles look like circles on a Mercator map, which is the kind of map that Placemark uses:&nbsp;it uses the Mercator projection. The circles that you can draw in this mode <em id="""">look</em> right, but they don't have any direct relationship to the kind of circle you'd usually talk about - they aren't a ""one mile radius"" around anything.</li></ol><p id="""">In maps using the Web Mercator projection - the kinds of maps that Placemark supports - the circles that have easy definitions, like ""a one mile radius"", will often look odd, and the circles that look correct and look like circles, don't have such a simple definition. For example, here's a circle placed over Greenland: if you look closely, it's an ellipse, not a perfect circle.</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1514px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1514px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e06142dd10660b243df578_CleanShot%202023-02-05%20at%2021.08.39%402x.png"" loading=""lazy"" alt=""A circle placed over Greenland"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">You can really dive into this subject by checking out <a href=""https://en.wikipedia.org/wiki/Tissot%27s_indicatrix"" id="""">Tissot's Indicatrix(es?)</a>, which put circles on common projections to show how each projection deforms the shapes, orientation, and size of circles. Thanks to the <a href=""https://en.wikipedia.org/wiki/Theorema_Egregium"" id="""">Theorema Egregium</a>, we know that this is inevitable and unavoidable as a result of representing a 3D earth as a 2D map, but there are different compromises we can take - different map projections with different kinds of distortion.</p><p id="""">And that's how we ended up with a circle drawing tool that supports three different kinds of circles! And, due to the lack of support in the base file formats, those circles are represented by polygons with many nodes.</p><p id="""">In Placemark's implementation of circles, those circles keep being the same kind of circle with the same radius when you move them around:&nbsp;if you draw a geodesic circle at the equator with a certain radius, it'll get bigger if you move it north or south, due to the distortion of the Web Mercator projection. You can convert a circle into a polygon, though, by moving one of its nodes while pressing <strong id="""">Command</strong>, or by deleting its ""circle"" property.</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1232px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1232px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e063183700f091f9d8be04_CleanShot%202023-02-05%20at%2021.16.33%402x.png"" loading=""lazy"" alt=""The &quot;circle&quot; property of a circle"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">‍</p><h3 id="""">More improvements</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2272px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2272px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e06382bb9f18bb9f4dc3da_CleanShot%202023-02-05%20at%2021.18.16%402x.png"" loading=""lazy"" alt=""CSV import options including a new &quot;polyline&quot; option"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">You can now import <a href=""/documentation/csv"" id="""">CSV</a> files with <a href=""/documentation/polyline"" id="""">encoded polylines</a>! CSV importing has gotten really powerful - 7 different options within the CSV importer. Oh, and this works for Excel files too. And you can now <em id="""">export</em> polylines via the CSV export too - it supports all features with LineString geometries.</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1778px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1778px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e0643403e95f6e41023461_CleanShot%202023-02-05%20at%2021.21.24%402x.png"" loading=""lazy"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">The feature table has always supported auto-completion drawn from the existing values of features, but it was previously limited to only the some of the most popular values. It's much improved now - even gigantic datasets with lots of distinct values will now have useful autocomplete in the table interface.</p><p>‍</p><h3>Figma Plugin Changelog</h3><p>There's plenty new on the <a href=""https://www.figma.com/community/plugin/1189962635826293304/Placemark"">Placemark Figma Plugin</a>, too! Since<a href=""/post/placemark-for-figma""> I introduced it last month</a>, it's gained labeling for streets and areas, as well as vastly improved data limits.</p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1596px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1596px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e0654f6af00b61636169c8_CleanShot%202023-02-05%20at%2021.24.58%402x.png"" loading=""lazy""></div></figure><p>‍</p><p>Also new is a settings page that lets you copy the generated map's bounding box so you can use it in other tools (like Placemark, which supports zooming to bounding boxes, importing them as rectangles, exporting them, and more). And font size, for the labels, and the ability to go to the relevant area in Google or OSM. Over 1,500 folks have tried it out - <a href=""https://www.figma.com/community/plugin/1189962635826293304/Placemark"">it's free on the Figma Community site</a>.</p><p>‍</p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1596px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1596px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e065a23700f02ea7d8f861_CleanShot%202023-02-05%20at%2021.27.23%402x.png"" loading=""lazy""></div></figure><p>‍</p><div id=""""></div><p id="""">‍</p><p id="""">And that's it for this update. Thanks as always for sending suggestions and supporting Placemark, and here's to a happy 2023!</p>","Improvements including circle drawing, CSV import types, and better autocomplete in the table",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e066894fd49b322aa5d781_Circles%20-%20Feb%205.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63e066894fd49b322aa5d781_Circles%20-%20Feb%205.png,true,Mon Feb 06 2023 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Changelog: July 15,changelog-july-15,616750c12c0aece979319ccd,62d1badd5e164f618a210281,Fri Jul 15 2022 19:07:09 GMT+0000 (Coordinated Universal Time),Fri Jul 15 2022 19:08:03 GMT+0000 (Coordinated Universal Time),Fri Jul 15 2022 19:08:16 GMT+0000 (Coordinated Universal Time),"<p id=""""><em id="""">A few big features are around the corner, but in the meantime, the features &amp;&nbsp;fixes keep rolling!</em><strong id="""">‍</strong></p><p id=""""><strong id="""">Shapefile import now supports the cpg file.</strong> This'll fix some <a href=""/documentation/shapefile"" id="""">Shapefile</a> imports that use unusual character encodings. The Shapefile format is, in this year 2022, more of an oral tradition, a loose conglomeration of ideas, rather than a standard. And the CPG&nbsp;(codepage)&nbsp;file was introduced to communicate the file encoding of its attribute file, the DBF. Thankfully many modern file formats piggyback on an existing encoding metadata system like XML's or just support UTF encodings, like JSON.</p><p id=""""><strong id="""">You can cast properties to rich text through the table interface.</strong> Plus, when you <a href=""/documentation/properties"" id="""">cast a property</a> to rich text - <a href=""/post/a-big-boost-for-properties"" id="""">which we introduced recently, along with a nice new editor for rich text</a> - it'll turn strings into rich text strings and also let you turn rich text back into a plain string of HTML.</p><p>‍</p><div></div><p id=""""><strong id="""">You can draw a great arc with Placemark now!</strong> Just select any two points, right-click or use the geometry menu, and choose great arc. Fancy!</p><p>‍</p><div></div><p id=""""><strong id="""">You can now make the side panels really wide.</strong> The table view in Placemark is, if I&nbsp;may say so myself, really nice. So nice that you might want to work with primarily the table view and have it take up most of your screen. This is now possible! You can make the map just a sliver of the right side of the screen and make the table view take up the rest. Big tables ftw.</p><p>‍</p><div></div><p id=""""><strong id="""">The statistics view now shows minimum &amp;&nbsp;maximum for numbers, and most common values for strings. </strong>Plus, it reflects any searching or filtering you've applied to the table view, and you can use search &amp; statistics at the same time.</p><p>‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1542px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1542px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62d1bac85c29269c9421c5b7_CleanShot%202022-07-15%20at%2015.05.51%402x.png"" loading=""lazy"" alt=""Vertex count in the geometry panel"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">You can now see the number of vertices in a feature - LineString, Polygon, etc, in the geometry information panel.</p><p id=""""><strong id="""">The symbolization editor now includes CARTO&nbsp;Colors as options for ramps.</strong> Back in 2016, <a href=""https://carto.com/carto-colors/"" id="""">CARTO</a> introduced this set of color presets, which are great, and make a good complement to the existing <a href=""https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3"" id="""">ColorBrewer</a>-based presets. Personally, I&nbsp;think CARTO&nbsp;colors tend to be better on dark-background maps, and ColorBrewer works a bit better on lighter maps. All of these colors are professionally picked and designed with colorblindness in mind.</p>","Great arcs, big tables, better statistics, and more!",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62d1ba71c6f4e31155217b6f_Changelog_%20July%2015.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62d1ba71c6f4e31155217b6f_Changelog_%20July%2015.png,true,Fri Jul 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: June 28,changelog-june-28,616750c12c0aece979319ccd,62bb3981f0557efd58d80b84,Tue Jun 28 2022 17:25:21 GMT+0000 (Coordinated Universal Time),Sat Jul 23 2022 20:32:29 GMT+0000 (Coordinated Universal Time),Sat Jul 23 2022 20:32:39 GMT+0000 (Coordinated Universal Time),"<p id="""">A lot has moved in the last few weeks! Let's dive in to all the improvements, fixes, and features in Placemark.</p><h4 id="""">Features</h4><div></div><p id="""">You can now edit maps on your mobile devices, like iPads. Touch support has been improved across the board - fixes to dragging files, improving drawing tools on the iPad, and making sure that the whole UI&nbsp;looks and works great on those devices.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1648px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1648px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bb3891bde3bbf67a86b451_CleanShot%202022-06-28%20at%2013.21.01%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Placmark importing an OpenStreetMap XML file""></div><figcaption id="""">Importing OSM&nbsp;XML straight from overpass turbo's API</figcaption></figure><p id="""">Placemark got support for a new file format:&nbsp;<a href=""/documentation/osm"" id="""">OSM</a>. That means you can use tools like <a href=""https://overpass-turbo.eu/"" id="""">overpass turbo</a> to pull features from <a href=""https://www.openstreetmap.org/"" id="""">OpenStreetMap</a>, or even use OpenStreetMap's API&nbsp;directly to import open map data.</p><p id="""">You can now invite multiple people to a team simultaneously with the invitation form. It also supports email-style lines like <strong id="""">John Smith &lt;john@foo.com&gt;</strong> so you can quickly invite a team that you know from their emails.</p><p id="""">Double-clicking on a feature in the left panel now zooms to it.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1032px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1032px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bb38234a4a6c6934dd773b_CleanShot%202022-06-28%20at%2013.19.15%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Filtering a geospatial table by folders""></div><figcaption id="""">Filtering the table view by folder</figcaption></figure><p id="""">You can filter the feature table by folders. This is especially useful because different folders tend to have features with different sets of attributes - reducing this down to just one folder can make the table a lot more readable.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:766px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""766px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bb3840d36e04731fcfcd1f_CleanShot%202022-06-28%20at%2013.19.46%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id=""""></div><figcaption id="""">Duplicating a folder</figcaption></figure><p id="""">Duplication! You can now duplicate features, entire folders of features, as well as maps themselves. Duplicating a map will preserve its entire folder structure and all of its features, and copy its name and description.</p><p id="""">The quota for how many maps you can make is now 500, up from 50 before.</p><h4 id="""">Fixes</h4><ul id=""""><li id="""">Chromium on Linux wasn't able to save or open files because of a bug in its implementation of the <a href=""https://web.dev/file-system-access/"" id="""">File System Access API</a>. We've added a workaround that fixes file access in Placemark. This means you can use the <a href=""/post/introducing-our-free-map-file-converter"" id="""">converter</a> and <a href=""/videos/importing-data"" id="""">import &amp;&nbsp;export</a> on Linux now.</li><li id="""">Due to a Firefox bug, you couldn't scroll textareas in dialog boxes. We've deployed a workaround that fixes that.</li><li id="""">Sorting features didn't work when in a Draft. This is fixed, bringing the Draft mode, which doesn't store features on the server, back up to par with the normal mode which supports real-time collaboration.</li></ul>","OSM XML support, duplication, basic support for iPads, bulk invites, and bug fixes in this week's changelog.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bb3975a1d2664546d530fc_Changelog%20June%2028.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bb3975a1d2664546d530fc_Changelog%20June%2028.png,true,Tue Jun 28 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: March 13,changelog-march-13,616750c12c0aece979319ccd,640e6b13a2fc9f3fb2f76877,Mon Mar 13 2023 00:15:15 GMT+0000 (Coordinated Universal Time),Mon Mar 13 2023 13:38:09 GMT+0000 (Coordinated Universal Time),Mon Mar 13 2023 13:38:38 GMT+0000 (Coordinated Universal Time),"<p>Some small but mighty updates to Placemark!</p><h3>Updated collaboration &amp;&nbsp;map renderer</h3><p>Under the hood, we've updated <a href=""https://docs.mapbox.com/mapbox-gl-js/api/"">Mapbox GL&nbsp;JS</a> and <a href=""https://replicache.dev/"">Replicache</a>, two key components of Placemark. We've <a href=""/post/collaboration-technical-deep-dive"">used Replicache for collaboration</a> since the start of Placemark, and it's been great, but there have always been issues with Firefox Private Mode.</p><p>Firefox's Private Windows are the most strong, and chaotic, form of security controls in browsers. While other browsers will forget persisted information, like information in <a href=""https://web.dev/indexeddb/"">IndexedDB</a>, more quickly in their private modes. Firefox, on the other hand, doesn't support IndexedDB at all when you're using a private window. For other APIs like <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"">localStorage</a>, Firefox exposes a localStorage object, but using it in any way will immediately throw an error. Replicache has used IndexedDB for a while, so…&nbsp;Placemark has had problems in this situation. Thankfully, Replicache now supports a memory mode, which fixes behavior in private windows!</p><p>‍</p><h3>Custom data support in the Placemark Figma plugin</h3><div></div><p>‍</p><p>The <a href=""https://www.figma.com/community/plugin/1189962635826293304/Placemark"">Placemark Figma plugin</a> got a much-requested new feature:&nbsp;support for custom data. You can select any GeoJSON&nbsp;file from your computer, and the features will be overlaid onto the map! Just like the rest of the plugin's output, GeoJSON features become native Figma objects, so you can style them using all of Figma's power. Pretty cool.</p>","Custom data in the Figma plugin, plus better support for Firefox Private Windows",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/640e6b00d52c12081d37ba9a_March%2012%20Changelog.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/640e6b00d52c12081d37ba9a_March%2012%20Changelog.png,true,Mon Mar 13 2023 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: May 13,changelog-may-13,616750c12c0aece979319ccd,627d3fc73bcd06593872f47f,Thu May 12 2022 17:11:35 GMT+0000 (Coordinated Universal Time),Wed Aug 10 2022 01:34:02 GMT+0000 (Coordinated Universal Time),Wed Aug 10 2022 01:35:11 GMT+0000 (Coordinated Universal Time),"<p id="""">We've been hard at work with big performance improvements and new features, but that doesn't mean that sweet, sweet incremental improvements fall by the wayside. Here's what's new in Placemark:</p><h3 id="""">Features</h3><ul id=""""><li id=""""><strong id="""">FlatGeobuf format support!</strong> <a href=""http://flatgeobuf.org/"" id="""">FlatGeobuf</a> is an efficient binary format that's been making waves in the world of geospatial technology. You can import &amp;&nbsp;export p with Placemark, and since the format has the same basic capabilities as GeoJSON, all of its features are supported.</li></ul><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2628px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2628px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627ec5f37fde0759350564e5_CleanShot%202022-05-13%20at%2016.56.03%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Placemark in dark mode, showing DC metro stations""></div><figcaption id="""">The new dark mode in action</figcaption></figure><ul id=""""><li id=""""><strong id="""">Dark mode is enhanced</strong> with custom scrollbars and zoom controls. If you're a vampire, live in the dark, or both, there'll be less blinding white in the interface. Toggle dark mode with the sun icon in the top menu-bar.</li><li id="""">The style of point data has been rethought to stand out on a larger variety of background maps.</li><li id="""">You can now <strong id="""">pay for Placemark </strong>with a variety of additional methods, not just credit cards. Alipay, WeChat Pay, and lots of European-friendly bank redirect methods like Bancontact and iDEAL are now turned on.</li><li id=""""><strong id="""">You can now toggle ""Show All"" when editing a feature's properties. </strong>Some people think of geospatial data like a table, in which most features will have the same properties like rows in a spreadsheet. Others think of it more as freeform properties, in which different features have different keys and values attached. With ""Show all"" clicked, you'll see all the columns in the dataset. With it turned off, you'll see only the properties on the object you have selected.</li><li id=""""><strong id="""">You could always use ""paste"" to </strong><a href=""/documentation/importing""><strong id="""">add GeoJSON&nbsp;features to the map</strong></a><strong id="""">,</strong> but now you can also hit ""paste"" on the map index page, and it'll create a new map and open the ""Import text"" dialog for you to import.</li></ul><h3 id="""">Fixes</h3><ul id=""""><li id="""">Lots of operations having to do with Folders are improved:&nbsp;if you were splitting a line in a folder, previously the two parts would end up outside that folder. Now when you do an operation on features, the results end up in the same folder as those features.</li><li id="""">You can now right-click a folder on the left side &amp;&nbsp;zoom to the extent of all its features.</li></ul><h3 id="""">Did you know?</h3><p id="""">When you have a feature selected on the map, you can just hit ""copy"" and it'll copy the GeoJSON&nbsp;for that feature to your clipboard. Multiple features selected, it'll copy a FeatureCollection. Then you can paste that GeoJSON in your code editor, on another map, wherever you like!</p>",Friday update: here's what's new! FlatGeobuf and fixes and features.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627ec5598f82a71b28bb823b_Changelog%20May%203.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627ec5598f82a71b28bb823b_Changelog%20May%203.png,true,Fri May 13 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: May 2,changelog-may-2,616750c12c0aece979319ccd,626ae0a4a2a8057f42b16452,Thu Apr 28 2022 18:44:52 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:34:49 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<div id=""""></div><p id="""">‍</p><ul id=""""><li id="""">The <a href=""/documentation/placemark-rest-api"" id="""">REST&nbsp;API</a> is now a lot faster to update:&nbsp;if you're editing a map and using the API, it'll now update within seconds, rather than with a 30 minute cache.</li><li id="""">Collaboration is faster than ever. Changes are visible about 40ms faster than before.</li><li id="""">Windows &amp;&nbsp;Linux keybindings: you can hit Ctrl+S, Ctrl+O, and more to perform actions quickly. Check the cheatsheet in the application for more details.</li><li id="""">Small polygons now render even when you’re zoomed out.</li></ul><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6270045c9bfc24dbe49b7dd3_CleanShot%202022-05-02%20at%2012.18.16%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A dataset of islands shown on a map in Placemark""></div><figcaption id="""">Improved rendering of small polygons</figcaption></figure><ul id=""""><li id="""">XYZ&nbsp;Layer support! You can now pull in traditional image tiles to your map.</li></ul><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627004b3f2199b012a908a61_CleanShot%202022-05-02%20at%2012.19.46%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Placemark showing an XYZ background layer""></div><figcaption id="""">Custom XYZ layers in the map</figcaption></figure><ul id=""""><li id="""">You can now edit <a href=""/documentation/ids"" id="""">Feature ID</a> data. Feature IDs are preserved when you import &amp; export KML&nbsp;and GeoJSON.</li></ul><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6270050141fc063c09e78cdf_CleanShot%202022-05-02%20at%2012.21.12%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Placemark showing Feature ID UI""></div><figcaption id="""">The new Feature ID interface</figcaption></figure><p id="""">‍</p><p id="""">That's it, folks! You might also notice many design improvements &amp;&nbsp;fixes this week. There are more to come. See you next week!</p>","Announcing XYZ layer support, faster collaboration, faster API, edit feature IDs, and better polygon rendering.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62700692b2dc2847a03cbd34_Changelog%20May%202.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62700692b2dc2847a03cbd34_Changelog%20May%202.png,true,Mon May 02 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: May 23,changelog-may-23,616750c12c0aece979319ccd,628b9777ff7f0730f1ff23b9,Mon May 23 2022 14:17:27 GMT+0000 (Coordinated Universal Time),Sat Jul 23 2022 20:30:28 GMT+0000 (Coordinated Universal Time),Sat Jul 23 2022 20:32:39 GMT+0000 (Coordinated Universal Time),"<p id="""">Welcome back to the Placemark changelog! Since <a href=""/post/changelog-may-13"" id="""">last time</a>, we've implemented plenty of features, fixes, and general improvements to make Placemark the best way to make maps.</p><p id="""">‍</p><div></div><p id="""">‍</p><h3 id="""">What's new</h3><ul id=""""><li id=""""><strong id="""">Improved </strong><a href=""/documentation/topojson"" id=""""><strong id="""">TopoJSON</strong></a><strong id=""""> support:</strong>&nbsp;each object in the TopoJSON file now becomes its own folder in Placemark. TopoJSON supports a primitive idea of grouped features, known as objects:&nbsp;for example, a TopoJSON file for the political boundaries of the United States might contain national, state, and congressional boundaries in their own groups. In the latest Placemark, these become <a href=""/post/using-folders-to-organize-your-map-data"" id="""">folders</a> when they're imported.</li><li id=""""><strong id="""">You can now convert MultiPolygons into lines.</strong>&nbsp;We've always supported a lot of different geometry operations - transforming polygons into lines, lines into points, points into convex hulls, splitting and joining features, you name it. This one completes the set.</li><li id=""""><strong id="""">You can now drag multiple features in the tree panel.</strong> The left panel in Placemark, which shows the structure of your map's features and folders, supports some more operations. You can select multiple features in the panel and drag all of them into a new position or drag them into a different folder. The same goes for other ""multi"" actions in the left panel: if you have multiple features selected in the list and you right-click, you can now delete or modify all of them with the right-click menu.</li><li id=""""><strong id="""">Drawing new features places them in the current folder.</strong> This was a much-requested feature: if you have a feature or a folder selected, and then you go to draw a new one, that new feature now ends up in the folder you'd expect - the one you previously had selected. It's hard to explain, but if you've noticed this you'll get it. Placemark is now smarter about where it puts new features.</li><li id=""""><strong id="""">Performance! </strong>Sparing the long technical write-up, the core of how Placemark handles data has been rewritten with performance in mind. You should notice this especially with large datasets:&nbsp;previously we'd have to load a lot of data every time that a small change was made, but now it's much smoother. Performance is a forever task, so this is just one step toward the goal of buttery-smooth performance always.</li><li id=""""><strong id="""">Open source updates:</strong>&nbsp;the <a href=""https://github.com/placemark/togeojson"" id="""">toGeoJSON</a>, <a href=""https://github.com/placemark/tokml"" id="""">toKML</a>, and <a href=""https://github.com/placemark/check-geojson"" id="""">check-geojson</a> JavaScript modules that we sponsor have all been updated to support Node.js's native ESM&nbsp;module system.</li></ul><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1980px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1980px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/628bad3ac2ec40f42b902026_mobile.jpeg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A Placemark map on a phone, sitting on a table""></div><figcaption id="""">Placemark on a phone!</figcaption></figure><ul id=""""><li id=""""><strong id="""">Improved mobile support.</strong> Placemark works on phones! As part of the last design pass, the layout on phones, or extremely narrow computers, has been improved so that you can edit and browse data while on the go.</li></ul><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2414px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2414px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/628b9b6e10ab8072c17348a6_CleanShot%202022-05-23%20at%2010.34.07%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Screenshot of the geospatial file format table""></div><figcaption id=""""><a href=""/format-matrix"" id="""">File format matrix</a></figcaption></figure><p id="""">Check out the new <a href=""/format-matrix"" id="""">file format matrix</a>, which pulls together a lot of information into one easy spot. It covers all of the file formats currently supported by Placemark. The idea for this came up because of the surprising diversity of geospatial formats. At one end you have something like the <a href=""/documentation/polyline"" id="""">Polyline</a> format, which can store a single line geometry only - no attributes, no styles, nothing else - and at the other you have something like <a href=""/documentation/kml"" id="""">KML</a>, which supports all geometries, hyperlinks, descriptions, styles, flight paths, you name it. Other formats, like <a href=""/documentation/gpx"" id="""">GPX</a>, are used heavily in their field, like fitness trackers, but rarely used for anything else.</p><p id="""">Bigger isn't better, though. Complex formats like KML and - we haven't implemented it yet, but GML - suffer from their complexity, and can be especially hard to use in web applications. Formats like <a href=""/documentation/geojson"" id="""">GeoJSON</a> are a great middle ground, and there are new formats trying to combine the best attributes of the existing ones.</p>","Dragging, right-clicking, importing, drawing… it's all better with a big batch of improvements!",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/628ba9c410ab8025e17391b0_CleanShot%202022-05-23%20at%2011.34.47%402x.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/628ba9c410ab8025e17391b0_CleanShot%202022-05-23%20at%2011.34.47%402x.png,true,Mon May 23 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: May 31,changelog-may-31,616750c12c0aece979319ccd,629674e4e981d9228217d08b,Tue May 31 2022 20:04:52 GMT+0000 (Coordinated Universal Time),Tue May 31 2022 20:10:53 GMT+0000 (Coordinated Universal Time),Tue May 31 2022 20:10:59 GMT+0000 (Coordinated Universal Time),"<div></div><p>This week's changelog has two headline features!</p><ul><li><strong>The table view is more user-friendly and flexible</strong>. Columns are better sized to fit their contents, cells are bigger, and you can resize columns if you want. We're aiming for this to be the best attribute editing experience in maps, and this is a step in that direction.</li></ul><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1922px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1922px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6296762b5616b0817b55f1c1_CleanShot%202022-05-31%20at%2016.09.12%402x.png"" loading=""lazy"" width=""auto"" height=""auto""></div><figcaption>This river is called - you guessed correctly - Umea</figcaption></figure><ul><li><strong>Feature labels on the map!</strong> This one was heavily requested. You can now select a property from your data that'll be shown on the map as each feature's label. This works for all the geometry types - polygons and points are labeled in their centers, lines are labeled along the line.</li></ul><p>That's it for this week, but there's lots more soon.</p>",Feature better attribute editing with the table plus labels for features on the map!,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6296754864a4c5bf4b6a9add_Changelog%20May%2031.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6296754864a4c5bf4b6a9add_Changelog%20May%2031.png,true,Tue May 31 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Changelog
Changelog: November 21,changelog-november-21,616750c12c0aece979319ccd,63769b34db029f4caa7daada,Thu Nov 17 2022 20:36:04 GMT+0000 (Coordinated Universal Time),Mon Nov 21 2022 15:17:35 GMT+0000 (Coordinated Universal Time),Mon Nov 21 2022 15:17:41 GMT+0000 (Coordinated Universal Time),"<p id="""">There's a lot of small and big improvements around here lately!</p><h3 id="""">Improved KML&nbsp;import with Schema</h3><p id="""">Placemark tries to maintain and respect the data types of everything it imports and exports. The attributes that come in a <a href=""/documentation/kml"" id="""">KML</a> file are by default strings: unlike GeoJSON, which inherits from JSON, the XML&nbsp;format that KML&nbsp;is a subset of doesn't have the idea of a ""literal number."" But KML does have a way to specify attribute types, with a Schema object.</p><p id="""">And… long story short, Placemark now supports the Schema object, so if you're importing some KML&nbsp;that's been carefully generated to declare something a number, string, or boolean attribute, that type will be imported into the map.</p><p id="""">This upgrade comes from Placemark's <a href=""https://github.com/placemark/togeojson"" id="""">toGeoJSON&nbsp;module</a>, which is open source and free for anyone to use! And specifically, thanks to a contribution by <a href=""https://github.com/perliedman"" id="""">Per Liedman</a>. Thanks!</p><h3 id="""">Better folder selection</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2498px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2498px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63769b61ce670c56378e7d28_CleanShot%202022-11-17%20at%2015.36.35%402x.png"" loading=""lazy"" id="""" width=""auto"" height=""auto""></div><figcaption id="""">Selecting all the features in a folder by clicking on the folder</figcaption></figure><p id="""">Placemark has a really powerful selection system:&nbsp;you can select a feature, vertexes within a feature, multiple features, a folder, you name it. Folder selections have been upgraded so that if you select a folder, the feature editor lets you edit all the features in that folder, including those in nested folders.</p><h3 id="""">Export to SVG using the current viewport</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2680px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2680px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63769ba018ccbf5a09282051_CleanShot%202022-11-17%20at%2015.37.31%402x.png"" loading=""lazy"" alt=""Exporting features in the current viewport"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">The fresh new SVG export system already got an upgrade:&nbsp;you can now export your current viewport’s features as SVG. Plus new projections - <a href=""https://en.wikipedia.org/wiki/Lambert_azimuthal_equal-area_projection"" id="""">Azimuthal Equal Area</a> and <a href=""https://en.wikipedia.org/wiki/Equidistant_conic_projection"" id="""">Conic Equidistant</a>. Fun!</p><h3 id="""">Search for features by their attributes</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1898px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1898px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63769aeb986017625b131b8c_CleanShot%202022-11-17%20at%2015.34.03%402x.png"" loading=""lazy"" alt=""Searching for features using their properties"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">Looking for a feature? Now the search interface - that you can trigger with <strong id="""">command-k</strong>, or by clicking on the magnifying lass - includes features! So you can search for a feature property, zoom to, and select it, really quickly.</p><h3 id="""">Improved dragging</h3><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1164px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1164px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63769c50d4563f3eac07f247_CleanShot%202022-11-17%20at%2015.40.16%402x.png"" loading=""lazy""></div></figure><p id="""">It might not look that flashy, but the experience of dragging a feature or a folder in the left pane has gone through another thorough improvements. Creating a sortable, nested list that supports other interactions, scales to thousands of items - not easy! Thanks to <a href=""https://dndkit.com/"">dndkit</a> and <a href=""https://tanstack.com/virtual/v3"">virtual</a>, the building blocks that make this possible, but whew, it is not easy.</p>",Big and little improvements to how you can make custom maps and edit geospatial data with Placemark,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/637b9596aaccb8cc35125fad_Changelog%20-%20Nov%2021.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/637b9596aaccb8cc35125fad_Changelog%20-%20Nov%2021.png,true,Mon Nov 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Changelog: September 26,changelog-september-26,616750c12c0aece979319ccd,6331f9f205abd97a04568db0,Mon Sep 26 2022 19:13:54 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:49 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<p id="""">We've been hard at work on improvements to make Placemark more useful for all your map making needs!&nbsp;Here's what's new this week:</p><h3 id="""">Sign up without a credit card!</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2049px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2049px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6331f5e364d647362fa54b87_Frame%201%20(1).png"" loading=""lazy"" id="""" width=""auto"" height=""auto"" alt=""Hand holding crossed-out credit cards""></div></figure><p id="""">Does what it says on the tin! You can now start a free trial of Placemark without providing a means of payment up front. It's still a paid product, intentionally so to make sure that <em id="""">you're the customer, not the product</em>, but if providing a card number up front has been holding you back from signing up, try it out today.</p><p id="""">‍</p><h3 id="""">Share maps as a Gist</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1136px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1136px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6331f726b304a855e7d94dcf_save-as-gist.png"" loading=""lazy"" alt=""A menu option letting someone save a map as a GitHub Gist"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">‍</p><p id="""">In addition to <a href=""https://www.placemark.io/post/sharing-maps"" id="""">the ability to share maps on Placemark</a> which we introduced recently, you can now share a map as a <a href=""https://gist.github.com/"" id="""">GitHub Gist</a>! This method of sharing was the only way to share maps using Placemark's predecessor, geojson.io, and it's now part of Placemark too, in a new, more secure, and improved form. You can connect your GitHub account to your Placemark account to get this started.</p><p id="""">‍</p><h3 id="""">Rotate features</h3><p id="""">‍</p><div id=""""></div><p id="""">‍</p><p id="""">A little while ago we introduced <a href=""https://www.placemark.io/post/moving-features"" id="""">the ability to move features</a> by holding down the Space bar and dragging. Now you can also rotate features, by holding down the Option key (or Alt, on Windows or Linux computers), and dragging! This also works with multi-selections, so you can select multiple features (with the selection lasso, by shift-drag), and rotate all of them using the Option key.</p>","Share maps as gists, rotate features, and sign up without needing a credit card!",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6331f444a7e17d668628e108_Changelog%20-%20Sept%2026.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6331f444a7e17d668628e108_Changelog%20-%20Sept%2026.png,true,Mon Sep 26 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Charting development statistics with InfluxDB,charting-placemarks-development-statistics-with-influxdb,616750c12c0aece979319ccd,6169918f25ce34f7ddf2e9ce,Fri Oct 15 2021 14:34:55 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:31:27 GMT+0000 (Coordinated Universal Time),,"<p id="""">A little while ago, I&nbsp;wrote <a href=""https://macwright.com/2021/07/05/two-wishes-for-dev-tooling.html"" id="""">an article about two wishes for dev tooling</a>, in which one of the main wishes was a way to monitor code quality in a less pass/fail sense than normal testing. What if, instead of just tracking whether <a href=""https://eslint.org/"" id="""">eslint</a> reported any severe problems with your codebase, you could also keep track of how many warnings it logged? If instead of just tracking whether tests passed or failed, you could also keep track of how long they took to run? I'm using <a href=""https://codeclimate.com/"" id="""">Code Climate</a> for some code quality measures, but I wanted a way to track arbitrary other things, just like how GitHub Actions can run arbitrary code and give you some sort of output.</p><p id="""">I finally got the kick of inspiration I&nbsp;needed reading <a href=""https://nelsonslog.wordpress.com/2021/09/23/kaiterra-laser-egg-monitor-in-telegraf/"" id="""">Nelson Minar's blog about tracking CO₂ levels with a sensor, Telegraf, InfluxDB, and Grafana</a>. Now, for my DIY&nbsp;system, I'm only going to use one of those components:&nbsp;InfluxDB.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2892px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2892px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/616990d125ce348340f2df58_CleanShot%202021-10-15%20at%2010.31.26%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""InfluxDB dashboard screenshot""></div></figure><p id="""">InfluxDB is a tool built for serious, large, complex data problems. I'm using it here for simple, unserious vanity metrics. But in my defense, these metrics are eventually useful. The example above, the size of my node_modules directory on disk, isn't really that important. Sure, it'll have some effect on how the size of the server VM, but a fraction of this code will be transferred to the client or even loaded and used - a lot of this is dead code, or non-code things in modules like long README files or tests that they forgot to exclude from the npm package. But, on the other hand, you'll run into the occasional module that's not just 100kb on disk, but 5mb, and that's an issue. Or a new dependency that makes one of Placemark's <a href=""https://placemark.io/"" id="""">geospatial data converters</a> take 5mb of data to boot up. So it's good to know.</p><p id="""">So I'm tracking a lot of these metrics right now:</p><ul id=""""><li id="""">The number of TODO&nbsp;comments in my codebase</li><li id="""">How long it takes for tests to run</li><li id="""">The size and number of JavaScript chunks created by Webpack</li><li id="""">The number of modules listed in package.json</li><li id="""">The number of warnings from eslint</li></ul><p id="""">That's just the start, though. Adding a new metric is extremely easy, and I'm still sending a relatively tiny amount of data to InfluxDB.</p><h3 id="""">How it works</h3><p id="""">This is thankfully pretty simple. I&nbsp;use <a href=""https://www.influxdata.com/influxdb-pricing/"" id="""">InfluxDB Cloud</a>, with their free, rate-limited plan for now. I might upgrade to a pay-as-you-go plan, which would be a few dollars a month to have better information retention. And then I send statistics from GitHub Actions. RIght now those stats are sent from every test run, and they aren't even segmented by branch, but Placemark uses a simple branching model - one feature branch at a time, with a stable and continuously-deployed main branch.</p><div id=""""></div><p id="""">InfluxData themselves maintain a <a href=""https://github.com/influxdata/influxdb-action"" id="""">GitHub Action</a> that'll download and install the client, and optionally, the server, for you. I store the configuration values in my repository's secrets, load them up with influx config create, and now I'm ready to start logging some data!</p><p id="""">Here's the first data point that I&nbsp;count:&nbsp;the number of TODO comments in the codebase:</p><div id=""""></div><p id="""">This is using the <a href=""https://docs.influxdata.com/influxdb/v2.0/reference/syntax/line-protocol/"" id="""">line protocol</a>, and appending each new metric to the same file. Then, at the end of the whole process, I&nbsp;just write that whole file to the database:</p><div id=""""></div><p id="""">And, voila! Data is stored in a fancy, flexible time-series database. I'd bet something similar is possible with another database, like <a href=""https://www.timescale.com/"" id="""">TimescaleDB</a>, and you could even get this kind of process going with Google Sheets as a backend. It works pretty well, and at this point is a solution that costs nothing and doesn't require any new infrastructure-building.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:3708px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""3708px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6169909c5ff830116270f2ab_CleanShot%202021-10-15%20at%2010.30.31%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""InfluxDB showing statistics about Placemark""></div><figcaption id="""">A dashboard made from the statistics I've reported from continous integration tests</figcaption></figure><p id=""""> I only have a few days of data, but already I'm starting to get a little extra satisfaction from dropping dependencies and then seeing the number go down. It's fun to know.</p>","How we use GitHub Actions and a time-series database, InfluxDB, to track vital software development metrics.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6169909c5ff830116270f2ab_CleanShot%202021-10-15%20at%2010.30.31%402x.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/616990d125ce348340f2df58_CleanShot%202021-10-15%20at%2010.31.26%402x.png,false,Fri Oct 15 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Choosing atoms,choosing-atoms,616750c12c0aece979319ccd,6167512a973f84b04a7e8452,Wed Oct 13 2021 21:35:38 GMT+0000 (Coordinated Universal Time),Sun Jul 31 2022 19:04:21 GMT+0000 (Coordinated Universal Time),Sun Jul 31 2022 19:05:12 GMT+0000 (Coordinated Universal Time),"<p id="""">Here's a technical decision I had to make recently in September, the <em id="""">big month of collaboration</em>: what are Placemark's atoms?</p><p id="""">An atom, here, is the smallest piece of information that can't be broken apart. Two tests that I use for this is: an atom is the smallest thing that has its own unique identifier, and it's the thing that occupies a row in the database.</p><h2 id="""">Text atoms</h2><p id="""">The most basic example would be text. If you were creating a text editor, the backend data structure could be as simple as a TEXT column in the database, containing all of the text for a note or blog post.</p><p id="""">But what if you're creating something like <a href=""https://www.notion.so/"" id="""">Notion</a> or <a href=""https://observablehq.com/"" id="""">Observable</a>, in which there's an idea of 'blocks' of text, like paragraphs, that you can order by dragging them around, and that have their own properties, like style in notion and programming scope in Observable? Those blocks should probably be atoms, and then the document is a list of blocks.</p><p id="""">What if you're building a collaborative text editor, and you need to handle multiple people typing in the same area at the same time, using a <a href=""https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type"" id="""">CRDT</a> to resolve changes without a central coordinator? Each <em id="""">character</em> needs an identity, in that case.</p><p id="""">The moral of the story is that you can represent the same user-facing content, a bunch of text, using either extremely coarse atoms -- a single TEXT column -- or extremely fine atoms -- every character having its own identity.</p><h2 id="""">Atomic tradeoffs</h2><p id="""">Choosing the right granularity for data storage has trickle-down effects on the whole application. And every choice has significant pros and cons. Here are some that I've been thinking about.</p><h3 id="""">Small atoms</h3><p id="""">If you give tiny bits of data their own identifiers, it's worth thinking about what identifiers are. In this case of lots of identifiers for tiny bits of data, it's very likely that you're using UUIDs, theoretically-unique, random identifiers, instead of incrementing integers, because it's likely that you're building some kind of offline-first, collaborative, or semi-distributed system.</p><p id="""">You might be generating IDs with <a href=""https://github.com/ai/nanoid"" id="""">nanoid</a> or <a href=""https://www.postgresql.org/docs/9.1/datatype-uuid.html"" id="""">Postgres's UUID type</a>, or a <a href=""https://www.ietf.org/rfc/rfc4122.txt"" id="""">rfc4122 uuid generator</a>. These all have the same basic goals: to maximize entropy, or randomness. A collision between UUIDs should be so rare that programmers can assume it'll never happen and be mostly correct.</p><p id="""">To achieve this goal, they make sure that there's enough information in the UUID - that there are lots of possible values of the UUID, which means a long string, in the case of rfc4122, or a medium-length strings with more choices of characters, for nanoid.</p><p id="""">And they ensure that they're picking evenly from all the possible values. If you had a bad source of randomness that was only choosing from the first 1/2 or 1/100 of the values, then chances of a collision skyrocket.</p><p id="""">This is all a wind-up to <a href=""https://en.wikipedia.org/wiki/Shannon%27s_source_coding_theorem"" id="""">Shannon's source coding theorem</a>:</p><p id="""">Named after Claude Shannon, the source coding theorem shows that (in the limit, as the length of a stream of independent and identically-distributed random variable (i.i.d.) data tends to infinity) it is impossible to compress the data such that the code rate (average number of bits per symbol) is less than the Shannon entropy of the source, without it being virtually certain that information will be lost.</p><p id="""">Ever wonder why the <a href=""https://www.youtube.com/watch?v=P_Oh7HizY5I"" id="""">HBO logo sequence</a> always looks like trash, even when your router is working fine? It's in part because there's a lot of static in that image, static is randomness, and the degree to which something is random is inversely proportional to how much you can compress that thing.</p><p id="""">So: IDs are actually expensive. In <a href=""https://www.placemark.io/"">Placemark</a>, I had a prototype in which every vertex of a geometry had an identity. This looked like this, in a database schema:</p><div></div><p id="""">So, the napkin math is:</p><ul id=""""><li id="""">longitude &amp; latitude: a Float <a href=""https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#float"" id="""">in Prisma</a> is a double precision in <a href=""https://www.postgresql.org/docs/9.1/datatype-numeric.html"" id="""">Postgres</a>, so these are 8 bytes each, for a total of 16 bytes.</li><li id="""">nanoid: identifiers are 21 characters, stored as TEXT (there's no advantage to varchar or char types in Postgres) means 21 bytes plus 1 byte for the length, so 22 bytes.</li></ul><p id="""">So… yeah, by making Position objects identifiable, we were suddenly storing <em id="""">more data</em> for bookkeeping than for the content itself. This happens pretty often - the automerge project has <a href=""https://github.com/automerge/automerge/issues/311"" id="""">seen similar pitfalls</a> of assigning IDs to tiny things: UUIDs are by definition not tiny and not compressible.</p><h3 id="""">Other overheads</h3><p id="""">That's just the storage overhead: there's overhead for <a href=""https://www.postgresql.org/docs/13/storage-page-layout.html"" id="""">storing lots of tiny rows</a>, and with smaller, non-consecutive blocks of data, there's less benefit of <a href=""https://gameprogrammingpatterns.com/data-locality.html"" id="""">Data Locality</a>: in the example of storing text, if you actually stored each character in the database (applications don't do this, but as an example), and reconstructed those characters into text, there's no easy guarantee that those characters are in consecutive rows, or in a distributed database, within the same shard. With coarse-grained data, this isn't really a concern: this one, or at most a few, rows in which relevant data is stored.</p><p id="""">Let's talk about data modeling, too! Let's take that Position example from before. That Position row isn't some standalone thing, it's attached to a geometry, which is a part of a map, which is contained in an organization. Modeling this relationship requires adding a chain of parentId relationships (or something similar), which adds data storage overhead, and also query overhead -- to enforce that some user setting a Position has permission to set it, you have to check that the position's geometry's map's organization is a valid one for that user.</p><p id="""">This task of connecting small atoms together into a tree structure and enforcing things about that tree structure is difficult and there aren't many out-of-the-box solutions to it. A system for connecting an 'object pool' is one of the very interesting thing from Linear.app's approach, <a href=""https://youtu.be/WxK11RsLqp4?t=2182"" id="""">described in this talk</a> by Tuomas Artman.</p><h2 id="""">Big atoms</h2><p id="""">How about the inverse - fat objects. Instead of storing characters or blocks of text, storing the whole thing. Instead of storing positions, just storing a map in one row of the database.</p><p id="""">There's no competing with the simplicity or storage-efficiency of this approach: you've got one ID, one contiguous chunk of information. But for a collaborative application, or even a lightly interactive one, there are big downsides.</p><p id="""">The first is that any sort of saving, updating, and reloading of the data is less efficient: you're loading a larger chunk from the database, sending that larger chunk to the client. If you have any sort of 'memoization' optimization in your app that can skip re-rendering when data stays the same, this will likely break that optimization. If you want to do something like 'checking off a single task in a todo list', you'll have to either send all of the items in the todo list in order to check off one, or you can have the server make that change which just moves the cost to a different place.</p><p id="""">The magnitude of potential editing conflicts also increases. If multiple people are using the text editor at the same time and simply modifying one large block of text, they'll spend most of their time confused, overwriting each other's changes. Even if you build a smart merging system on the backend, the information that system will get will be suboptimal: all it sees is that some user is now sending it a whole new document.</p><p id="""">Small atoms naturally segue into a sort of somewhat-space-efficient version control: you could do an <a href=""https://macwright.com/2021/03/05/immutable-approaches.html"" id="""">immutable log</a> of changes, storing new versions of a Position and keeping the old ones so that people can see the state of the document at different points in time. Large atoms, on the other hand, naturally lead to full copies or 'snapshots' of the document. Simple, but inefficient in many cases: it's often better to encode changes rather than full copies.</p><p id="""">Like a lot of choices in application engineering, there are advantages to each. I deferred this decision until Placemark started using <a href=""https://replicache.dev/"" id="""">replicache</a> and had to figure out how it would store maps and talk to the backend.</p><p id="""">I landed on my current approach the honest way: by doing the wrong thing first. Tiny bits of data, the <a href=""/documentation/geojson"" id="""">GeoJSON</a> objects sliced into tiny chunks with their own identifiers and database rows. The overhead and complexity jump was too much, in exchange for not enough benefit: realtime editing of the same attribute of the some feature is an edge case, not something that should dominate the whole system design. So for now, features are the atoms.</p><p id="""">That said, granularity may return because of one concern or another, because</p><p id=""""><a href=""https://www.youtube.com/watch?v=xYCV2zybQoI"" id="""">With you on the keystroke<br>And me on the gangplank<br>There's advantages to both<br>(Advantages to both!)</a></p><p id="""">‍</p>","This is one of those hard-to-pin-down engineering concepts of how to shape your data, which trickles into the whole system design.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57f3c695f40934e44d9c_Choosing%20atoms.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57f3c695f40934e44d9c_Choosing%20atoms.png,true,Wed Oct 13 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
"Code patterns, 2022",code-patterns-2022,616750c12c0aece979319ccd,635060ad6ae73156a55b9b1b,Wed Oct 19 2022 20:40:13 GMT+0000 (Coordinated Universal Time),Sat Oct 22 2022 15:24:10 GMT+0000 (Coordinated Universal Time),Sat Oct 22 2022 15:24:14 GMT+0000 (Coordinated Universal Time),"<p id="""">I'd like to think that my coding style has evolved over the years. I've had my era of functional programming worship, and of promoting small modules. Trying to use the <a href=""https://macwright.com/2012/06/04/the-module-pattern.html"" id="""">module pattern</a>, before new ES6 syntax made it unnecessary, or <a href=""https://macwright.com/2016/01/05/flow-in-mapbox-studio.html"" id="""">Flow</a>, before <a href=""https://www.typescriptlang.org/"" id="""">TypeScript</a> made it irrelevant. Software engineering on the web moves fast:&nbsp;you can either be grumpy about it, leave it for a slower-moving field, or roll with the punches.</p><p id="""">It's nothing groundbreaking, but here's where I&nbsp;land on some programming patterns now:</p><h3 id="""">Using bigger files</h3><p id="""">Placemark's design system is just one file - <strong id="""">components/elements.tsx</strong>. It's 902 lines and has 77 exports. Once a given file in this project gets over 1,000 lines, I consider splitting it into small pieces, but almost never is the length of a file, by itself, a factor in how things are distributed in the application.</p><p id="""">Big files have a bunch of benefits:</p><ul id=""""><li id="""">You can reuse import statements. If you're using a lot of types or dependencies, each component might rely on many different imports. Following a component-per-file convention means that you have a lot more code dedicated to imports in your codebase. And sure, editors can manage imports for you, but the code's still there.</li><li id="""">Less context switching when working on related code. For example, a UI&nbsp;component that relies on some specialized function to work - if the function is complex or long enough, it's tempting to put it in a separate file. But module boundaries are never that strong:&nbsp;most likely, you'll end up working on the two files at once, in tabs or an editor split pane.</li></ul><div id=""""></div><p id="""">There are few downsides to big files, in my experience. Whether your source files are small or large doesn't tend to make any difference for performance. At some point long files with lots of edits will get hidden in GitHub's Pull Request view, which is a downside. But I&nbsp;think the affects on readability and the ability to scan an application are overstated:&nbsp;code structure, naming choices, and module boundaries are what makes an application understandable or not, not file length.</p><h3 id="""">Using lodash</h3><p id="""">I&nbsp;know. It's 2022. JavaScript has its own ""Array.map"" function. But it doesn't have nearly as broad a standard library as Ruby, and after experiencing what it's like to have an array object with max, uniq, and, well, you name it - all the functions - it's hard to go back. So I&nbsp;use <a href=""https://lodash.com/"" id="""">lodash</a>.</p><p id="""">When lodash shows up in my stacktraces, I'll occasionally replace a lodash method with a hand-rolled implementation, but there are still many cases in which lodash is plenty fast and incredibly convenient. The ad-hoc implementations of methods you could get as part of lodash often have bugs, anyway: for example, the typical Stack Overflow answer for ""<a href=""https://stackoverflow.com/a/45123484/229001"" id="""">how to get the maximum item in an array</a>"" will break once you have a few hundred thousand elements.</p><h3 id="""">Using destructuring parameters for any complex method</h3><p id="""">Much like I&nbsp;don't have the patience to reimplement basic utility methods every time I&nbsp;need them, I don't see the point of remembering argument order beyond one or two. In every case, I'd prefer a method like <strong id="""">otpUrl({ secret: totpKey&nbsp;})</strong> instead of <strong id="""">otpUrl(totpKey)</strong>. I'll remember what the argument is, in this particular context, and if the method requires another 2, 3, or 8 arguments, then it'll scale nicely. So I use <a href=""https://davidwalsh.name/destructuring-function-arguments"" id="""">destructuring parameters</a> really often, generally as soon as a function needs more than one piece of data. The performance cost is minimal enough that I&nbsp;would be surprised if it ever shows up in a flamegraph.</p><h3 id="""">Prefer clarity over shortness, always</h3><p id="""">There are certain naming choices in the Placemark codebase that might shock you. A&nbsp;map is internally called a ""wrappedFeatureCollection"", and it's consistently called that, in function calls and elsewhere. A feature is a wrappedFeature that contains a feature, and likewise, those are spelled out.</p><p id="""">Abbreviations, sometimes, but never will I&nbsp;blur concepts. A JavaScript <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" id="""">Map</a> object, a layer in a map, and a map, are separate concepts so they're kept separate, even if in casual conversation I'd refer to all of them as maps.</p><h3 id="""">Be flexible with coding style</h3><p id="""">Some parts of Placemark use my fancy functional-programming types with <a href=""https://github.com/gigobyte/purify"" id="""">purify-ts</a> and higher-level functional-style programming patterns like mapping and reducing arrays instead of basic for-loop iteration. Others are written in a style that could easily be ported to C, and they're just concerned with performance. There's a place for both styles.</p><p id="""">I try to fight the instinct to specify style rules. A codebase should feel cohesive and be readable, but there are many ways to do that, most of which have more to do with how one expresses and structures code, than whether a codebase uses all <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" id="""">arrow functions</a> instead of function declarations, or it keeps imports sorted in alphabetical order. Constructing my own bureaucracy of rules wouldn't help product development.</p>",My current habits for writing the TypeScript code that makes Placemark tick,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6352e3a363bfed801c33fe67_Loading%20bar%20(1).png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6352e3a363bfed801c33fe67_Loading%20bar%20(1).png,false,Fri Oct 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Collaboration technical deep-dive,collaboration-technical-deep-dive,616750c12c0aece979319ccd,6310f94ea1c21f494597b480,Thu Sep 01 2022 18:26:22 GMT+0000 (Coordinated Universal Time),Mon Sep 05 2022 21:34:47 GMT+0000 (Coordinated Universal Time),Mon Sep 05 2022 21:35:00 GMT+0000 (Coordinated Universal Time),"<p id="""">Editing a map in Placemark is instant and collaborative. There's no ""save"" button. Changes are saved instantly. If someone else in your organization is looking at the same map, they see the changes, even as you drag a single vertex of a complex shape.</p><p id="""">This might be old-hat for web applications like Notion or Figma, but it's pretty unique for a map editor. Maps are complicated and large, and powering collaboration on geospatial data is a tricky problem. Placemark hasn't solved it completely –&nbsp;there's a lot further to go –&nbsp;but here's some information about how it all works.</p><h3 id="""">Synopsis</h3><p id="""">Placemark stores data in <a href=""https://www.postgresql.org/"" id="""">Postgres</a>, uses <a href=""https://replicache.dev/"" id="""">Replicache</a> as a client library to pull and push data to the server, and <a href=""https://github.com/pmndrs/jotai"" id="""">Jotai</a> to connect that data to React components.</p><h3 id="""">Replicache</h3><p id="""">Placemark uses <a href=""https://replicache.dev/"" id="""">Replicache</a> as a key part of a collaboration stack that also includes Postgres, Jotai, and Server-Sent Events.</p><p id="""">Here's what Replicache does in the stack:</p><ul id=""""><li id="""">Manages the main document of Placemark, the map, and the changes to that map.</li><li id="""">Handles optimistic updates - when you do something like dragging a point, you'll first see the update just as your browser <em id="""">anticipates</em> it locally, then Replicache pushes an update to the server, then it'll resolve the server's new version of that point with your local version.</li><li id="""">Handles conflict resolution, if someone else is modifying the same map at the same time.</li><li id="""">Manages an IndexedDB database on the client side that stores the latest version of the map, which can be used to speed up the initial pageload.</li></ul><p id="""">Replicache is a client, not a backend. It works with your own backend - in my case, with Placemark's Postgres datastore.</p><h3 id="""">Postgres</h3><p id="""">Postgres is our database - it stores map features, indexed by unique IDs, and using transactions in Postgres we're able to coordinate multiple people editing the same map. As this part of the application scales, it'll likely evolve to use something like <a href=""https://neon.tech/"" id="""">Neon</a> or <a href=""https://www.crunchydata.com/"" id="""">Crunchy Data</a>, or move to a two-tiered database system with a ""fast"" transactional database and a ""slow"" object store.</p><p id="""">Collaborative geospatial data is a funny thing.</p><p id="""">Collaborative applications often put read &amp; write performance at the absolute top of their lists, using something like <a href=""https://www.scylladb.com/"" id="""">Scylla</a> in Discord's case. Others use <a href=""https://redis.io/"" id="""">Redis</a> and other memory-centric databases that sacrifice structure, relations, durability, and data type richness for pure speed.</p><p id="""">On the other hand, the geospatial industry heavily uses object stores like S3 to store big, read-only data cheaply. Or they use heavily-indexed <a href=""https://postgis.net/"" id="""">PostGIS</a> tables with geospatial columns, and use the database for so much more than just querying - you can do full-fledged analysis and transformation tasks with PostGIS queries.</p><p id="""">Placemark is caught in the middle. Object stores like S3 aren't viable for its needs because of transactional, incremental, and frequent writes. Super fast and mostly scalable unstructured databases like Cloudflare K/V store or DynamoDB are too unstructured for its rather important relational connections between data and strict schema.</p><h3 id="""">Why not PostGIS?</h3><p id="""">For now, Placemark uses Postgres. Just Postgres, no PostGIS.</p><p id="""">It's been a pretty common question - why not use PostGIS? PostGIS is a great project and so ubiquitous that it's usually a surprise that Placemark doesn't use it yet.</p><p id="""">I might use PostGIS in the future, but at the present, each feature on a map is stored in a <a href=""https://www.postgresql.org/docs/9.4/datatype-json.html"" id="""">jsonb</a> column.</p><ul id=""""><li id="""">PostGIS provides a great spatial index system, but Placemark doesn't have any need for a server-side spatial index at this point. You're editing the data –&nbsp;all the data.</li><li id="""">Avoiding using all of the features of Postgres means it'll be easier to switch to either PostGIS or a different storage system in the future.</li><li id="""">Indexes are a cost - they make data changes slower and take up space. Placemark's goals include performance against changing data, which means that when any indexes <em id="""">are</em> introduced to this crucial part of the application, they'll need to be carefully benchmarked.</li><li id="""">PostGIS provides great spatial operations partially by binding to <a href=""https://www.cgal.org/"" id="""">CGAL</a>. These are super nifty! But Placemark's collaboration model and <a href=""https://www.placemark.io/post/how-placemark-implements-undo-redo-to-make-map-making-safe-and-chill"" id="""">undo/redo system</a> mean that implementing a server-side mutation like that will be a rather unique challenge – mutations within the undo/redo system will have to become more complex.</li><li id="""">One goal of Placemark is to provide a ""pristine"" representation of imported data, which can even mean things like preserving arbitrary properties attached to GeoJSON. Storing geometry data in PostGIS would change this behavior, because you're implicitly converting everything to WKB.</li></ul><p id="""">So, while PostGIS is a great addition eventually, it doesn't make as much sense in the short run. Unlike many geospatial applications, this is an editor first and it focuses more on read/write performance, raw data, and collaboration than it does on preprocessing or server-side computation.</p><h3 id="""">Jotai</h3><p id="""">Replicache provides a way to <a href=""https://doc.replicache.dev/api/interfaces/ReadTransaction"" id="""">read directly from its database</a> by scanning records. Placemark previously used this - every time that data updated, I'd scan the map's data and collect it into an array, and update the page. Unfortunately, this became a bottleneck: the larger the map grew, the longer each change would take to propagate to an updated map.</p><p id="""">To work around this bottleneck, I rearchitected Placemark's data model to store data in both Replicache's IndexedDB <em id="""">and</em> in memory, in <a href=""https://jotai.org/"" id="""">Jotai</a>. Jotai is a simple state management library for React: it provides a similar API to React's built-in setState method, but with the ability to easily access that state from any place in the application.</p><p id="""">With this change, Placemark is like a <a href=""https://www.martinfowler.com/bliki/CQRS.html"" id="""">CQRS</a> application: it uses one system to do updates and another to read data. This would be overkill in a simpler system, but it works well for Placemark's constraints.</p><p id="""">On one side, we need an efficient ""read"" data model. It can't have a lot of memory overhead, and it should be updatable rapidly. A solution like <a href=""https://immutable-js.com/"" id="""">Immutable-js</a> would add too much performance overhead in this case. So Placemark's data is structured in a way that's fast to access and scan – specifically, ordered native JavaScript Map objects. With a Map, looking up features &amp; folders by ID is very fast and there isn't a lot of bookkeeping overhead. Map is mutable, so simple changes can be made without copying or recreating all the application's data. A touch of mutability is very useful for performance, even if it's ideologically impure.</p><p id="""">And on the other side, the ""write"" data model is complex. Placemark supports operations that affect multiple features at the same time, like ""renaming a data column"", but that should be treated as one operation to work property with the <a href=""https://www.placemark.io/post/how-placemark-implements-undo-redo-to-make-map-making-safe-and-chill"" id="""">undo and redo system</a>. Bulk transactions, like deleteFeatures, are also crucial for making large data changes fast by implementing them in fast SQL in Postgres.</p><h3 id="""">Abstraction</h3><p id="""">All this complexity requires a good abstraction, otherwise any change to how Replicache or Jotai operations work would require a change to all the files in the application.</p><p id="""">Plus, when you look closely, there are three different backends for Placemark:</p><ol id=""""><li id="""">The collaborative canvas, the default for persisted maps.</li><li id="""">The scratchpad, which uses Jotai <em id="""">only</em>, doesn't persist data and only stores it in memory, and doesn't use Replicache.</li><li id="""">Shared maps, which have their initial data preloaded and then are static and not editable.</li></ol><p id="""">How can all of these work with the same codebase? Well, my approach has been to move the persistence into an object, with an interface called IPersistence:</p><div id=""""></div><p id="""">Then, each kind of page: the persisted maps page, or a public maps page, or the scratchpad, can create a persistence object and inject it into the application using a <a href=""https://reactjs.org/docs/context.html"" id="""">React context</a>:</p><div id=""""></div><p id="""">This way, a component can just get a transact method from context and call it with some operation, like updating a property or moving a feature, and it doesn't have to be concerned with how that operation is implemented or where the data is persisted. For example:</p><div id=""""></div><p id="""">This is an adapted version of some of the keybindings. This custom hook gets its persistence layer from context and gets methods to transact and control history through it:&nbsp;the component itself doesn't know whether that ""undo"" operation is part of a collaborative environment, happening only locally in React state, or is even a no-op for a non-editable map view.</p><h3 id="""">How would you do it?</h3><p id="""">Like any design, some parts of Placemark are surprisingly complex and others are surprisingly simple. Implementing complexity where it's truly needed has been a key to success, and that mainly tracks back to the key goals and data-driven approaches like benchmarking and user feedback.</p><p id="""">This architecture will definitely change as time goes on, but I hope that it's useful to share the gory details, especially because so many products are aiming for this kind of collaboration model.</p>",Gritty details on how Placemark implements collaboration.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6310f94605461a0673e167e7_Technical%20collaboration.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6310f94605461a0673e167e7_Technical%20collaboration.png,true,Thu Sep 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Components: react-aria,components-react-aria,616750c12c0aece979319ccd,616806edf18ae2e66bfef07d,Thu Oct 14 2021 10:31:09 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 21:09:48 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 21:09:58 GMT+0000 (Coordinated Universal Time),"<p>Placemark has plenty of moderately complex UI patterns that benefit from React component primitives. We’ve got dialog boxes, tooltips, popup menus, things you can drag, search boxes with autocomplete.</p><p>Building these from scratch is usually a bad idea, because you’ll implement the parts you notice, like the visual effects and experience of <em>clicking</em> around, but miss all of the things that are important for other modes of usage, like how the components interact with tab focus, keyboard shortcuts, and <a href=""https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"">ARIA</a> roles. You’ll have to solve hard problems from scratch, like how to position a popover in a way that works with <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"">z-indexes</a> of other parts of the page.</p><p>When I was <a href=""https://macwright.com/2021/02/18/a-year-of-rails.html"">working with Rails</a>, the default answer was <em>Web Components</em>. Web Components are… controversial. Folks like <a href=""https://dev.to/richharris/why-i-don-t-use-web-components-2cia"">Rich Harris have described their issues well</a>. For that project, they worked great, because we had limited expectations, stuck religiously to <a href=""https://github.com/github/github-elements"">GitHub’s battle-tested components</a>, and did a lot of server rendering. So the autocomplete results in an autocomplete UI were rendered by the server itself, rather than transferred as JSON.</p><p>Placemark is a React app, and does most of its work in the client. Web Components could fit in a few places, but there are many more complex interactive situations you trigger, many more dependencies between parts of the UI. It is, as I’ve roughly <a href=""https://blog.placemark.io/2021/05/10/blitz.html"">described before</a>, a good fit for React.</p><p>So, what do I use to get all of these little fiddly parts going?</p><p>The broad categories for React components in my head are something like this:</p><h3>One-off A+ components by individuals</h3><p>For example, <a href=""https://github.com/moroshko/react-autosuggest"">react-autosuggest</a> was the best solution for auto-suggesting search in React for years. Unfortunately, a lot of these projects are stagnating because of the well-documented problems with open source being profitable, fun, sustainable, or generally a good idea as a hobby. Also, you have to deal with different approaches for things like TypeScript types, how these components do styling, and different styles of documentation. Generally: it’s extremely impressive what folks are able to build, but it’s a nicer experience and a better long-term bet to use a unified ecosystem of components.</p><h3>Style-and-high-level component libraries</h3><p>Like <a href=""https://material-ui.com/"">Material-UI</a>, <a href=""https://ant.design/docs/react/introduce"">Ant Design</a>, and <a href=""https://chakra-ui.com/"">Chakra UI</a>. These always surprise me: the Material-UI homepage looks like what it looks like, and the library has 68,740 GitHub stars at this writing. Ant design has 72,180 stars, and is… a mixed bag. Chakra is probably the best effort out of these. I heavily suspect that this is a culture gap: Ant is based out of the mega-corp <a href=""https://en.wikipedia.org/wiki/Ant_Group"">Ant Group</a> and has lots of Chinese documentation.</p><p>Anyway: I don’t want components that are <em>that</em> high-level: these components will encapsulate complex DOM structures that you don’t really know about, adding hidden buttons and divs to support this or that design element. I want to use abstractions for efficiency, not ignorance. Also, the default styles of these libraries always diverges from what a complex application needs. Especially Material Design, a design system that thrives in low-information-density webpage displays and struggles in high-information-density applications.</p><h3>Low-level accessibility-first libraries</h3><p>This is where I land, and there are basically three big ones:</p><ol><li><a href=""https://reach.tech/"">Reach UI</a>, run by <a href=""https://reacttraining.com/team/"">the React Training team</a>, of remix.run and React Router fame</li><li><a href=""https://radix-ui.com/primitives/docs/overview/introduction"">Radix UI</a>, run by <a href=""https://www.modulz.app/"">modulz</a>, an upcoming design tool for React</li><li><a href=""https://react-spectrum.adobe.com/react-aria/index.html"">react-aria</a>, run by a team at <a href=""https://www.adobe.com/"">Adobe</a>, including the <a href=""https://github.com/devongovett"">author of the Parcel bundler</a></li></ol><p>I’ve used all of these in some portions. Radix &amp; Reach are similar in terms of abstraction: they both give you component hierarchies, polished interactivity and accessibility by default, and the ability to style things in a variety of ways.</p><p>react-aria is lower-level: instead of <em>components</em>, it gives you <em>hooks</em>. So every last element on the page is something that you’re acutely aware of, and you connect the pieces together. You’re building a design system from the ground up. The react-aria examples tend to be longer and a bit more complicated than the examples for Reach or Radix. More decisions are deferred to your application. All of the document structure is yours to decide.</p><p>These hooks are very neatly composed: higher-level hooks like <a href=""https://react-spectrum.adobe.com/react-aria/useMenu.html"">useMenu</a> are built on low-level hooks like <a href=""https://react-spectrum.adobe.com/react-aria/useFocus.html"">useFocus</a>. I find myself using a lot of both, and composing new hooks to support new functionality. react-aria’s documentation is unique in explaining not just the obvious features of each hook, but <a href=""https://react-spectrum.adobe.com/react-aria/useButton.html#features"">all of the additional input modes</a>, and often <em>why</em> the hook is useful as an abstraction or replacement for a native HTML element.</p><p>Placemark is currently using react-aria for practically everything that requires a component library. It certainly has its drawbacks. I’ve noticed things like:</p><ul><li>react-aria <a href=""https://github.com/adobe/react-spectrum/issues/1890"">doesn’t use</a> TypeScript strict mode internally, and its examples are vanilla JavaScript. Translating those examples to TypeScript, and then getting them to work with strict mode, can be a challenge, and I have a few as any type system cop-outs as a result. The library <em>does</em> use TypeScript internally, and exposes quality types, it’s just an issue with TypeScript examples, which <a href=""https://github.com/adobe/react-spectrum/issues/865"">might get added</a>.</li><li>Autocomplete search is hard with any system, and certainly not easy with react-aria. It took a lot of tweaking, and still feels iffy. That said, it’s just as hard with Reach-UI.</li><li>Composing react-aria’s hooks requires deeply understanding them. Which is to be expected: you’re building something complex, so you should tolerate a system with a learning curve. Mainly I’ve been working to compose react-aria’s menu and overlay system to support macOS-like menu bar interactions, and it’s tough. Radix’s <a href=""https://twitter.com/jjenzz/status/1400914232481390596"">menu primitives</a> are looking amazing, and might be one place where I make the switch.</li><li>In some cases, I’d like to use <a href=""https://react-spectrum.adobe.com/"">react-spectrum</a>, the high-level wrapper around react-aria, but it is stuck to Adobe’s design system and <a href=""https://github.com/adobe/react-spectrum/issues/1156"">incompatible with Next.js</a>. Looking at the React Spectrum examples causes some FOMO - they’re well-designed and have fancy transitions. My DIY components… less so.</li></ul><p>But none of these qualms outweigh react-aria’s success. It has a big idea - that with <a href=""https://reactjs.org/docs/hooks-intro.html"">React hooks</a>, you can make a successful library that adds functionality and accessibility onto any DOM structure that you provide. That idea works really well: it simplifies the virtual DOM, it sidesteps the wild-west chaos of CSS-in-JS libraries. It stems the props bloat that afflicts super-flexible component libraries.</p><p>Also, react-aria is very well-documented, and its contributor base is only <a href=""https://github.com/adobe/react-spectrum/graphs/contributors"">mildly top-heavy</a>: Adobe appears to be devoting several people’s work time to the library, over the course of several years. The future is pretty bright for this library.</p><p>I think that complicated UIs are going to be complicated to implement, no matter which tools you use. My choice of react-aria for a lot of these pieces isn’t based on it being the <em>easiest</em> option, but the idea that there’s virtually no limit to what you can do with it, and the nonfunctional aspects - its maintenance and documentation - are so strong.</p><p>This choice is, then, a result of its inputs, the requirements and future plans of Placemark. If I was building something simpler and on a tight timeline, I’d strongly consider something like Chakra. But so far, for this purpose, this is working well - I’m spending more time on features than on reimplementing a dialog box for the tenth time.</p>","Here's why we use react-aria, a React component library made by Adobe and focused on control and accessibility.",,,false,Tue Jun 08 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Dependency management in practice,dependency-management-in-practice,616750c12c0aece979319ccd,636a9bd4c9f2ad66e370e57a,Tue Nov 08 2022 18:11:32 GMT+0000 (Coordinated Universal Time),Tue Nov 08 2022 18:41:34 GMT+0000 (Coordinated Universal Time),Tue Nov 08 2022 18:41:39 GMT+0000 (Coordinated Universal Time),"<p id="""">How do you manage dependencies, over the long term, in a fairly complex JavaScript application? Placemark has its fair share of dependencies - 140 entries in <a href=""https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file"" id="""">package.json's dependencies object</a> and 860MB in the node_modules directory.</p><p id="""">I hope this post is useful to folks in the same situation. I'm not proposing a simple solution or some new technology - this is about covering some basic principles that I use day to day.</p><h3 id="""">How do you update dependencies?</h3><p id="""">The main options are to use a bot, like dependabot, or a CLI tool, like npm-check-updates.</p><p id="""">I've used <a href=""https://github.com/dependabot"" id="""">dependabot</a>, GitHub's automatic tool for dependency updates. I've also tried <a href=""https://www.mend.io/free-developer-tools/renovate/"" id="""">renovate</a>, which does a better job than dependabot. I prefer <a href=""https://github.com/raineorshine/npm-check-updates"" id="""">npm-check-updates</a>, or ncu to the bots. It's easier for me to group dependency updates into pull requests using ncu. And it has really useful options. Usually I'll run it like this:</p><div id=""""></div><p id="""">-i indicates ""interactive"" - it'll let me select which dependencies to update. -m means ""minimal"" - it will ignore updates that are already allowed by the version range in package.json. Let's talk about that.</p><h3 id="""">package.json and lock files</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1427px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1427px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/636a9dc145fbf11b5c606103_lockfile.png"" loading=""lazy"" alt=""Illustration of lock file dynamics"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">If you've used Node.js, you know about package.json, the file that specifies your dependencies. And hopefully you also know about lock files. For npm, it'll be <a href=""https://docs.npmjs.com/cli/v8/configuring-npm/package-lock-json"" id="""">package-lock.json</a>, for Yarn, it'll be yarn.lock. The package.json file specifies direct dependencies of your application and version ranges, whereas the lock file specifies all dependencies - direct and indirect - and their exact versions. If you don't use a lock file, whenever you install your dependencies or deploy your application, you'll get a slightly different result.</p><p id="""">So, it's essential to use a lock file. Which brings us to the two kinds of package updates: package.json updates and lock file updates.</p><p id="""">Let's say you have a dependency in your package.json file like lodash at ""^4.0.0"", and your lock file specifies that lodash ""4.0.0"" was installed as a result. And you want to update to lodash ""4.0.1"". One option would be to update package.json to ""^4.0.1"", but this isn't necessary: the <a href=""https://semver.org/"" id="""">semver</a> specifier ""^4.0.0"" already includes ""4.0.1"". So instead of updating package.json, you should just update the lock file, by running yarn update lodash or npm update lodash.</p><p id="""">This is why I use the -m flag with npm-check-updates: it omits package updates that you could get by just running yarn update or npm update. And it should be a lower-priority, lower-risk effort to run those commands, because typically you will have semver ranges in package.json that restrict how much those packages will be upgraded - ""^4.0.0"" won't allow lodash to be updated to ""5.0.0"". That would require a more explicit change in package.json.</p><h3 id="""">How often should you update packages?</h3><p id="""">Messing around with dependencies is best left as something for spare development cycles. If I'm heavily developing some feature, I might go months without tending to package updates. The blessing of how the <a href=""https://www.npmjs.com/"" id="""">npm</a> registry works is that old dependencies simply keep on working. Updating a dependency out of necessity is a rare thing, usually because of a legitimate security concern, or an upgrade somewhere else in the system that makes the old dependency incompatible.</p><h3 id="""">What about security advisories?</h3><p id="""">Scanning NPM modules for security vulnerabilities is a popular practice, but most of that effort is wasted. The vast majority of module vulnerabilities are not exploitable and the scanning tools do the ecosystem a disservice by failing to explain what is and isn't important.</p><p id="""">In practice, actual security vulnerabilities are an extremely high priority. For example, <a href=""https://github.com/faisalman/ua-parser-js/issues/536"" id="""">malware exploits in dependencies</a>, as was found in UAParser.js, or an exploit in <a href=""https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw"" id="""">tar creation</a>. Very bad.</p><p id="""">But vulnerability scanners collectively ""cry wolf"" and highlight bugs that can't be exploited at all. For example, take my project <a href=""https://github.com/simple-statistics/simple-statistics"" id="""">simple-statistics</a>. It has <a href=""https://github.com/simple-statistics/simple-statistics/security/dependabot"" id="""">6 security alerts from dependabot</a>, right now. Simple-statistics has <em id="""">only</em> devDependencies, no dependencies, so if someone's using the module, they aren't downloading any of the affected code. Even then, the highlighted vulnerabilities would only be relevant if untrusted input got to those functions.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1427px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1427px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/636a9ec5893404688f6e6ecc_vulnerabilities.png"" loading=""lazy"" alt=""Explanation of dependency security surface"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">There's some hope in companies like <a href=""https://socket.dev/"" id="""">socket.dev</a> delivering a better signal to noise ratio for security. Until then, it's better to take the security scanners with a big grain of salt. Unfortunately, organizations that make rules about upgrading any package at any level that has a <a href=""https://snyk.io/"" id="""">Snyk</a> advisory against it are mostly creating busywork for open source maintainers.</p><h3 id="""">Reusing what's in the lockfile</h3><p id="""">The final note that I'll make is that lockfiles are tremendously useful to read. Essentially, a lockfile shows you all of the dependencies in your node_modules directory in a flattened format. Before I add a new dependency to Placemark, I'll search the lockfile to see if there's already a module that has been included indirectly by one of my direct dependencies. Not only does it save disk space and possibly bundle size if I can reuse an existing indirect dependency by making it a direct dependency, this is also a way to rely on the wisdom of crowds in making dependency decisions. An indirect dependency of a well-established module that I'm already using is likely to be already trusted by other authors and battle-tested.</p><p id="""">A useful tool in this exercise is the why command, like yarn why or <a href=""https://github.com/amio/npm-why"" id="""">npm-why</a>. The lockfile provides a flattened representation of all the modules in node_modules, and the why command lets you pick a module and quickly understand why it's in your project, via which chain of direct to indirect dependencies it was included.</p>",A technical deep-dive into how Placemark deals with the complexity of JavaScript dependencies,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/636aa280b7ac603d2159ba32_Dependencies%20-%20Nov%207%20(1).png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/636aa280b7ac603d2159ba32_Dependencies%20-%20Nov%207%20(1).png,false,Tue Nov 08 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Engineering round up,engineering-round-up,616750c12c0aece979319ccd,6175e94da86f1b2d7ec3a4ee,Sun Oct 24 2021 23:16:29 GMT+0000 (Coordinated Universal Time),Sat Jul 23 2022 20:23:49 GMT+0000 (Coordinated Universal Time),Sat Jul 23 2022 20:28:29 GMT+0000 (Coordinated Universal Time),"<p id="""">Last week was a relatively tough week at the Placemark helm. I've found that sometimes Mercury is in retrograde, or my mood doesn't afford me the ability to laugh at my own mistakes or take a walk when something doesn't work on the first or third try. It's doing a disservice to only write about the problems I feel like I <em id="""">really nailed</em> and not the frustrations in between. So here's a little of that.</p><h4 id="""">DNS &amp; Webflow</h4><p id="""">I recently ported <a href=""/"" id="""">Placemark's marketing website</a>, and this blog, to <a href=""https://webflow.com/"" id="""">Webflow</a>. Before, the marketing site was part of the same <a href=""/post/the-application-stack-blitz"" id="""">Blitz</a> application as Placemark itself, and the Blog was a <a href=""https://jekyllrb.com/"" id="""">Jekyll</a> blog with lots in common with my <a href=""https://macwright.com/"" id="""">macwright.com</a>'s codebase.</p><p id="""">I was mostly taking <a href=""https://twitter.com/tylertringas/status/1250521285630836741"" id="""">Tyler Tringas's advice</a> on this front, but also following the metrics. Despite everything that Blitz and Next are doing for performance of static marketing sites, they're still overkill, and the old homepage had mediocre performance and SEO. And, speaking of SEO, everything in SEO is uncertain but it seems likely that hosting blog posts like this one on the same domain as the marketing site makes Google more likely to treat them as the same entity.</p><p id="""">Webflow is pretty good. The user experience isn't as polished as Figma, but I'm impressed by how well they've implemented some of the CMS-oriented concepts. And the HTML/CSS that Webflow generates is very reasonable. But the porting of everything was tricky: previously the blog was hosted at <a href=""https://www.netlify.com/"" id="""">Netlify</a> and the website at <a href=""/post/hosting-render"" id="""">Render</a>. After the swap, the application is hosted by Render at app.placemark.io, and the website is hosted by Webflow at <a href=""https://www.placemark.io/"">www.placemark.io</a>.</p><p id="""">So, I reimplemented the site in Webflow, which only took a few hours, wrote a lot of new documentation, and ported over all the blog posts. Then it was just a matter of adding a new subdomain in Cloudflare, pointing Render to that subdomain, and pointing Webflow to www.</p><p id="""">It's <em id="""">never</em> that simple, with DNS and domains. I forgot to update an environment variable in Render that let the main application know which domain it was being hosted on. I tried to proxy app.placemark.io through Cloudflare immediately, which broke Render because Render couldn't confirm that they controlled that domain.</p><h4 id="""">SQL, darned SQL</h4><p id="""">Placemark is generally using <a href=""https://www.prisma.io/"" id="""">Prisma as an ORM</a>.</p><p id="""">I have mixed feelings about this. Not quite about Prisma - Prisma is a high-quality project with an active and intelligent team of developers behind it. But about using an ORM.</p><p id="""">I think that development moved quickly away from ORMs after <a href=""https://rubyonrails.org/"" id="""">Ruby on Rails</a> started yielding room for Node.js, and then Go and other more modular, performance-oriented tools. This was in part because Ruby on Rails's ActiveRecord can be abused, easily. You can create truly baffling SQL queries by using ActiveRecord without regard to the database underneath.</p><p id="""">But it's also because of performance. The absolute best performance that an ORM can offer is no greater than a hand-written query. And very often, ORMs produce lower-quality queries than handwriting.</p><p id="""">I hadn't written much SQL at all until I worked at <a href=""https://observablehq.com/"" id="""">Observable</a>, but there I learned the value of really, really understanding Postgres. Database queries are one of the few things in the web stack that you can reliably guess will be a performance bottleneck and be correct in that assumption. Applications spend <em id="""">a lot</em> of time in the database layer, regardless of what particular database they're using.</p><p id="""">So I spent a few years learning how to do more and more with a single query. There are some queries in the Observable codebase that might still remain which will really open your third eye, so to speak. We used <a href=""https://www.postgresql.org/docs/9.1/queries-with.html"" id="""">CTEs</a> and recursive subqueries and all kinds of magic to produce succinct, thoroughly performant little gems of database magic. And bugs, of course.</p><p id="""">Anyway, there is a part of Placemark in which querying and updating the database is the main thing I'm doing, and in which performance of those queries is absolutely central - the collaboration loop. This is the <a href=""https://doc.replicache.dev/guide/remote-mutations"" id="""">Replicache push endpoint</a>. It matters, a tremendous amount, and relies on some fairly sophisticated assumptions about the database layer. It relies heavily on database transactions and a reliable, monotonic, mutex-like counter.</p><p id="""">This is where last week was tough: I've been using Prisma's support for transactions, which is unfortunately a bit fringe. Prisma really would prefer that you <a href=""https://www.prisma.io/blog/how-prisma-supports-transactions-x45s1d5l0ww1"" id="""">implement transactions in your application</a>, but that doesn't quite work for most of the problems I'm tackling. And I ran into a mysterious issue, most likely in Prisma, related to upserting in a transaction, that led to the CPU spinning and the application giving up on future requests. It was frustrating. The leaves are falling in Brooklyn, so it's a good time to go on walks, which I did.</p><h4 id="""">Next up</h4><p id="""">On the bright side, I've shipped a few important things and am planning some more.</p><p id="""">I implemented client-side undo/redo, using unidirectional, mutable undo objects. This was a stark departure from the undo systems I've worked on in the past that had <a href=""https://macwright.com/2021/03/05/immutable-approaches.html"" id="""">immutability</a> as a core assumption. I'll probably write about this soon, though it's very similar (and directly inspired by) <a href=""https://www.figma.com/blog/how-figmas-multiplayer-technology-works/#implementing-undo"" id="""">Figma's undo system</a></p><p id="""">The <a href=""https://twitter.com/placemarkio/status/1450120324226420738"" id="""">multi-feature-selection</a> state now lets you edit properties of multiple features at once. This pattern has been around for ages in Adobe Illustrator, and more recently in Mapbox Studio and Figma, and I always wanted to implement it. Feels good!</p><p id="""">Quite a few different things are vying for the next slot on the <em id="""">implementation conveyor belt</em>, but the most likely is <em id="""">presence</em> and to give more life to the existing multi-player editing. Placemark is in a similar place to Observable at some point in 2020 - multi-player is now deeply embedded in its programming model, but not exposed in many UI elements. And the other thing is a server-side store of versions - another thing that will partly emerge naturally from the principles of the programming model I've set out, but there's a lot of tradeoffs I need to balance for the implementation.</p><p id="""">‍</p>","From DNS to SQL to design, here's what's been changing with the Placemark map editor.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb5dab7784b73cc77648a2_Development%20round-up.png,true,Mon Oct 25 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Engineering round up: Optimization,engineering-round-up-optimization,616750c12c0aece979319ccd,6247032cd5d947a3a887e07c,Fri Apr 01 2022 13:50:36 GMT+0000 (Coordinated Universal Time),Fri Apr 01 2022 13:50:36 GMT+0000 (Coordinated Universal Time),Fri Apr 01 2022 13:50:45 GMT+0000 (Coordinated Universal Time),"<p>Placemark should be fast. It's not easy making a complex application like Placemark fast. For one thing, as a tool for maps, Placemark gives you access to all the data, so we can't simply show a subset. As an editor, the application supports quickly-changing data, so we can't just add layers of caching. And as a web application, we have to balance accessibility, local performance, load performance, and many other factors. Performance is a very complex topic.</p><p>The principles of performance work are so well described by the <a href=""https://carlos.bueno.org/optimization/"">Mature Optimization Handbook</a> that there's no sense in restating them here. Instead, I think it might be fun to just review what sort of performance work has been happening at Placemark.</p><h3>React</h3><p>This is a good place to start because I think a lot of people will expect this post to be about React. For benchmarks like rendering a million rows in an HTML table, React is slower than next-generation tools like Svelte. Its virtual DOM has higher overhead than some of the alternatives. The React bundle is larger than the alternatives.</p><p>React hasn't been a major focus of any of my performance work. One of my principles is that I follow the metrics. I switch on the Chrome performance profiling tools and use the site and see what I can learn. React certainly shows up, but rarely has it been the thing causing me to drop frames when I'm dragging a point geometry across the map.</p><p>This is partly because of the choices I've made. Wherever any user-provided data is shown in the user interface, I'm using virtualization - <a href=""https://react-virtual.tanstack.com/"">react-virtual</a>, in particular, right now. So when Placemark shows a list of features and folders, I use react-virtual to only render the items that are currently visible. For very small datasets, this adds a little overhead: there's no problem rendering 10 items in a list. But for 20,000 items in a list, virtualization makes a difference. Not only is the generated DOM smaller with fewer elements, React has less to do: it isn't rendering all of those items and supporting whatever interactivity the offscreen items might have.</p><p>Where do performance hotspots show up? I let the Chrome profiler lead me.</p><h3>Communication</h3><p>One trend is <em>communication</em>. Placemark communicates with a server through RPC and REST APIs. Transmitting and receiving too much is a common problem. A habit that I've stuck to with Placemark is that most calls, by default, should be batches. Implementing a putFeature endpoint? Instead, implement putFeatures. The same for delete, update, and everything else. The semantics of batch calls are trickier, but on the other hand, you can take advantage of batching across the stack: send fewer requests, do fewer database queries, receive fewer updates.</p><p>Communication applies to other boundaries, too. The collaboration piece of Placemark relies on IndexedDB. Reading from IndexedDB is pretty fast, but not nearly as fast as accessing a value already available in JavaScript. So I spend some time making sure that queries to the <em>local</em> database are frugal. The map interface uses Mapbox GL, which processes data in a WebWorker. So a major aim is to send as little data to the WebWorker as possible, because while <a href=""https://surma.dev/things/is-postmessage-slow/"">postMessage performance depends</a>, in this case it is an issue.</p><h3>The database</h3><p>Optimizing at the database level is extremely worth it. The difference between good schema design and bad can be enormous. Between a well-tuned SQL query and a bunch of poorly-implemented ones - easily magnitudes.</p><p>Sure, it's nice that there are frameworks like <a href=""https://github.com/fastify/fastify"">fastify</a> and you can build backends in Rust or Go or some fast new language. But in a lot of applications, the server framework overhead pales in comparison to time spent in the database. Who really cares if a server framework can deliver 10,000 ""Hello world"" responses per second if your real-world application relies on queries that take 500ms each, plus latency?</p><p>Placemark has two database strategies. The basic interface uses the ergonomic &amp; safe <a href=""https://www.prisma.io/"">Prisma</a> toolkit. The performance-critical, map-collaboration-related functions drop down to hand-rolled SQL queries. Someday I hope that Prisma or something similar can generate efficient queries, so the whole system can use the same thing.</p><h3>Dependencies</h3><p>Quite a few bottlenecks in Placemark are bottlenecks in its dependencies. When this happens, I tend to ignore that these things are ""third-party dependencies"" and just follow them to the source. So when my favorite data-validation module, <a href=""https://github.com/colinhacks/zod"">Zod</a>, was showing up in profiles, I decided to optimize it and ended up with a respectable <a href=""https://observablehq.com/@tmcw/zod-perf-by-versions"">3-4x speedup</a>. The same goes for other modules – a seemingly inconsequential method in <a href=""https://github.com/clauderic/dnd-kit/pull/685"">dnd-kit</a>, the module I use for sortable views, was showing up in profiles. I submitted a simple PR that'll speed it up by about 15x.</p><p>Some modules get swapped for more performant alternatives. But in many cases, optimizations in modules are the same as optimizations in my application: there's some 20-30 line change that removes a bottleneck and makes them at lot faster. It's worthwhile to try and that.</p><h3>Principles</h3><p>I swear by the principles of the <a href=""https://carlos.bueno.org/optimization/"">Mature Optimization Handbook</a> - the performance work I do is guided by metrics, not intuition. I try to focus on only true bottlenecks. The best optimizations are the ones that yield a lot of improvement for a little code change.</p><p>Performance work will just keep going. Maps involve a lot of data, and it's hard to make that fast. There are a few hard-hitting optimizations that I'm excited for, that'll require a lot of time, tears, and coffee. The other goal for the near future is to have more visibility into layers of the stack - going deeper into React's <a href=""https://reactjs.org/blog/2019/08/15/new-react-devtools.html"">devtools</a>, pulling more information from the database layer, analyzing performance at the CSS &amp; HTML compositing layer. A better understanding always yields better results.</p>","How we make Placemark faster, so you can make maps faster.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/624703090399aa077812ee7e_Engineering%20round%20up_%20Optimization.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/624703090399aa077812ee7e_Engineering%20round%20up_%20Optimization.png,true,Fri Apr 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Escaping engineering FOMO,escaping-engineering-fomo,616750c12c0aece979319ccd,617daffa61b42bc9dd88f145,Sat Oct 30 2021 20:50:02 GMT+0000 (Coordinated Universal Time),Wed Dec 22 2021 19:34:07 GMT+0000 (Coordinated Universal Time),Wed Dec 22 2021 19:36:46 GMT+0000 (Coordinated Universal Time),"<p>Sometimes I feel a little odd that I'm building another React-based website, despite writing about how <a href=""https://macwright.com/2020/05/10/spa-fatigue.html"">React isn't always the best option for websites</a>. Or I look at <a href=""https://svelte.dev/"">Svelte</a>'s claims to being faster than React and think to myself: they're right. Or look at the projects that are building on WebAssembly, like Figma, and think, yes, that's faster than JavaScript. What about using Web Components - using the platform?</p><p>Some of Placemark's component technologies are suboptimal, from a performance standpoint. A desktop application would have more direct access to computing power. Maybe something written in Rust, with zero-copy formats. Or if it has to be a web application, all of the computation should be in a WebWorker running Rust compiled to WebAssembly, with a UI layer composed by Svelte or something like it.</p><p>But when I feel this energy, I remember a few things.</p><ol><li>Trust the profiler.</li><li>I'm building in the present.</li><li>I'm part of the program.</li><li>Finished is better than perfect.</li></ol><p>Let me explain.</p><h3>Trust the profiler</h3><p>Here's <a href=""https://krausest.github.io/js-framework-benchmark/2021/table_chrome_95.0.4638.54.html#772"">a benchmark that React fails</a>. It's for manipulating the DOM - creating and updating rows in a table. React is solidly behind the leader (vanilla JavaScript) by a factor of 70-100 in some cases. And have you seen React's bundle size - well over 100kb. You could slim that down dramatically with Preact or Svelte or Solid or Vue.</p><p>But when I run the profiler in Chrome to figure out where <em>my</em> application is spending time, where those CPU&nbsp;cycles are going when people are editing GeoJSON or modifying geometries, is that time spent in React's DOM reconciliation? When I use the webpack <a href=""https://github.com/webpack-contrib/webpack-bundle-analyzer"">bundle analyzer</a>, is React the biggest thing there, or even one of the top dependencies?</p><p>There are applications in which React really might be the performance bottleneck - maybe a game with a 60fps run loop in which most elements change, and there isn't much else happening. And situations where React might dominate the bundle, too - if you're loading all of React just to do a drop-down or some interactive element on a page.</p><p>But in Placemark's case, well - time is spent elsewhere. Bytes are spent elsewhere. I could swap the web framework - at relatively high cost - to save 5 or 10%, because it's only taking up 10 or 15% in the first place. You might read that and say but Tom, <em>that means your application is too large</em>. It's medium, maybe large. But it <em>does stuff</em>. It's not a shopping cart or a blog. The code that's there - that code is there to do stuff.</p><p>Where <em>does</em> it spend time? Right now, doing things like syncing state in realtime, processing data to power the map, running validation and conversion algorithms, managing complex UI state. The optimizations I prioritize are the ones that show up in the profiler - things like balancing unnecessary data copies with the value of immutability. Or trying to reduce memory thrashing creating derived data. Fun stuff.</p><h3>I'm building in the present</h3><p>One of the things I realized, struggling to make <a href=""https://www.rust-lang.org/"">Rust</a> work at a startup last year, was that everything will be good in the future. In a few years, new technologies will be old, their libraries and web frameworks will be mature. But that doesn't change the fact that bleeding-edge technology will cut you.</p><p>At the same company, after transitioning to <a href=""https://rubyonrails.org/"">Ruby on Rails</a>, we were building some more complex frontend logic and tried out <a href=""https://svelte.dev/"">Svelte</a>. We had institutional knowledge with TypeScript, and were already using TypeScript for the rest of the frontend, so we needed Svelte to work in that ecosystem. It didn't. Sure, there was a nod to TypeScript support, but the ecosystem that supported Svelte's syntax - like eslint - didn't support <em>both</em> Svelte syntax and TypeScript syntax at the same time.</p><p>This year, late 2021, I think that's solved! The Svelte team moves fast. But last year, it wasn't. And there wasn't any sense in using tools that didn't fit our needs because they would be <em>eventually</em> viable. This was a dramatically early-stage startup. A year in the future we could have a viable product, or be hiring rapidly with another round of funding, or be defunct.</p><p>Another example: debugging WebAssembly in Chrome reached some state of maturity in <a href=""https://developer.chrome.com/blog/wasm-debugging-2020/"">December 2020</a>. Hooray! This also means that, from 2017, when WebAssembly gained support in modern browsers, to the end of 2020, debugging WebAssembly was relatively torturous. Of course you could make it work, and people did, by investing enormous amounts of energy into understanding a bleeding-edge piece of technology and building their own tooling around it. But if you were in 2018 trying to just pick up the technology and make things work, you were in for some surprises.</p><h3>I'm part of the program</h3><p>Things reflect the people who make them. Not just our abilities, but our tendencies, our limitations. They're all in there. You can't look at <a href=""https://en.wikipedia.org/wiki/James_Hampton_(artist)"">Throne of the Third Heaven of the Nations' Millennium General Assembly</a> and see influences of James Hampton's life, the materials he had access to, and his mind.</p><p>Whether I like it or not, there are tools that I have experience with, and restrictions on my time and energy. Placemark isn't a death march of 20-hour work days. I'm trying to work reasonable hours, to make a reasonable, profitable company with a product that people pay for, and that I can maintain.</p><p>I've seen a process repeat several times in which an organization wants to use something fancy, like Kubernetes or some big data tool, and so they try it themselves, fail for a while, then hire a contractor or a siloed employee who implements the thing. Predictably, at the end of the process everyone is left with a big, scary, unknown piece of their company. They didn't have the capacity or interest to actually employ it before, and they still don't.</p><h4>Finished is better than perfect</h4><p>Do I need to explain this one? Sure, well - if you're building a product with novel functionality, then whatever your simple MVP is, it's going to be hard. The version with a few more features, that's really complicated. The actual full product? Super difficult. Nothing <em>just works</em>. Once you add more than one thing, the two things need to work together. Oh no - three things? Just knowing the term <a href=""https://en.wikipedia.org/wiki/Cross-cutting_concern"">cross-cutting concerns</a> is enough to justify pushing that next milestone by a few weeks.</p><p>Anyway - actually finishing anything is hard. Don't make it harder. Finish the thing.</p><p><br></p><p>‍</p>",How to stop worrying about using the fastest web framework and just ship the thing.,,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb61c5fbcc74d1506e3c66_Escaping%20engineering%20fomo.png,true,Mon Nov 01 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Announcing Folders,folders,616750c12c0aece979319ccd,63a22d5a41bfdb6c0235983e,Tue Dec 20 2022 21:47:06 GMT+0000 (Coordinated Universal Time),Wed Dec 21 2022 15:59:51 GMT+0000 (Coordinated Universal Time),Wed Dec 21 2022 16:00:00 GMT+0000 (Coordinated Universal Time),"<p id="""">You can now organize your maps into folder structures to make Placemark an even better home for your always-changing geospatial data!</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1954px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1954px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63a22aa1ac033a3c1c1d022f_folder-example-popover.png"" loading=""lazy"" alt=""Adding a folder from the Placemark maps index"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">‍</p><p id="""">Plus, you can nest folders inside of each other for full-blown directory structures:</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1414px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1414px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63a22b1c81250d1662fa8cbe_CleanShot%202022-12-20%20at%2016.37.05%402x.png"" loading=""lazy"" alt="" Folder structure with nesting"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">‍</p><p id="""">To make it easier to navigate folders, find maps, and generally use Placemark, we've extended the search UI (which <a href=""/post/changelog-november-21"" id="""">was recently improved in the map view!</a>) to work with the main page too! Just hit <strong id="""">Command+k</strong> or click the Magnifying glass icon at the top of the map listing to activate it:</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1852px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1852px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63a22bb18c341e1bfb58a1f7_home-search.png"" loading=""lazy"" alt=""Map search UI"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">‍</p><p id="""">So all together - folders can be nested, you can drag maps into them, or drag a map or folder onto the breadcrumbs to move it up a level.</p><div id=""""></div><p id="""">‍</p><p>You can also toggle a folder tree and see a nested list of folders. A bunch of behaviors now integrate with folders:&nbsp;navigating back from a map that's in a folder will go back to that folder view rather than the home page. Deleting a folder will delete the maps inside of it. Combining maps will place the new, combined map inside of the source maps’s folder.</p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1896px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1896px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63a32d1963703a27bc740331_folder-tree.png"" loading=""lazy"" alt=""Folder tree view""></div></figure><p>‍</p><p id="""">We think this is pretty cool - and thanks to the community for suggesting this feature!</p>",Organize your map data into nested folders,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63a22d4b8c341ed44658d2b5_Folders.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63a22d4b8c341ed44658d2b5_Folders.png,true,Wed Dec 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
GitHub issues-only project management,github-issues-only-project-management,616750c12c0aece979319ccd,616806b5b2c6469b79532b2b,Thu Oct 14 2021 10:30:13 GMT+0000 (Coordinated Universal Time),Sun Jul 31 2022 19:04:32 GMT+0000 (Coordinated Universal Time),Sun Jul 31 2022 19:05:12 GMT+0000 (Coordinated Universal Time),"<p id="""">A few of my friends ended up as project managers and they’ve learned that everything should be a Trello board. Before you start a project, brainstorm in a Trello board. Plan that wedding: Trello. And, of course, software development projects: Trello is the answer.</p><p id="""">The tools that we use end up shaping how we think, and taking over more and more different purposes in our lives. So some folks manage <em id="""">everything</em> in Microsoft Excel or the macOS “Sticky Notes” app that somehow still exists in 2021.</p><p id="""">Because Trello, JIRA, and other visual and somewhat abstract solutions dominate the space of tech project planning and management, I think it’s worthwhile to lay out an alternative, which is my default: <em id="""">just use </em><a href=""https://github.com/features/issues/"" id=""""><em id="""">GitHub issues</em></a><em id=""""> for everything</em>.</p><p id="""">Some background is useful here: I started my career at <a href=""https://developmentseed.org/"" id="""">Development Seed</a>, and was part of the team that spun out and became <a href=""https://www.mapbox.com/"" id="""">Mapbox</a>. And back in the day, <em id="""">everything</em> was GitHub issues.</p><ul id=""""><li id="""">The company internal blog was an issue-only repository. Blog posts were issues, you’d comment on them with comments on issues.</li><li id="""">Sales deals were tracked with issue threads.</li><li id="""">Recruiting was in issues - an issue per candidate.</li><li id="""">All internal project planning was tracked in issues.</li></ul><p id="""">Now this has obvious drawbacks: you couldn’t delete issues until recently, and wiping the history for sensitive information was hard, and requiring everyone to learn Markdown was controversial.</p><p id="""">But it was blissfully effective in other ways. GitHub issues make it harder for you to procrastinate and pretend. The lack of style control, the inability to create complicated document structures, means that it’s much harder to dress up nonsense as sense.</p><p id="""">Building things is chaotic and difficult at the core, and so all forms of planning and management are forms of interpretation, estimation, and storytelling. In the short times I’ve used fancier project management tools, that storytelling threatened to replace reality.</p><p id="""">We’d look at the burn-down chart of remaining issues, find the y-intercept, and believe in it. Or gaze upon hundreds of issues and spend weeks organizing them into little bins, perfectly categorized, then have the same quantity of work ahead of us.</p><p id="""">In their ideal form, GitHub issues are homogenous. An issue is a task that you need to complete. If it isn’t a task, it isn’t an issue. If it’s done, it’s closed. If it’s not done, it’s open.</p><p id="""">A perfect issue is small enough to be closed by a single Pull Request. If it’s too big for that and you find yourself adding checklists to it, strongly consider creating multiple issues.</p><p id="""">Judicious use of milestones and labels let you associate issues in chronological and categorical groups, respectively. Using labels for time-bound tasks or milestones for categories will break the system: don’t do that. I wrote a <a href=""https://github.com/tmcw/github-best-practices#issues--milestones"" id="""">little guide about that</a>.</p><p id="""">GitHub Issues are a perfect unfancy tool. Fill them with thoughtful writing and use them judiciously and they can create just-enough structure to keep track of what needs to be done, without getting lost in the work-about-work that dominates a lot of project planning. They’re not perfect for thousand-person teams, but the tools that big teams use aren’t well-suited for fast-moving indie projects either. So far ‘just issues’ is working great for <a href=""https://www.placemark.io/"">Placemark</a>.</p>","My thoughts on why project management applications are often overkill, and using simple tools forces you to adopt more efficient practices as a small team.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb5dbda8d73bd4627673a3_Github%20issues-only%20project%20management.png,true,Mon Jul 19 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Good magic with TypeScript,good-magic-with-typescript,616750c12c0aece979319ccd,617c0c32f14562a4f6c51634,Fri Oct 29 2021 14:58:58 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 19:26:24 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 19:28:43 GMT+0000 (Coordinated Universal Time),"<p>Placemark uses <a href=""https://www.typescriptlang.org/"">TypeScript</a>, the typed layer on top of JavaScript. It doesn't catch all the bugs, but it helps. And certain modules written with TypeScript have really brought some joy into my heart. Here are some of them.</p><h4>Zod: parse data into typed structures</h4><p>Whenever I wrote Elm or Rust code, I'd be jealous of modules like <a href=""https://serde.rs/#data-structures"">serde</a> or <a href=""https://package.elm-lang.org/packages/elm/json/latest/"">elm/json</a>, because they'd let you define the data structure you want first, and then parse JSON or some external source into that structure. If the source didn't fit the data structure, it would be rejected. But if the data has the right fields and types, you get typed data in your application.</p><p><a href=""https://github.com/colinhacks/zod"">Zod</a> brings the same magic to TypeScript. It lets you validate data in runtime, and then gives that data strict types in the static type system. I've found Zod to be enormously helpful across the board - from parsing query strings to enforcing API endpoint rules, to validating any JSON data that will enter the database.</p><div></div><p>Zod is fast enough that I can use it in most cases without worry, but unlike Serde in Rust, it's an additional step rather than part of serialization &amp; deserialization, and it has a little performance overhead. So in exceptionally hot loops it'll sometimes appear in Chrome's flamegraph. But most of the time, it's plenty fast and very worthwhile for the peace of mind and the low-effort type safety.</p><h4>envsafe: require environment variables at startup</h4><p>Environment variables have always been an annoyance of mine. There'd be some large system with lots of files, and inside of lib/service/extra/util.ts, a line like this:</p><div></div><p>And inevitably, the system would successfully launch and it would run happily for a few minutes or hours until finally someone triggered that code, process.env.FANCY_API_ORIGIN would be undefined, and the system would go down.</p><p>Crashing after a successful launch is much worse than crashing at startup. Preventing bugs at the test or lint level is best, preventing bugs by crashing at startup is second best, having a bug occur after startup is worst.</p><p><a href=""https://github.com/KATT/envsafe"">envsafe</a> is a module that validates the existence of those environment variables right when the server is starting, and then produces an object with <em>only</em> those exact variables.</p><div></div><p>So if you mistype and reference env.STRIPE_API_KEY instead of env.STRIPE_SECRET_KEY, TypeScript will fail your tests. If you deploy without STRIPE_SECRET_KEY, the server will crash and – assuming that you're using a deployment strategy that notices when a server crashes on startup – you'll get notified and the failing server will be removed.</p><h4>ts-pattern</h4><p><a href=""https://github.com/gvergnaud/ts-pattern"">ts-pattern</a> is a module that resolves three of my main issues with TypeScript: patterns, exhaustiveness, type narrowing. Exhaustiveness could be something like this:</p><div></div><p>Now, you could force TypeScript to check the exhaustiveness of this method by adding : string as a return type. But what if the switch statement is part of a larger method? It's easy for this kind of bug to sneak into your code.</p><p>Then there are patterns. These are so darn lovely in other languages. Here's an <a href=""https://guide.elm-lang.org/types/pattern_matching.html"">example from Elm</a>:</p><div></div><p>I really enjoy this syntax. Syntaxes and language features are often just valuable because they fit with the way your mind already works, and this one fits really nicely - I don't want to use a switch statement or if/else, I want to handle the kind of object that matches a certain pattern. There's a <a href=""https://kyleshevlin.com/pattern-matching/"">proposal to add pattern matching</a> to JavaScript, but it's pretty stalled.</p><p>The other thing is <a href=""https://www.typescriptlang.org/docs/handbook/2/narrowing.html"">type narrowing</a>. I'd sometimes find myself in situations where I'd be enforce that, say, a feature had a Point geometry, but the language wouldn't refine the types involved. <em>Usually</em> type narrowing works great, but sometime it's a real pain.</p><p>ts-pattern deals with all of these problems at the same time, and deals with them really nicely. Using it, you can almost believe that you're using a language with pattern matching. From an example in their documentation:</p><div></div><h4>type-fest</h4><p><a href=""https://github.com/sindresorhus/type-fest"">type-fest</a> is probably really well known, but it was new to me.</p><p>The Opaque type has been nifty because it lets you wrap a 'primitive value' in a type that can't be assigned to that value. For example, Placemark relies heavily on different systems of identifiers, some of which are strings, and others are numbers. The raw number identifiers I have defined as this:</p><div></div><p>So this creates a kind of number that isn't assignable to a number. This basically makes working with RawIds a little more annoying for me, but on the other hand ensures that I never accidentally turn a RawId into a string or treat it as a generic number, and wherever they go the type signature of methods that deal with ids specify that they want RawIds, not just numbers. And this is purely a matter of the type system - at runtime, they're just numbers.</p><p>Using type-fest's PromiseValue helper also lets me do this:</p><div></div><p>So instead of explicitly having to create a type for a function's return value, I can just get the inferred return value. Nifty.</p>",Some of our favorite open source modules that perfectly work with TypeScript and make our lives happier.,,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57ff8bd2704c6628adcb_Good%20magic%20with%20TypeScript.png,true,Fri Oct 29 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Hosting: Render,hosting-render,616750c12c0aece979319ccd,6168070ae33643d76aa7d454,Thu Oct 14 2021 10:31:38 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 21:09:42 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 21:09:58 GMT+0000 (Coordinated Universal Time),"<p>Placemark is using <a href=""https://render.com/"">Render</a> for hosting. But to start with - in the tradition of <a href=""https://blog.placemark.io/2021/05/06/stack-thinking.html"">stack thinking</a>, it’s best to talk about the right <em>kind</em> of hosting to use.</p><p>As I’ve <a href=""https://twitter.com/tmcw/status/1389990393744445440"">joked about</a>, I picture there being three eras and kinds of web hosting.</p><p>The first is “VPS” style hosting: you pay for a Linux computer in a datacenter, you can SSH and FTP into it, and other people might be using the same computer. Slicehost was a good example of this, or DreamHost back in the day. You get backups of the computer, maybe, but essentially it’s a computer like your laptop: you manually set it up, configure things, and hope that it never crashes or disappears. Hopefully you wrote down what you did. If you want to update your code, you SSH into the computer and load new code onto it.</p><p>The second is “Heroku” style hosting. Instead of a particular computer that you keep using, you treat computers as ephemeral. You follow the <a href=""https://12factor.net/"">12 factor app</a> commandments to make all of the configuration repeatable and contained in predictable units. <a href=""https://www.heroku.com/"">Heroku</a> pushed this idea really quickly, turning the clock forward on web development in general.</p><p>The third is “AWS” style hosting. Google Cloud, Azure, etc are all basically following that template. Like Heroku-style hosting, you encapsulate your configuration. But instead of deploying a Rails app or Node.js or something else, you might be deploying a multi-billion dollar company’s infrastructure, so you can’t make many assumptions about anything. So the level of abstraction is much, much lower: instead of a Dyno running some mostly-configured Linux distribution, every little knob and dial is exposed. The networking is all yours to customize. With Docker, you don’t need to follow 12factor at all - just write a shell script that sets up some very particular system, and clone it to your heart’s content.</p><p>AWS style hosting is the industry standard right now. Most startups are doing it. AWS offers higher-level wrappers of varying quality to replicate parts of the Heroku-like experience. Investors love to know that you’re using one of the four main cloud platforms, so risk is minimized. You can get a few thousand dollars of AWS or GCP credits in many different ways. And the scalability is near-infinite: you have to be at the scale of <a href=""https://www.wired.com/2016/03/epic-story-dropboxs-exodus-amazon-cloud-empire/"">Dropbox</a> for AWS to stop making sense.</p><p>I think many of these startups are making a mistake. That is not to say that there are no benefits of an AWS or GCP stack using Kubernetes and all of the latest technology. But that, especially in the first few years of a startup’s existence, and especially for startups with less intense server needs, the unavoidable complexity of low-level cloud platforms is a net negative for growth and productivity.</p><p>There are absolutely startups that will have intense server needs even at the earliest stages. If you’re building a continuous integration service or some advanced, high-performance API business, then, absolutely - go forth. What Mapbox does, for example, fits the flexibility and power of AWS. But Observable ran great on Heroku for at least the first few years of its existence (I don’t know if they’ve switched, it seems likely, eventually). And my most recent experience, trying to build on Kubernetes/GCP with a small team, quickly unveiled the massive downsides of that approach. Working with Lambda and the AWS stack for other projects has been an ongoing pain. People say that I should use a higher level of abstraction - which isn’t clear, one of the 5 different CloudFormation-like configuration abstractions or one of the serverless.com/up-like service abstractions, I’m not sure. I just don’t think it’s the right tool for most jobs.</p><p>Placemark is not, initially, going to be a server-intensive application. It’s not an API as a service. It’s not a big data processing platform. There might be a few components where speed is important, but that will be mostly speed-as-in-latency rather than speed-as-in-throughput.</p><h3>I just don’t like devops</h3><p>And, personally – all of these decisions are personal at some level – I don’t like devops. I like a lot of things, as any <a href=""https://macwright.com/"">reader of macwright.com</a> might notice. And I’ve learned to like a lot of things after working on them for a while. I do not like devops, in the same way I do not like tinkering with my computer’s configuration all that much. The computer is a tool to do things, not an end in itself. I don’t see any novelty in setting up the millionth Node.js server on the internet in a new and interesting way. Customers probably won’t notice. My homespun network configuration is not going to be much better than Heroku’s defaults.</p><p>So: I think a PaaS (platform as a service) makes more sense for this kind of thing than AWS-style hosting. Which then begs the question: which.</p><h3>Why not Heroku?</h3><p>I keep saying “Heroku”, and I’ve had mostly positive experiences with Heroku. But it’s hard to see the future for Heroku. Though they’ve shipped a lot of new features after being acquired by Salesforce, I still can’t see how the Heroku and Salesforce plans intersect. It’s scary that Heroku is probably a small percentage of Salesforce’s revenue, and obviously not one of their crown jewels. Heroku’s <a href=""https://devcenter.heroku.com/changelog"">changelog</a> is mostly just version bumps. Hosting has gotten cheaper, but Heroku hasn’t, and things like HTTP/2 are standard now, but Heroku doesn’t support them.</p><p>That’s not to say that Heroku’s a bad option. They’ve had 14 years of product development and bug fixes: it’s a mature product. Many of the issues with Heroku are fixed, or are known and have workarounds. Heroku isn’t cutting-edge anymore: it’s <a href=""https://mcfunley.com/choose-boring-technology"">boring technology</a>, in the good way.</p><p>But still, I’m not sure about the rest of the Heroku story. And there are a lot of companies taking that initial inspiration from Heroku-around-2010 and running with it.</p><h3>Vercel</h3><p>I started Placemark building with <a href=""https://vercel.com/"">Vercel</a>, which has the most slick developer experience of any tool I’ve used, ever. But I’m using <a href=""https://blog.placemark.io/2021/05/10/blitz.html"">Blitz</a>, which doesn’t work very well with it. Vercel deploys with serverless functions and has an incredibly advanced and clever way of <a href=""https://vercel.com/docs/next.js/overview"">hosting Next.js</a> apps. If I were building against a serverless database or if my Blitz app hit an API instead of connected to a database, Vercel would work great. But as it is: connecting to a traditional Postgres database from serverless functions is a whole deal. With Vercel, you need an upgraded account, and under the hood you’d probably want something like the <a href=""https://aws.amazon.com/blogs/compute/using-amazon-rds-proxy-with-aws-lambda/"">AWS RDS Proxy</a> to keep those database connections fast. How do you pool database connections with Lambda functions? There’s an answer, but not a simple one.</p><h3>PaaS options</h3><p>So that leaves me with a few other options: <a href=""https://platform.sh/"">platform.sh</a>, <a href=""https://fly.io/"">fly.io</a>, <a href=""https://www.digitalocean.com/products/app-platform/"">Digital Ocean apps</a>, and <a href=""https://render.com/"">Render</a>. Fly is really attractive for a slightly different problem set than what I have: I don’t want to ship a Docker app, at least initially, and, though fly has a <a href=""https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/"">continuous deployment strategy</a> with GitHub Actions, I want something where that is central to the product and incredibly well-supported. Platform.sh is basically the same: lots of promise, but continous deployment is still manual. I gave Digital Ocean apps a shot. It would be nice to go with a battle-tested existing host’s new product. But the initial experiments didn’t go well: the database failed to boot, and there’s no <a href=""https://www.digitalocean.com/community/questions/how-to-secure-database-connection-to-app-platform"">local-network database access</a>, as far as I can tell.</p><h3>Render</h3><p>Using Render has been great so far. Blitz has a <a href=""https://blitzjs.com/docs/deploy-render"">really fast setup guide</a> for it. The web interface is functional and shows everything I need to see to feel like I know what’s going on. And Render’s product is moving fast in the right direction: using <a href=""https://community.render.com/t/all-static-sites-are-now-powered-by-fastly/598"">a quality CDN</a>, hinting about moving to bare metal servers, supporting fancy <a href=""https://render.com/docs/preview-environments"">preview environments</a> that are just like Vercel’s PR previews but for the whole stack.</p><p>I sense that the pendulum is swinging back toward Heroku-style hosting, so the moment that I post this, a few startups will launch that I haven’t mentioned in this article. Is <a href=""https://railway.app/"">Railway</a> good? Anyway, as I said before: it’s important to choose the right kind of thing. I think Render is the right kind of thing, and I’m quite satisfied with it so far. I’m spending my time building Placemark, not configuring networking.</p>","Here's why we use Render, instead of options like AWS, to host our map editor.",,,false,Fri May 14 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
How we implement undo/redo to make maps fearlessly,how-placemark-implements-undo-redo-to-make-map-making-safe-and-chill,616750c12c0aece979319ccd,619ef1178661d32e59385a0d,Thu Nov 25 2021 02:12:39 GMT+0000 (Coordinated Universal Time),Wed Aug 10 2022 01:30:42 GMT+0000 (Coordinated Universal Time),Wed Aug 10 2022 01:31:24 GMT+0000 (Coordinated Universal Time),"<p>Undo is a funny feature to implement, because it can be incredibly difficult to design and code, and once you're done users nod and say, 'oh, okay, it has undo.' The web doesn't have undo built-in, and a lot of websites don't support undo at all.</p><p>But on the other hand, undo is a powerful feature that lets you design the rest of your application differently. When you don't have undo, big destructive actions need confirmation steps. But if you can undo, users can be fearless, knowing that command+z is there.</p><p>There are lots and lots of ways to implement undo. Placemark landed on a solution in the same vein as <a href=""https://www.figma.com/blog/how-figmas-multiplayer-technology-works/"">Figma's</a> – but undoubtedly less sophisticated.</p><p>I'll try to outline some of the families of thought here:</p><h3>Immutable history-powered undo</h3><p>Whatever your data model is, keeping a copy of it for every change that a user makes. Hitting command-z finds the most recent version of all your data and replaces the current state with that.</p><p>Because storing a copy of everything will obviously consume a lot of storage, many immutable history implementations find ways to cut down on storage. You can use <a href=""https://github.com/immerjs/immer"">immer</a> or another library that does structural sharing, or specialized compression setups.</p><p>Immutable history was how I&nbsp;learned to implement undo/redo. I <a href=""https://macwright.com/2015/05/18/practical-undo.html"">wrote about this back in 2015, using Immutable.js</a>. And the same technique is more or less in place in Mapbox Studio and iD.</p><h3>Command-powered history</h3><p>The main alternative to immutable history is storing a history of the commands you performed on a dataset. For example, if you can increment a number, the reverse is to decrement that number. So running undo runs the ""reverse"" and redo runs the ""forward"" of that action.</p><p>Under the heading of command history, there are some additional wrinkles:</p><ul><li>Do you create both the ""forward"" and ""reverse"" commands when you take an action?</li><li>What are the commands? This is tightly connected with the question of <a href=""https://www.placemark.io/post/choosing-atoms"">what are your atoms</a>. Is a command coarse like ""replace this feature with an updated feature"", or is a command fine-grained like ""move a vertex within this feature""?</li></ul><h3>Undo versus collaboration</h3><p>I quickly discovered that the idea of <em>immutable history powered undo</em> was totally incompatible with collaboration. Basically, you and some collaborator are working on a document and your changes are merged into the document in real-time. You might be editing one feature, your collaborator is editing another.</p><p>When one of you hits command-z, you want to undo the changes <em>you</em> made, not your collaborator's changes. You might not even be aware of what the other person is doing - their work is offscreen, somewhere else. So you need a sort of <em>ownership</em> built into your undo system.</p><p>So, commands. And I first implemented commands in the 'bidirectional' sense, generating both the undo &amp; redo commands at the time you do something. This was quickly disproven because, well:</p><ul><li>You create a red feature (storing {undo = delete that shape, redo = create a red feature})</li><li>Someone changes its color to green</li><li>You hit command-z to undo the feature creation (deleting the shape)</li><li>You hit command-shift-z to redo the feature creation (creating a red shape)</li></ul><p>The last step feels wrong. What if the shape was heavily modified by your team before you delete it, and then your delete-undelete step turns it back into its initial form? That would be bad.</p><p>So I'm just agreeing with <a href=""https://www.figma.com/blog/how-figmas-multiplayer-technology-works/"">Figma's blog post</a> some more - when it comes to collaborative undo/redo, there isn't some provable definition of what the ""good behavior"" is, but I think it's clear that some of the solutions end up feeling wrong. A simple immutable history was a lovely, comfortable idea, but it only worked for me in the past because Mapbox Studio is single-player, and iD editor isn't a realtime collaboration tool.</p><p>There are some interesting things to note about actually putting this system into practice.</p><h3>Batches &amp; transactions</h3><p>First, <em>batches and transactions</em> are really important. Let's say you merge a bunch of features in Placemark. This removes the original features and adds a new feature. A naive undo history might look like:</p><ol><li>Adding features</li><li>Deleting features (as part of a merge operation)</li><li>Adding the merged feature (as part of the merge operation)</li></ol><p>This obviously feels wrong: the deletion of old features &amp; addition of new features should be part of the same thing.</p><p>The abstraction I chose for this I call a ""moment"" but it could be a ""step"" or a ""commit"" or something else. Moment felt like it didn't conflict with any existing terminology and it felt whimsical. Here's what a moment looks like:</p><div></div><p>This follows a theme in Placemark - basically everything is plural, whether it's deleting or updating things, selections, and so on - almost everything should be compatible with batching. This really benefits things like server communication, with fewer requests, and some aspects of frontend performance, like transactions with Replicache.</p><h3>Mutating history</h3><p>This is the weirdest part, and the part that the aforementioned Figma article refers to. So the history in Placemark is stored as two arrays, for undo &amp; redo states. You could totally store this as one single array and some pointer to where the current state is. And the order of the arrays is from most recent to least, in both directions, but that again is up to you.</p><div></div><p>But the weird part is here:</p><div></div><p>The weird part is the call to this.apply, which <em>generates a new reverse moment</em>. So if you created a feature and then hit undo, you execute a ""delete"" command, and create a new ""create"" command with the feature you just deleted.</p><p>One neat aspect of this change is that when you create a feature, the only thing that needs to be created and stored on the list of commands is a ""delete"" command with that feature's id.</p><h3>Ephemeral states</h3><p>Of course, there's more. Think about a color picker or what happens when you drag a vertex. Most likely, what you want out of that experience is</p><ol start=""""><li>You should see the effect of your dragging immediately, as you drag. So if you're dragging a vertex, you should see the shape change.</li><li>If you're collaborating with someone, they should probably also see the incremental progress.</li><li>But, if you ""undo"" that drag, what you want to undo is the change from mousedown to mouseup, not the smaller effect of the last mousemove.</li><li>And those brief states during the drag should probably never be versions in a versioned document system.</li></ol><p>This necessitates an idea of ephemeral states, or a sort of pausing or grouping of the undo history. That's precisely what Placemark has right now - in the informal state machine for drawing lines and polygons, all of the geometry modifications that happen during a drag are ignored, and a new moment in history is only added when you click.</p><h3>Undo is different from versioning</h3><p>I <em>really</em> wanted one system to handle both undo history and versioning, but that just doesn't make sense: undo history should be different for every user, and it naturally fits in local state, though you could sync it to a server as a treat.</p><p>Placemark's version system will be something more like the immutable history idea, using snapshots on in object storage or a fancy table layout in Postgres. Its history will be initially linear, and might have to eventually include concepts like forking and merging.</p><p>The idea of using git or another pre-existing versioning system for this part of the system keeps coming up, but so far I don't see it working. Placemark will likely <em>sync</em> to GitHub, but not use git internally, unless my architecturally calculus changes drastically.</p><h3>Some remaining puzzles with undo</h3><p>Placemark's system for undo works for a lot of map-making experiences, and it generally makes command+z work.</p><p>There are still some challenges, in the long-term:</p><ul><li>Individual history will have to be synced to a server or browser storage to make command-z work after a window refresh. I don't especially think that anyone <em>expects</em> command-z to work after a refresh, though, so this isn't a high priority.</li><li>The browser itself provides its own command-z history, which <em>nests</em> in the application's history, in the case that your cursor is in a textarea. Every web application has this limited bit of undo history, in the context of form fields, and the way that it interacts with application-wide undo is kind of undefined and weird.</li><li>By virtue of mutable undo, not only do the meanings of commands change because of other people's work, sometimes they disappear! For example, if you create an object and someone else deletes it, when you hit command-z, nothing should happen, and maybe you shouldn't even see 'delete' in your undo history. Or you should see it, but grayed out. Marking which actions are now redundant is an important bit of polish.<br></li></ul>","Inspired by Figma, here's a peek into how we implement mutable, command-oriented, local history.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62f30a3b33f5453c0f30af01_Undo.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62f30a3b33f5453c0f30af01_Undo.png,false,Thu Nov 25 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Introducing Folders,introducing-folders,616750c12c0aece979319ccd,6245fef4989ba7571d00980c,Thu Mar 31 2022 19:20:20 GMT+0000 (Coordinated Universal Time),Thu May 12 2022 17:03:01 GMT+0000 (Coordinated Universal Time),,"<p>Placemark recently launched <strong>Folders</strong>! Folders let you organize the features in your maps.</p><p>You can create a folder of features that you want to use just as a reference when you're editing other things. Let's say you're working on a political project and want to keep in mind where the congressional districts lie. The congressional district polygons sit in a folder, which you can lock from editing and close in the folder tree, so you can focus on the dataset you're building.</p><p>Folders can be renamed and nested. You can put folders inside of folders. And everything that you do with folders, like everything else in the map, is updated in real-time and shared with your collaborators.</p><p>With the introduction of folders, we've also introduced ordering to maps. Using the folder tree on the left side of the page, you can drag features and folders to different places, and these changes are reflected in the map.</p><p>Folders work with import &amp; export, too. At the export step, you can choose one folder in your map and just export those features. And when you import features from a file, the new features are automatically added to a new folder.</p><p>One of the many formats that Placemark supports is able to store folders: KML. So when you import KML files into Placemark, KML folders become Placemark folders. And you can export back to KML, preserving the folder structure. For the rest of the formats, you can export different files for different folders, or flatten your data when you export it, into one dataset.</p><p>‍</p>",,,,false,,Product
Introducing our free map file converter,introducing-our-free-map-file-converter,616750c12c0aece979319ccd,629a2eb195ea6042eb0c0382,Fri Jun 03 2022 15:54:25 GMT+0000 (Coordinated Universal Time),Fri Jun 03 2022 16:27:10 GMT+0000 (Coordinated Universal Time),Fri Jun 03 2022 16:27:15 GMT+0000 (Coordinated Universal Time),"<p>Today I'm releasing <a href=""https://app.placemark.io/converter"">Placemark's free map file converter</a>. It'll convert your KML&nbsp;to GeoJSON to FlatGeobuf to GeoJSONL. You name it, it converts it. It has no built-in limits:&nbsp;the only limit is your imagination, wait no – your computer and browser's memory.</p><div></div><p>‍</p><p>In the course of implementing <a href=""https://www.placemark.io/format-matrix"">lots and lots of file formats</a> in Placemark, we've ended up with some great, reusable tools.&nbsp;I figured it'd be pretty useful to just let anyone use those things, on a convenient drag &amp; drop (or click, or paste) page. I hope it's useful. Happy Friday!</p><p>This list will go out of date, but right now - you can convert:</p><ul><li>GeoJSON, GeoJSONL</li><li>FlatGeobuf</li><li>CSV</li><li>Excel</li><li>Zipped ESRI Shapefiles</li><li>GPX</li><li>TCX</li><li>Encoded polylines</li><li>Extract data from GeoTIFFs &amp; JPEGs</li><li>KML &amp;&nbsp;KMZ</li></ul>","Announcing Placemark's new free map file converter, which runs in your browser and supports converting lots of file formats to and from each other.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/629a3560e30e195ecb5e52f3_Format%20converter.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/629a3560e30e195ecb5e52f3_Format%20converter.png,true,Fri Jun 03 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
It's still too hard to make maps,its-still-too-hard-to-make-maps,616750c12c0aece979319ccd,61f032dfa2fb87c592be68a5,Tue Jan 25 2022 17:26:55 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:34:15 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<p id="""">One reason why I'm building Placemark is that <em id="""">it's still too hard to create maps</em>. I think that's true, but I also enjoy precision, and I know that statement is all too vague.</p><p id="""">Most of the vagueness is caused by that phrase ""create maps."" Off the top of my head, making a map might mean:</p><ul id=""""><li id="""">Opening Google Earth or Google My Maps and dropping a few points with descriptions onto a map, and sharing that.</li><li id="""">Building a full-fledged web application that centers on an embedded map using <a href=""https://docs.mapbox.com/mapbox-gl-js/api/"" id="""">Mapbox GL JS</a> or the <a href=""https://developers.google.com/maps"" id="""">Google Maps API</a>.</li><li id="""">Designing a new cartographic style for <a href=""https://openstreetmap.org/"" id="""">OpenStreetMap</a> or using vector tiles or rendering with <a href=""https://mapnik.org/"" id="""">Mapnik</a>.</li><li id="""">Processing raw raster data to produce mosaics, and then turning those mosaics into satellite maps.</li><li id="""">Working on a dataset by editing the data itself in OpenStreetMap, or creating a derived dataset by writing complex SQL queries to generate vector tiles.</li></ul><p id="""">Some of these tasks are completely orthogonal. You can spend all day creating an interactive web map experience without changing cartographic styles or creating geographic data.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2410px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2410px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61f03104b3cacd794204cb17_CleanShot%202022-01-25%20at%2012.18.51%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""The iD interface for editing OpenStreetMap ""></div><figcaption id="""">The OpenStreetMap Editor, including OSM data, © OpenStreetMap contributors</figcaption></figure><p id="""">You can edit OpenStreetMap all day long without touching a line of code or choosing a color.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center"" data-rt-max-width=""""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61f03125a6eecf92e615b016_sanfrancisco-15.jpeg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A screenshot of a minimal OpenStreetMap style""></div><figcaption id="""">Mike Migurski's HighRoad project, which correctly orders stacked highways and bridges</figcaption></figure><p id="""">There are major contributions to cartography that are things like <a href=""https://github.com/migurski/HighRoad"" id="""">highway stacking orders</a>, which exist in a space between data, code, and style.</p><p id="""">It's complicated because map creation is a system inside of a system. Some real-world inputs flow into it – national borders from the United Nations, images from a satellite, GPS coordinates – and outputs like websites and PDFs and images flow out of it. And in the middle is the complex map creation ecosystem.</p><p id="""">Why is that ecosystem complex?</p><h3 id="""">Diverse uses</h3><p id="""">In part because of all of those different kinds of inputs and outputs: the world of maps is so varied and its data is so expansive that there are few one-size-fits-all technologies. <a href=""/documentation/shapefile"" id="""">Shapefiles</a> were a popular format, but are painful to use with web applications, so you might want to use <a href=""/documentation/geojson"" id="""">GeoJSON</a> instead. If the data's too large for that, you've got <a href=""https://wiki.openstreetmap.org/wiki/OSM_XML"" id="""">OSM XML</a> and databases like <a href=""https://wiki.openstreetmap.org/wiki/PostGIS"" id="""">PostGIS</a>. The world would be simpler if there was just one format, but it's not just <a href=""https://xkcd.com/927/"" id="""">the challenge of consensus</a> causing the format diversity.</p><h3 id="""">Data isn't visual</h3><p id="""">It's also complex because map data isn't visual: with the exception of the <a href=""/documentation/kml"" id="""">KML format</a>, a geographical line or point doesn't have a color or width or any other set style properties. It's analogous to the difference between HTML and CSS - map styles define <a href=""https://en.wikipedia.org/wiki/Presentation_semantics"" id="""">presentation semantics</a>. But it's a stark difference to how things like graphics editors - which look, on the surface, quite similar, work.</p><h3 id="""">A lot of map-makers are professionals</h3><p id="""">Before apps like SnapChat and TikTok swept through an entire generation, video editing was <em id="""">hard</em>. If you were learning how to use Final Cut or Premier, chances were that you'd watch tutorials, take a class, or actually read the manual. Even iMovie is pretty complex. When these desktop applications reigned, a lot of the people making videos were working on capital-v Video projects, films or commercials or shorts, and they were willing to spend the time to sweat the details.</p><p id="""">But now that everyone has a 4k video camera in their pocket and social capital to be won by publishing 30 second shorts, investment in easy, tailored video editing tools is rushing in. There's a market in the low to medium range of skill and commitment that there wasn't before.</p><p id="""">A lot of the people editing maps today are still pros. They're working for your city planning department or National Geographic or some oil drilling concern. They are deeply about specific capabilities and outcomes and are willing - not happy, but willing - to put up with kludgy software to get there.</p><div id=""""></div><p id="""">Placemark aims to reinvent part of the map-making process. It won't replace the whole ecosystem, or make mapmaking truly easy for everyone in that list. We're starting with data - creating, editing, collaborating on data. I think that part is still too hard, and the tools could be better. Data editing is an afterthought for companies whose main business is an API or something else. It's the centerpiece of Placemark, the place we'll expand out from.</p>",It's too hard to make a map. It's also hard to say what making a map is.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61f032be92293f4877f6972d_still-hard-map.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61f032be92293f4877f6972d_still-hard-map.png,true,Tue Jan 25 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Joining data and more,joining-data-and-more,616750c12c0aece979319ccd,62e43bb2f83b9e4f3ad1abfb,Fri Jul 29 2022 19:57:38 GMT+0000 (Coordinated Universal Time),Fri Jul 29 2022 20:10:30 GMT+0000 (Coordinated Universal Time),Fri Jul 29 2022 20:10:36 GMT+0000 (Coordinated Universal Time),"<p id="""">Finding map data can be frustrating. It's one thing to find the geospatial part - the boundaries, street centerlines, points - but even harder to find data with the right attributes. You might end up with an identifier, a name, maybe a few helpful properties, but it's unlikely that you can find something like a pre-made dataset of US&nbsp;states with income data, or country boundaries with their formation dates. There's no ""one stop shop"" for data like that, and there probably won't ever be one. Instead, we need great tools for working with the data we have.</p><p id="""">Which brings us to today:&nbsp;Placemark now supports joins.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2348px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2348px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62e4358a8f93467b78ed602b_CleanShot%202022-07-29%20at%2015.31.10%402x.png"" loading=""lazy"" alt=""States data joined with income data"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">What's a join? It's when you take a geospatial file, like a GeoJSON file of states, and put it on your map. Then you take a spreadsheet, like a table of states and their average incomes, and add that to the map too - and Placemark matches the table with the map data, and makes you an <em id="""">enhanced</em> new file with the extra data. It's like an Microsoft Excel ""Merge"", or a database ""JOIN.""</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1707px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1707px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62e43d904302cd413349285c_Joins%20(1).png"" loading=""lazy"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">‍</p><p id="""">Joins let you create custom, hybrid datasets by adding extra attributes to geospatial data from tabular data. We think you'll really like it.</p><p id="""">All you need is tabular data - a CSV or an Excel file - with a column that matches the map data. Maybe that's a state's name, or a country's&nbsp;ISO&nbsp;code, or a zip code against ZCTAs. Placemark does the matching, combines the attributes, and updates your map with the new data.</p><p id="""">Here's a tutorial example of joins in action:</p><div></div><p>‍</p><p id="""">Check out the <a href=""/documentation/joining-data"" id="""">new documentation page on joining tabular data</a> for all the details!</p><h2 id="""">Other updates</h2><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center"" data-rt-max-width=""""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62e437e32daf32b9aff02ce4_CleanShot%202022-07-29%20at%2015.40.11%402x.png"" loading=""lazy"" alt=""Showing summary statistics for geometry information"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">The geometry information menu, noted by the ruler icon, now works with multi-selections - so you can select multiple features on the map and get a summary of their geometry types as well as information like total area for polygons and total length of lines.</p><p id="""">‍</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center"" data-rt-max-width=""""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62e43841eaa8c960f5240a7a_CleanShot%202022-07-29%20at%2015.41.59%402x.png"" loading=""lazy"" alt=""Custom winding order for GeoJSON"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">The already quite flexible GeoJSON export got even more custom: you can specify the winding order of the exported GeoJSON&nbsp;files. 99.9% of the time you shouldn't worry about this at all. But in that 0.1%, in which you're using d3-geo or Azure Cosmos DB, you'll want to select the second option, ""D3""&nbsp;to wind polygons in the opposite direction to the one specified in the GeoJSON&nbsp;specification. If that's you, check it out, and see the new <a href=""/documentation/winding-order"" id="""">documentation on winding order</a>.</p>","Geospatial data meets tabular, with the new join feature",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62e43ba7576bb98d14d921c5_Joins.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62e43ba7576bb98d14d921c5_Joins.png,true,Fri Jul 29 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Keeping the bugs away,keeping-the-bugs-away,616750c12c0aece979319ccd,61952aa908ee302d689327dd,Wed Nov 17 2021 16:15:37 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:39:31 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:40:05 GMT+0000 (Coordinated Universal Time),"<p id="""">In the last two weeks, Placemark's uptime graph has been unhappy, the result of several bugs in its code and the dependencies it relies on. So I've spent time improving the way we track &amp;&nbsp;fix bugs. This post is a bit about the setup, plus some postmortem - some of what has been going wrong, and some of what I've been trying to improve.</p><p id="""">The issues, in short, have been:</p><ul id=""""><li id="""">A crasher bug in Sentry's instrumentation library, triggered by some odd code I wrote</li><li id="""">A crasher bug in Prisma's implementation of transactions</li><li id="""">Some minor bugs in Blitz, like TypeScript defs inconsistencies</li></ul><p id="""">All of these were either already reported, or I spent some time narrowing down the cause as best I can and filing detailed bug reports. Being willing to do that, to spend a day hunting down a bug that you didn't write, seems essential. It's a lot of work, but it's a lot easier for you to isolate and diagnose a bug you're seeing than it is for someone without access to your setup.</p><h3 id="""">Fixing broken software</h3><p id="""">All software has bugs. All software development adds bugs. It doesn't matter if you have a fancy type system or robust unit tests. You can reduce the number of bugs, but you can never really get to zero.</p><p id="""">What matters is your ability to notice, diagnose, and fix those bugs: to create a feedback loop. In a perfect world, every bug would have a detailed and accurate report that let you track down its origin. Every bug that happens in production can be reproduced locally. And when you have a fix, you can deploy it immediately and confirm that the bug is gone.</p><p id="""">That's the goal. We don't live in a perfect world, and usually none of these things are <em id="""">absolutely</em> true. For example, the issues with Blitz I encountered only manifested in production. The issues with Sentry produced a bug report that didn't point to any particular system or line of code. Interpreting bugs shouldn't be an art, but it is.</p><p id="""">But to even have a fighting chance to achieve these goals, you need a few systems.</p><p id=""""><strong id="""">First, error tracking.</strong> I use <a href=""https://sentry.io/welcome/"" id="""">Sentry</a>, because I have a lot of experience using it at Mapbox and Observable, and they have an actively-maintained integration for Next.js, which works okay with Blitz. If you only had one system, I think it'd be error tracking. Sentry aims to hook into all of the ways your application can crash or produce an error, and send all of those errors to its service. Then, you can look at them all on a dashboard and try and fix everything on that list, one by one.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2735px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2735px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/619529fa59d3bc05c33490da_CleanShot%202021-11-17%20at%2011.11.50%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Sentry dashboard""></div><figcaption id="""">Sentry</figcaption></figure><p id="""">Ironically, one of my issues was caused <em id="""">by</em> Sentry's integration - its low-level hooks into my server were changing the behavior of Node's streams, which caused an internal error in Node, and Node crashes hard when that happens.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2414px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2414px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61952a5e0d84190d1e9e82a7_CleanShot%202021-11-17%20at%2011.14.06%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Logtail showing Placemark's log messages""></div><figcaption id="""">Logtail</figcaption></figure><p id=""""><strong id="""">Then, logging.</strong> <a href=""https://www.placemark.io/post/hosting-render"" id="""">Render</a> has rudimentary logging built in, but I recently added <a href=""https://logtail.com/"" id="""">Logtail</a> for longer-retention logs that I can search through. Logging &amp; error tracking can really be two sides of the same coin - some errors produce logs, and some logs are captured by Sentry as the context to errors. But there are important details that are captured <em id="""">only</em> by logs - errors from system-level software, logs of deployments, debugging information, timing data. Logs are an unstructured mess, but if you spend some time searching through them, they can often answer hard questions about out-of-memory errors and the like.</p><p id=""""><strong id="""">Patterns.</strong> Here's the part where it's my fault. There are ways to write code that gives good tracebacks and ways to screw it up. For example, let's say that your code relies on some <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" id="""">Promise</a> value, and you aren't using await syntax, but using the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"" id="""">""then""</a> method. If you don't also call the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"" id="""">catch</a> method, you probably have a silent failure in your application.</p><p id="""">Brief rant: silent failure is the worst kind of failure. I've noticed a habit of early software engineers that they tend to fix the error, not the bug. They'll see a crash and add <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"" id="""">try…catch</a> around it so that it doesn't complain. The complaining isn't the issue: the bug is. Prefer loud failure. Heck, the Unix philosophy has said this for decades.</p><blockquote id=""""><a href=""http://www.catb.org/esr/writings/taoup/html/ch01s06.html"" id="""">Rule of Repair</a>: When you must fail, fail noisily and as soon as possible.</blockquote><p id="""">To fix bad error patterns, I've dialed up some static analysis: the <a href=""https://typescript-eslint.io/rules/no-floating-promises/"">no-floating-promises</a> rule in typescript-eslint prevents that uncaught Promise rejection error, and the <a href=""https://typescript-eslint.io/rules/require-await/"" id="""">require-await</a> rule catches me when I use an async function for no reason - a practice that makes my error reports worse.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2786px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2786px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61952a9308ee3054d2932794_CleanShot%202021-11-17%20at%2011.14.51%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""CodeClimate showing code health statistics""></div><figcaption id="""">Code Climate</figcaption></figure><p id=""""><strong id="""">And, of course, tests.</strong> I'm using <a href=""https://codeclimate.com/"" id="""">Code Climate</a>, which is remarkably 'free forever' for teams of under 4 people. The tests I run create code coverage statistics that I send to Code Climate and they give nice charts of coverage over time. Code coverage is only one limited way to measure test quality, and ironically the easiest things to test tend to be the least buggy parts of an application. But it's good to have a metric nudging me to write more tests. The next frontier of testing for me is true integration testing and also concurrency testing for the complex backend pieces.</p><h3 id="""">Improving the deployment loop</h3><p id="""">There are a few ingredients that have helped tremendously in fixing Placemark &amp; confirming those fixes:</p><p id="""">Using a <a href=""https://render.com/docs/deploys#zero-downtime-deploys"" id="""">healthcheck endpoint</a> with Render, I can do zero-downtime deploys and also prevent broken servers from being deployed. Render simply waits until an endpoint in Placemark returns the right response before replacing the old server with a new one. Deploys take about 4 minutes right now, which I'd love to reduce but feels basically acceptable.</p><p id="""">By integrating heavily with <a href=""https://docs.sentry.io/product/releases/"" id="""">Sentry's releases support</a>, my error tracking knows when new versions of Placemark are released. This means that I can mark a bug as ""fixed"" in one release, and if it crops up in another, I can cross-reference my development history on GitHub against the behavior of deployed code to bisect the regression.</p><h3 id="""">Onwards and upwards</h3><p id="""">Thanks to committed maintainers and fast release cycles, this week should see the end of these crasher bugs. But in the meantime, I'm happy to have built some systems that keep the quality up.</p>","How we use error logging, code analytics, uptime monitoring, and continuous deployment to power map editing tools you can rely on.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb5d99244ca2a4b0c381de_Keeping%20the%20bugs%20away.png,true,Wed Nov 17 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
"Maps, a decade later",maps-a-decade-later,616750c12c0aece979319ccd,619a9be5d963e5ff42afb20c,Sun Nov 21 2021 19:20:05 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:33:00 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<p id="""">It occurred to me recently that I've been working on stuff sort of like Placemark for over a decade. In 2009, I was working on the <a href=""https://www.drupal.org/project/openlayers"" id="""">OpenLayers module</a> for <a href=""https://www.drupal.org/"" id="""">Drupal</a>, a PHP content-management system that was, then, the speciality of <a href=""https://developmentseed.org/"" id="""">Development Seed</a>, the website shop that spawned Mapbox. I went on to work on our map editor, another <a href=""https://tilemill-project.github.io/tilemill/"" id="""">map editor</a>, and <a href=""https://www.mapbox.com/mapbox-studio"" id="""">another</a> and <a href=""https://github.com/openstreetmap/iD"" id="""">another</a>.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" data-rt-type=""image"" data-rt-align=""fullwidth""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/619a9a996e05274954285559_5821528290_c3ab278baf_o.jpg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""The author, demoing OpenLayers a long time ago""></div><figcaption id="""">Me, giving a presentation about OpenLayers in 2011 (<a href=""https://flickr.com/photos/developmentseed/5821528290/in/photolist-9SqRxq-an6KFj-6PpFEr-8p1KTU-J6AwC-J6C9G-J6Epp-J6C1m-J6EMZ-J6AHj-J6BLY-J6BpW-J6EcZ-J6ASY-J6EZc-J6BwY-372Z2a-J6E3V"" id="""">Development Seed Flickr</a>)</figcaption></figure><p id="""">A decade of maps. I don't like the sound of that. My heroes are people like <a href=""https://en.wikipedia.org/wiki/Hildegard_of_Bingen"" id="""">Hildegard of Bingen</a> and <a href=""https://en.wikipedia.org/wiki/William_Morris"" id="""">William Morris</a>. People who are in 30 different Wikipedia categories. Specializing is lame.</p><p id="""">In the last few years, I spent my time building visualization, building programming environments, and understanding industrial design &amp; CAD software. But I'm back. Why do I keep going back to maps?</p><p id="""">Maybe because the idea of ""map layers"", these visual and data components of maps that can be combined arbitrarily, cause the industry to think deeply about recombination and interoperability in a way that's rare for the rest of the internet. A ""map"" might be pulled from three different services, which each source data from a few different open data communities or commercial suppliers. On levels both technical and legal, what you're experiencing is a real-time remix.</p><p id="""">Maybe because maps are still a place where open source software and standards dominate. Because our shared knowledge of space is so crucial that governments, mega-corporations, and startups all <a href=""https://en.wikipedia.org/wiki/Open_Geospatial_Consortium"" id="""">collaborate on new standards</a>.</p><p id="""">Maybe it's that maps give you endless ways to geek out and try to solve problems better. Things like 'simplifying a line' are active areas of research, with new algorithms and old competing for performance, aesthetics, and simplicity. Maps create spectacularly hard problems in related fields, like labeling a map: display curved text in an arbitrary number of languages with their own directionality, and doing it all in real-time. Every part of how a map is made is a challenge, and every part could be improved.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2592px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2592px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/619a9b9932209f75d8dcb86e_31418658600_e4db8dfd43_o.jpg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A Japanese street corner with an address written on a fence""></div><figcaption id="""">Japanese address (<a href=""https://flickr.com/photos/wombatarama/31418658600/in/photolist-PSmQAm-236nLZQ-2k8isXy-29Fr532-23WJrM3-RNuhjg-28Q5h78-UDG4DY-UzZnfE-2g5yUHq-2iJWJge-rr9J6p-WjS5VK-28WgS2d-FJasTq-2dq8rjv-2i5wRKA-2i5rw4b-H895FM-2eD7Cuc-24TvHVp-27gVTpA-2k7zjsk-2kdjj4U-FU3rLj-CnTrnA-XygWTR-5iNEpj-oWMJ6w-2hTmbhD-22vG7n5-yGjdEg-8Wexmp-yGduuf-yWw8Rh-yGeFW9-cjBMiJ-2g5zcoP-yGeFwG-2jMCEo4-2jtn5k3-25rmVkL-bekgon-2jzeMqU-28Q5dGT-4HhgZH-qp9Muf-2mhN72A-YXTPds-u2Hnbo"" id="""">wombatarama on Flickr</a>)</figcaption></figure><p id="""">Or that maps capture and plug into humanity, with all its complexity and contradictions? How you learn about how endless <a href=""https://en.wikipedia.org/wiki/Sea_of_Japan_naming_dispute"" id="""">naming disputes</a> and <a href=""https://en.wikipedia.org/wiki/Sino-Indian_border_dispute"" id="""">border disputes</a>. Or <a href=""https://en.wikipedia.org/wiki/Japanese_addressing_system"" id="""">addressing systems</a> that bear no resemblance to America's or the weirdness of <a href=""https://en.wikipedia.org/wiki/ZIP_Code"" id="""">America's addressing system</a>.</p><p id="""">Or that, well, maps stay hard. We've been talking about <em id="""">democratizing maps</em> for a long time now, and while progress has been made, there's a long way to go. The simplest things to do with maps are more accessible, but the harder things - like designing them, or working with data - are still difficult. Whether those things will ever be 'easy' is up for debate. Will anything complex ever become easy? And how much real complexity is there?</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2048px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2048px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/619a9c437236188bf78c5bdf_11171290686_cf3777a042_k.jpg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A historical printed map of London""></div><figcaption id="""">1884 map of London (<a href=""https://flickr.com/photos/britishlibrary/11171290686/in/photolist-i2aMw7-oxMV3p-i6ovZK-wLBn4N-oeKVYk-oeWu9U-oeix1t-owfUDs-ypBwiJ-owkjJz-ow4dDB-ie5BMy-tjokBL-ow1FDP-ouBuw7-otqTpU-i8VQic-od9AEM-ow8z7M-hRBYF8-odZHJZ-ow5GUX-oweaLT-otUXo4-qZzfY6-hR2P2r-oeKDGG-idwG6s-xmAraN-ie1KqX-i8wVBY-hYZPUy-vvzAX8-oy5gGD-obTSH5-ow5UEM-wowFex-otSBb9-otpxZU-odj7ku-oeV3gd-ibEBZ7-otnsfQ-ov9sXe-i9p2He-otTVtu-id3FJn-ouSsdu-odsSuM-oc63GE"" id="""">British Library on Flickr</a>)</figcaption></figure><p id="""">One thing. Back at Mapbox, I would interview a lot of people, and a lot of them <em id="""">loved</em> maps. They had grown up with them, paper or digital, consulted them on road trips, soaked in the details. I'm sure some were performing for the interviewer, but others had legitimate love for the work of cartographers.</p><p id="""">I never really liked maps before. As my friends can attest, I have no sense of direction and rely heavily on my iPhone's compass arrow. I've never had a map hung up as art, and consulting my GPS when I drove around New Jersey was a chore.</p><p id="""">But I've bounced around different topics in my adulthood, letting my mind go where it wants. And the thing about maps is that there's <em id="""">so much there</em>. I'm happy to keep exploring.</p>",Why maps are still interesting in 2021,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57ad1ac545a520b2cc29_Maps%2C%20a%20decade%20later.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57ad1ac545a520b2cc29_Maps%2C%20a%20decade%20later.png,true,Sun Nov 21 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Making maps with addresses,maps-with-addresses,616750c12c0aece979319ccd,62a78a7c129a69607436a9a2,Mon Jun 13 2022 19:05:32 GMT+0000 (Coordinated Universal Time),Fri Jun 17 2022 19:41:26 GMT+0000 (Coordinated Universal Time),Fri Jun 17 2022 19:41:30 GMT+0000 (Coordinated Universal Time),"<div></div><p>‍</p><p>You can now import spreadsheets with addresses and let Placemark turn them into a map! With address data, you can give the geocoder extra context for which part of your spreadsheet is the street, country, postcode, or other part of the address –&nbsp;or you can just point the geocoder to a single field with the address.</p><p>Plus, now you can add an address after you've searched for it on the map.</p><p>Placemark's support for addresses is pretty special: it's based on open data sources, so you can enrich your data with geo-locations, without needing to worry about licensing. Unfortunately, you can't do the same with most other solutions or even APIs - being able to store addresses is usually a closely-guarded feature.</p><p>You can read more about this feature in our new documentation on <a href=""/documentation/importing-addresses"">importing addresses</a>.</p>","New support for importing CSV and Excel files with address data, plus adding locations to the map after searching.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a78a5fbe7fa2f49d86be2b_Addresses.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62a78a5fbe7fa2f49d86be2b_Addresses.png,true,Wed Jun 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Money,money,616750c12c0aece979319ccd,616806cdc3925d85cde18482,Thu Oct 14 2021 10:30:37 GMT+0000 (Coordinated Universal Time),Wed Dec 15 2021 00:09:12 GMT+0000 (Coordinated Universal Time),,"<p>Placemark will be a product that costs money, sold by a business, when I eventually merge that PR and swap those DNS records. To make that work, I’ve been thinking about how pricing, what to sell, and how many people would need to sign up for it to be viable.</p><p>It’s important to think about this kind of thing, just enough. I won’t regurgitate the theses in full, but startup land has validated a few forking paths of making money. You can go upmarket with enterprise deals worth $10k+ carefully sold to clients. You can do this before even building the product, to validate the idea. Going way downmarket and working out a ratio of advertising spend to total lifetime value and hoping that scales with an injection of investor cash. Or you can take a long-shot view and work in a problem area so fresh and unexplored that it might be worth billions, and raise a large round of funding based on that small chance of winning a big prize.</p><p>It’s gauche to talk about these things in public. So many times I’ve seen a company, read the marketing, seen the pricing, and had absolutely no idea how it remained solvent. Usually a two-sided market, some huge customer, or a big round of funding.</p><p>Anyway, I’m not a business genius (investors reading this: I am a business genius).</p><p>But first, what I’m starting to think is that a lot of the business strategies are maximalist. Optimizing purely for known results produces boring results. If we wanted a medium time commitment and steady cashflow, why not buy a chain of car dealerships? Aiming purely for a moonshot opportunity gives you stuff like <a href=""https://sonicenergy.com/"">SonicEnergy</a>, which is <a href=""https://lookatmeimdanny.tumblr.com/post/101432017159/how-putting-10m-into-ubeam-illustrates-everything"">a literally impossible idea</a> that nevertheless raised $53 million dollars in funding.</p><p>What these models are maximizing and minimizing is certainty. You can have high certainty of success (usually with muted rewards) or low certainty of success (with a massive payout if you nail it). This drives toward irrational moonshots and hyper-rational lifestyle businesses.</p><p>Let alone how these models are purely financial. And of course they’re purely financial, these are financial models, business models. But if you think about them too long, if you make the mistake that I do and drown yourself in reading about them, then you start to forget that you’re <em>making a thing</em>.</p><p>It’s almost shameful to think about making a thing as the purpose, about caring about pushing a space forward and improving technology. Innovation is an output of finance, not an input, maybe. Innovation isn’t doing very well, but the economy’s still doing great.</p><p>I want to build a thing <em>and</em> build a business around it. So the question becomes whether one can consider non-economic factors, like liking a problem area or wanting to create something great, in that process. The answer might be no. Or the answer is that the non-economic is reflected in the economic - someone’s like of a thing motivates and informs them on that topic, and makes them more likely to succeed.</p><p>I’m not sure which it is. I’m figuring this stuff out.</p>",Should Placemark raise money? Is there a deeper meaning to life? And more.,,,false,Mon Jul 05 2021 00:00:00 GMT+0000 (Coordinated Universal Time),
Moving features,moving-features,616750c12c0aece979319ccd,62d563b25e640379d0f951ed,Mon Jul 18 2022 13:44:18 GMT+0000 (Coordinated Universal Time),Sun Sep 04 2022 19:32:46 GMT+0000 (Coordinated Universal Time),Sun Sep 04 2022 19:33:04 GMT+0000 (Coordinated Universal Time),"<div></div><p>‍</p><p id="""">Sometimes you'll get a dataset in which features are <em id="""">not quite</em> in the right spot, and need a little nudge. You can now do that with Placemark! Just:</p><ol start="""" id=""""><li id="""">Select a feature - or features - by clicking on them.</li><li id="""">Hold down the space bar.</li><li id="""">Click &amp;&nbsp;drag to move those features.</li></ol><p id="""">Simple as that. This also works with multi-selection, so if you need to move a whole swarm of points, you can do that too.</p>",Feature in the wrong place? Not anymore.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62d56396318d863df01688a6_Move.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62d56396318d863df01688a6_Move.png,true,Mon Jul 18 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Placemark for Figma,placemark-for-figma,616750c12c0aece979319ccd,63c558e92378566c466f7731,Mon Jan 16 2023 14:02:17 GMT+0000 (Coordinated Universal Time),Wed Jan 18 2023 12:44:35 GMT+0000 (Coordinated Universal Time),Wed Jan 18 2023 12:44:41 GMT+0000 (Coordinated Universal Time),"<p id="""">Since as long as I&nbsp;can remember in the geospatial industry, there's been a need for vector maps –&nbsp;maps in vector formats like SVG or PDF, that you can print or edit in a drawing tool. And there haven't been many tools to produce those.</p><p id="""">You can screenshot a Google or Mapbox map, but that will give you a raster image - a PNG or a JPEG. So it'll get pixelated if you scale it up, and you can't modify elements in the map when you bring them into Figma. Plus, most major mapping services have restrictive terms of service:&nbsp;Google doesn't want you to <a href=""https://about.google/brand-resource-center/products-and-services/geo-guidelines/#google-maps"" id="""">use their maps in printed goods, like coasters or t-shirts</a>, and Mapbox's terms of service are even more strict, <a href=""https://assets.website-files.com/5d4296d7a839ea49599adba1/6387fee5e1468f04bc69c29e_Mapbox%20Product%20Terms%20(2022.11.30).pdf"" id="""">forbidding almost all print applications</a>.</p><p id="""">This is why we're introducing the <a href=""https://www.figma.com/community/plugin/1189962635826293304/Placemark"" id="""">Placemark Figma plugin</a>, a free and open source plugin for <a href=""https://www.figma.com/"" id="""">Figma</a> that makes the creation of vector maps dramatically easier.</p><p>‍</p><div></div><p>‍</p><h3 id="""">Your maps, free to use</h3><p id="""">The plugin pulls map data from <a href=""https://www.openstreetmap.org/"" id="""">OpenStreetMap</a>, the same datasource as Mapbox. However, it adds no additional restrictions to what you can do with the rendered map:&nbsp;you can print it, publish it, do whatever you want, as long as you follow <a href=""https://wiki.osmfoundation.org/wiki/Licence/Attribution_Guidelines"" id="""">OpenStreetMap's attribution policy</a>. To make that simple, the plugin adds attribution to every map it creates.</p><p id="""">‍</p><h3 id="""">Design your maps in Figma</h3><p id="""">The plugin lets you really <em id="""">design your maps in your design tool</em>. That means that roads are vectors. Buildings are shapes. Both are styled with Figma's <a href=""https://help.figma.com/hc/en-us/articles/360039238753-Styles-in-Figma"" id="""">shared styles</a>, so you can tweak the color of all highways or trees with Figma. The plugin creates a set of styles the first time you design a map, and you can tweak those styles yourself to create your own distinctive cartography.</p><p id="""">‍</p><p id="""">The Figma Plugin is available now and people have already been having a good time making maps with it. We're planning a lot of improvements in the future, like better support for coastlines and support for labeling roads and places. <a href=""https://www.figma.com/community/plugin/1189962635826293304/Placemark"" id="""">Try it out and let us know how it goes!</a></p>",Dive into cartographic design in the comfort of Figma with Placemark's new Figma plugin,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63c58eb0f950c6f0c9341a2b_figma-plugin.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/63c58eb0f950c6f0c9341a2b_figma-plugin.png,true,Wed Jan 18 2023 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Placemark is winding down,placemark-is-winding-down,616750c12c0aece979319ccd,65512368729040d7cd957d24,Sun Nov 12 2023 19:11:36 GMT+0000 (Coordinated Universal Time),Mon Nov 13 2023 14:55:42 GMT+0000 (Coordinated Universal Time),Mon Nov 13 2023 14:55:55 GMT+0000 (Coordinated Universal Time),"<p id="""">Well, I've made the decision to wind down my efforts on <a href=""https://www.placemark.io/"" id="""">Placemark</a> - it's been a lovely journey thanks to great folks using it (like you!) but ultimately wasn't self-sustaining financially.</p><p id="""">Starting today,</p><ul id=""""><li id="""">New signups will be disabled</li><li id="""">Existing paid users will have free access until January 19, 2024</li><li id="""">In January 2024 I'll release the full source code for the application as open source</li></ul><p id="""">I've intentionally crafted Placemark in a way that was easy to interoperate with other systems, so it should be smooth to export from the application and import into tools like <a href=""https://qgis.org/en/site/"" id="""">QGIS</a>, <a href=""https://umap.openstreetmap.fr/en/"" id="""">uMap</a>, <a href=""https://felt.com/"" id="""">Felt</a>, <a href=""https://www.cartamaps.com/"" id="""">Carta</a>, or <a href=""https://atlas.co/"" id="""">Atlas</a>.</p><p id="""">If you need help with exporting, or have any other questions, feel free to contact me.</p><p id="""">Thank you, folks, for your support and for using Placemark!</p><p id="""">-Tom</p>",Thanks for joining me on this exploration - it's time to call this one an ending.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6551235a68309ecab7bf0fff_2023-11-10-sky_2880.webp,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6551235a68309ecab7bf0fff_2023-11-10-sky_2880.webp,true,Mon Nov 13 2023 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Placemark on the Geomob Podcast,placemark-on-the-geomob-podcast,616750c12c0aece979319ccd,621cea43eac707192cafd0b0,Mon Feb 28 2022 15:29:07 GMT+0000 (Coordinated Universal Time),Sat Mar 19 2022 19:39:15 GMT+0000 (Coordinated Universal Time),Sat Mar 19 2022 19:39:20 GMT+0000 (Coordinated Universal Time),"<div></div><p>This month I&nbsp;chatted with Ed Freyfogle on the Geomob podcast! Check out this episode and <a href=""https://thegeomob.com/podcast/episode-118"">subscribe to the 'cast over on their website</a>.</p>",A fun conversation with Ed Freyfogle about geo and business,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/621cea356459123f0c9d031c_Geomob%20podcast.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/621cea356459123f0c9d031c_Geomob%20podcast.png,true,Mon Feb 28 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
"Placemark thematic maps, v2",placemark-thematic-maps-v2,616750c12c0aece979319ccd,62c867bc117e4a1ceb136476,Fri Jul 08 2022 17:22:04 GMT+0000 (Coordinated Universal Time),Wed Aug 10 2022 01:34:57 GMT+0000 (Coordinated Universal Time),Wed Aug 10 2022 01:35:11 GMT+0000 (Coordinated Universal Time),"<p id="""">This week we're rolling out a big update to Placemark's support for <strong id="""">thematic mapping</strong>. In this case, that means mostly choropleth maps - in which some number determines the color of an area - and classified maps, which map discrete values to different colors.</p><div></div><p id="""">We had some thematic mapping features, before, but this update really starts from scratch to make it all way better.</p><ul id=""""><li id="""">We now support both <strong id="""">linear</strong> and <strong id="""">quantile</strong> classifications for choropleth maps. This is a big boost for datasets that have outliers: with a linear scale, you'll get almost no color differentiation for most features if there's one feature with a really high or really low relative value.</li><li id="""">You can now use <strong id="""">literal styles</strong> - <a href=""/documentation/simplestyle"" id="""">simplestyle</a> - at the same time as data-driven styles. This lets you easily override data-driven styles with your own.</li><li id="""">There's a new UI&nbsp;for literal styles which makes them way simpler. Now you don't have to remember which properties control literal styles, and there are convenient number &amp; color inputs for each of the parts of a literal style.</li><li id="""">The color ramps are improved - we're starting with the renowned presets from <a href=""https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3"" id="""">ColorBrewer</a>, and all of the options available are safe for most forms of colorblindness. You can choose whether to interpolate colors between stops, or treat them like steps.</li><li id="""">You can export these ramps now, to both <a href=""https://docs.mapbox.com/mapbox-gl-js/api/"" id="""">Mapbox GL</a>&nbsp;styles (which you can also use with <a href=""https://maplibre.org/"" id="""">Maplibre</a>) and Leaflet styles.</li></ul>","Making thematic maps, custom styles, and exporting better than ever.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62c870defed22c6ca02cb23f_Symbolization.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62c870defed22c6ca02cb23f_Symbolization.png,true,Fri Jul 08 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Placemark & Tom on the MapScaping Podcast,placemark-tom-on-the-mapscaping-podcast,616750c12c0aece979319ccd,62976b005d83f8db6833212b,Wed Jun 01 2022 13:34:56 GMT+0000 (Coordinated Universal Time),Wed Jun 01 2022 13:34:56 GMT+0000 (Coordinated Universal Time),Wed Jun 01 2022 13:35:04 GMT+0000 (Coordinated Universal Time),"<div></div><p>I recently chatted with Daniel from the <a href=""https://mapscaping.com/"">MapScaping Podcast</a> about Placemark, where it's going, and how it's getting there. Give it a listen!</p>","Chatting with the MapScaping podcast about Placemark, its start, future, and the unique approach I've taken so far.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62976aea48bc3c3f368b6e35_MapScaping%20Podcast.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62976aea48bc3c3f368b6e35_MapScaping%20Podcast.png,true,Wed Jun 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Play: a free map editor from Placemark,play-a-free-map-editor-from-placemark,616750c12c0aece979319ccd,641af134969550bccec7e6d3,Wed Mar 22 2023 12:14:44 GMT+0000 (Coordinated Universal Time),Wed Mar 22 2023 12:14:44 GMT+0000 (Coordinated Universal Time),Wed Mar 22 2023 12:14:51 GMT+0000 (Coordinated Universal Time),"<p>Today I'm making a <a href=""https://app.placemark.io/play"" id="""">client-side only version of Placemark available for everyone</a>!</p><p>It's an experiment, so expect some bugs (and <a href=""https://www.placemark.io/documentation/contact"" id="""">tell me about them</a>!), but…&nbsp;it's now available!</p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1330px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1330px""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/641af0922c4d6e1e969000d3_CleanShot%202023-03-22%20at%2008.11.52%402x.png"" loading=""lazy""></div></figure><p id=""""><a href=""https://app.placemark.io/play"">Placemark Play</a> is a free version of Placemark that doesn't require a login. You can drop some geospatial files on the map, edit them, export them, and do almost everything you can do in the main Placemark product. The only catch is that there's no collaboration, storage, or settings. To store maps or support Placemark's ongoing development, <a href=""https://app.placemark.io/signup"">sign up for an account</a>!</p><p>With Play, you can:</p><ul><li>Create maps from scratch by drawing geospatial data</li><li>Do analysis like buffers, simplification, measuring areas</li><li>Import &amp;&nbsp;export in many formats</li><li>Edit your geospatial data in a flexible table view</li><li>Prototype &amp;&nbsp;export data-driven Mapbox GL&nbsp;&amp;&nbsp;Leaflet styles based on your data</li><li>And more!</li></ul>","A version of Placemark, for everyone!",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/641af00a0c890d59854b171a_play.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/641af00a0c890d59854b171a_play.png,true,Wed Mar 22 2023 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Polyline: a spruced-up polyline utility,polyline-a-spruced-up-polyline-utility,616750c12c0aece979319ccd,633f273beb4a6e2800f2a219,Thu Oct 06 2022 19:06:35 GMT+0000 (Coordinated Universal Time),Thu Oct 06 2022 19:17:13 GMT+0000 (Coordinated Universal Time),Thu Oct 06 2022 19:17:22 GMT+0000 (Coordinated Universal Time),"<p id="""">To make a great application, we have to use quality ingredients. Placemark needed an <a href=""/documentation/polyline"" id="""">encoder and decoder for the Google Encoded Polyline</a> format, so we decided to create a freshened up module for it. It's based off of the <a href=""https://github.com/mapbox/polyline"" id="""">Mapbox module</a> (originally from the same author as Placemark), but ready for today's applications. Check out the <a href=""https://github.com/placemark/polyline"" id="""">@placemarkio/polyline module</a>.</p><figure class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/633f29aa16f70e224850843c_CleanShot%202022-10-06%20at%2015.16.25%402x.png"" loading=""lazy"" alt=""Placemark Polyline module code sample""></div></figure><p id="""">What does that mean? Well, a few things. The ergonomics of a good JavaScript module have changed dramatically in the last few years. It's important to support ESM imports, so that you can use JavaScript's native module system and also<a href=""https://observablehq.com/@tmcw/polyline"" id=""""> use systems like Observable</a> with your modules, without a build step. Plus, you'll want TypeScript types, and embedded documentation, so you can be sure that you won't run into TypeErrors in production. It's good to have <a href=""https://placemark.github.io/polyline/"" id="""">standard, generated documentation, too</a>. Plus, few - or no - dependencies and a small bundle size.</p><p id="""">I'm a big fan of JavaScript and excited about its future, but I&nbsp;won't lie - getting all of this to work is hard. It's really easy to make a module that works when you use it with Node, but doesn't work with a browser or a bundler. Thanks to work on <a href=""/post/betterknown-a-new-wkt-ewkt-parser"" id="""">betterknown</a>, check-geojson, and other <a href=""/open-source"" id="""">open source modules</a> published by Placemark, a lot of knowledge and configuration can be reused from one project to another. That way I&nbsp;can publish modules that support Node.js's very new entry points, while also supporting CommonJS&nbsp;and UMD usage.</p><p id="""">But enough about JavaScript nitpicks: what @placemarkio/polyline brings is:</p><ul id=""""><li id="""">Included, robust TypeScript types with embedded documentation</li><li id="""">ESM &amp;&nbsp;UMD&nbsp;entry points</li><li id="""">Standardized longitude, latitude order in all functions</li><li id="""">Reduced dependencies for a lighter install</li><li id="""">Active maintenance</li></ul><p id=""""><a href=""https://github.com/placemark/polyline"" id="""">You can install <strong id="""">@placemarkio/polyline</strong></a>, use it to encode and decode Google Encoded Polylines and GeoJSON back and forth. It's what Placemark uses for this conversion, when you import and export features. Check it out!</p>",A new encoded polyline converter that works well with TypeScript and modern applications.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/633f265ec8fd3d9c239af681_Polyline.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/633f265ec8fd3d9c239af681_Polyline.png,true,Thu Oct 06 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Sharing maps,sharing-maps,616750c12c0aece979319ccd,6324d99a7737a6ac8366ab9f,Fri Sep 16 2022 20:16:26 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:40 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<div id=""""></div><p id="""">‍</p><p id="""">You can now share maps from Placemark with a colleague or a friend just by dropping a link. They don't need an account - it's just a webpage. Here's an example, <a href=""https://app.placemark.io/public/JtYBdrhcGTBzTt056fyNQ"" id="""">that map of those airports</a>.</p><h3 id="""">Sharing + analysis</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1958px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1958px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6324d735c51fd00763ca016d_CleanShot%202022-09-16%20at%2016.06.01%402x.png"" loading=""lazy"" id="""" width=""auto"" height=""auto"" alt=""Shared map showing geometry statistics""></div><figcaption id="""">Geometry statistics for a shared map</figcaption></figure><p id="""">But it's not just a read-only map. The Placemark DNA is sprinked throughout shared maps. You can check out geometry and property statistics for shared maps.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1942px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1942px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6324d7975e6ac644202d3af1_CleanShot%202022-09-16%20at%2016.07.38%402x.png"" loading=""lazy"" id="""" width=""auto"" height=""auto"" alt=""Shared map showing feature properties""></div><figcaption id="""">Viewing feature properties</figcaption></figure><p id="""">You can view properties of a feature on a shared map, and see details about its geometry.</p><h3 id="""">Sharing +&nbsp;data</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1944px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""1944px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6324d7dacc7642fd7ebc0560_CleanShot%202022-09-16%20at%2016.08.49%402x.png"" loading=""lazy"" id="""" width=""auto"" height=""auto"" alt=""Shared map being exported as CSV""></div><figcaption id="""">Exporting data from a shared map</figcaption></figure><p id="""">Sharing is an excellent way to share data, too - just export straight from the shared map page. All of Placemark's formats and options for exporting are available.</p><h3 id="""">What will you share?</h3><p id="""">Shared maps are a feature available to anyone with a Placemark account - try sharing a map today!</p>",An easy way to communicate data & analysis with just a link.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6324db0828c2556aae2364a4_Sharing.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6324db0828c2556aae2364a4_Sharing.png,true,Fri Sep 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Stack thinking,stack-thinking,616750c12c0aece979319ccd,6168074966af3c36e8fef476,Thu Oct 14 2021 10:32:41 GMT+0000 (Coordinated Universal Time),Wed Dec 22 2021 19:34:22 GMT+0000 (Coordinated Universal Time),Wed Dec 22 2021 19:36:46 GMT+0000 (Coordinated Universal Time),"<p>Writing is extremely helpful for my thinking. In the process of building Placemark, I’ve been writing short notes to myself, to try and explain decisions. That way, I can revisit the decision along with all the thinking I was doing at the time. And, well, at that point, why not share.</p><p>The first few posts will be about stacks: the technology choices I’m making in order to build Placemark. Because those will be about the particular choices and rationale, here’s a little bit about my underlying philosophy.</p><p>First: <strong>it’s really important to understand the kind of thing you are making</strong>. Are you creating a static website that will rarely get updates? Or something really dynamic, with lots of functionality? Something in-between? A lot of badly constructed things are the way they are because nobody answered this question. And equally problematic is the tendency to exaggerate problems or anticipate too much growth. Sure: maybe you’re building something that has the <em>possibility</em> of becoming as complicated, high-performance, and advanced as Facebook or Photoshop, but version 1 will suffer if you overarchitect it.</p><p>Next, <strong>it’s really important to find the right kind of thing, more important than it is to find the truly-best option</strong>. You probably won’t fail because you used Django instead of Rails, or Vue instead of React. Within each family of solutions things are pretty darn similar. Not the same, of course, and people will go to war over these small differences, but the point is that people successfully built Yelp on Django and Instacart on Rails, and it’s likely that your delivery-or-food-search business could work on either. But could it work on C++? Less likely. Find the right ballpark.</p><p>Then, you should try to focus on things <strong>one or two jumps away from where you are, in your current knowledge</strong>. There are plenty of technologies I’m absolutely intrigued by, like Svelte or Rust, and I have some medium level of knowledge using them. And then there are even more “hardcore” versions of those things, like building a backend in Haskell. Do I think that would be fun? Sure! But I’m building a product, not showing off for the internet.</p><p>Finally, <strong>compromise solutions are often the most practical</strong>. I’m talking about multi-paradigm programming languages like JavaScript or Python, which let you write in a functional programming style but mutate data and create side-effects when they seem right. Or frameworks like Rails, which provide <a href=""https://m.signalvnoise.com/provide-sharp-knives/"">sharp knives</a>, powerful but sort of dangerous options outside of the ‘best practices.’ Though I find the <em>purity</em> of functional programming and strict systems and minimal languages invariably attractive, unless your whole mind lives in that paradigm, that purity eventually gets in the way.</p><p>I don’t have a perfect method for figuring out the initial way to go. I’ve made stack decisions I regret, that needed to be rethought, that cost time and money. But the thing about these decisions is that they need to be made to advance to the next step: so you have to make them, and you can’t take forever to think about it.</p>",Here's my framework for how to think about some fundamental choices I have to make when building a company.,,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57cea9687ae4a192d834_Stack%20thinking.png,true,Thu May 06 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Stacking overlays,stacking-overlays,616750c12c0aece979319ccd,634075462d9ff998237c7771,Fri Oct 07 2022 18:51:50 GMT+0000 (Coordinated Universal Time),Fri Oct 07 2022 18:55:50 GMT+0000 (Coordinated Universal Time),Fri Oct 07 2022 18:55:57 GMT+0000 (Coordinated Universal Time),"<p id="""">Now you can add multiple tile layers to your maps on Placemark! This has been a requested feature for quite a while, because a lot of people have some high-resolution satellite imagery or a warped and georeferenced historical map, and they want to extract vector features using Placemark, but they need more context:&nbsp;they don't just want to see a few frames of satellite imagery in a sea of white. You want your geographically-restricted special data to be in context, with a world map.</p><div id=""""></div><p id="""">‍</p><p id="""">That's what we're launching today:&nbsp;a layer <strong id="""">stack</strong>. You can add multiple overlays, with customizable visibility and opacity, using Mapbox,&nbsp;XYZ, and TileJSON layer types. It's a big step up in Placemark's ability to work with external raster tiles.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2306px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2306px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/634074146edad194f333512f_layer-menu.png"" loading=""lazy"" id="""" width=""auto"" height=""auto""></div><figcaption id="""">The new layer menu</figcaption></figure><p id="""">‍</p><p id="""">This is just the start - we've got a lot more on the horizon, like image warping, STAC support, and vector layers as references.</p>",A big step forward for using Placemark with satellite and historical imagery,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6340752dfb7b98132b69b650_Layer%20stack.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6340752dfb7b98132b69b650_Layer%20stack.png,true,Fri Oct 07 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Tech brief: JSON Pointer,tech-brief-json-pointer,616750c12c0aece979319ccd,6168068788f0af0909d07ffa,Thu Oct 14 2021 10:29:27 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:40:01 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:40:05 GMT+0000 (Coordinated Universal Time),"<p id="""">A big part of Placemark is modifying <a href=""/documentation/geojson"" id="""">GeoJSON</a>. GeoJSON is a standard for geospatial data, stored as a particular structure of JSON. I love the format - the spec is precise and friendly and the format is relatively easy to use, but modifying it can get complex.</p><p id="""">For example, a MultiPolygon in GeoJSON might look like this:</p><div id=""""></div><p id="""">‍<br>The arrays of numbers are vertexes. How do you move a vertex? Well, it’s a bit tricky. I’m - currently - doing <a href=""https://macwright.com/2021/03/05/immutable-approaches.html"" id="""">immutability by hand</a>, instead of using immer or Immutable.js. I might move to immer eventually. Immer is about <a href=""https://immerjs.github.io/immer/performance"" id="""">2-3 slower than handwriting</a>, which would actually make a bit of a difference in some parts of my application.</p><p id="""">So, to modify a vertex in this, you might write something like</p><div id=""""></div><p id="""">You could, obviously, do this a number of ways - like using a deep clone instead of only cloning the parts you’ll change (for a slight performance hit) or using Object.assign or a shallow clone to copy the object. But the issue is not some performance gotcha, but that this method is going to be different for all the types of GeoJSON objects. I wanted to figure out a way to say “set this path of an object,” so that part of my code could determine the path and the other part could do the setting.</p><p id="""">Hence, <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">JSON Pointer</a>, another fine IETF spec. This lets you write strings, like geometry/0/0, that let you address different parts of an object to get or set.</p><p id="""">Variations of this concept have been around for a while. lodash had <a href=""https://lodash.com/docs/4.17.15#at"" id="""">_.at</a>, which accepts property paths, and there are great standalone modules like <a href=""https://www.npmjs.com/package/dot-prop"" id="""">dot-prop</a> that support a slightly different syntax.</p><p id="""">But JSON Pointer standardizes that syntax, which means you can use it with a variety of modules that implement the standard. And with <a href=""https://jsonpatch.com/"">JSON Patch</a>, another lovely IETF format. And then JSON Patch opens up opportunities to implement things like <a href=""https://www.inkandswitch.com/cambria.html"" id="""">Cambria</a>.</p><p id="""">The only issue I found with JSON Pointer is that all of the implementations will mutate their inputs. Hence <a href=""https://gist.github.com/tmcw/86c958655202885a71c89cfcc5e6b850"" id="""">I wrote a slightly modified version</a> of the <a href=""https://www.npmjs.com/package/jsonpointer"" id="""">jsonpointer</a> module that adds a clone method. Thus I can do things like:</p><div id=""""></div><p id="""">The upside of this is also that, by abstracting the task of getting pointers from the task of setting values in objects, I can gracefully handle of of the ‘gotchas’ of the GeoJSON format: that the first and last coordinates in a polygon <a href=""https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6"" id="""">should be the same</a>, so if you’re dragging the first point of a polygon, you should also be modifying the last point of the polygon to match it. In Placemark’s setCoordinate method, I can just get multiple pointers and set those multiple positions, like this:</p><div id=""""></div><p id="""">‍<br>And, well, that’s it! I’m intrigued by the JSON Pointer / JSON Patch combination. It reminds me faintly of <a href=""https://redux.js.org/"" id="""">Redux</a>, the React state mangement framework famous for introducing reducers and actions - a version of the <a href=""https://en.wikipedia.org/wiki/Command_pattern"" id="""">command pattern</a> - to JavaScript and React. And I’ve seen that you can go overboard with that. I’m using <a href=""https://recoiljs.org/"" id="""">Recoil</a> in Placemark instead of Redux and the simplicity of just setting state is excellent.</p><p id="""">But JSON Pointer and possibly JSON Patch solve a very immediate problem - the difficult of digging down into objects in JavaScript. And by describing the part of the data that’s about to change, they also make it possible to efficiently preserve immutability, as I’m doing. And down the line, they might tie neatly into a collaboration model - but that’s a topic for another day.</p>","How JSON pointer lets you target and modify certain parts of JSON objects, and how this can be really useful for GeoJSON.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57d9a8202ea14aeee2ac_JSON%20Pointers.png,true,Fri Aug 27 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Tech update,tech-update,616750c12c0aece979319ccd,62bf4f5ab395c83a972bcda4,Fri Jul 01 2022 19:47:38 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:40:33 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:40:40 GMT+0000 (Coordinated Universal Time),"<p id="""">Before I launched Placemark, I wrote a lot about the technology and the journey to getting to that launch. There are posts about <a href=""/post/engineering-round-up-optimization"" id="""">optimization</a>, <a href=""/post/components-react-aria"" id="""">components</a>, and the <a href=""/post/the-application-stack-blitz"" id="""">application framework</a>.</p><p id="""">Since <a href=""/post/announcing-placemark"" id="""">Placemark's launch</a>, this blog has been all about the product. Lots of improvements, and lots more to come!</p><p id="""">This blog will probably continue to focus on the product. Placemark is a tool for making maps, and there's so much to say about how that. New features, soon. But today, let's catch up on technology!</p><h3 id="""">Most of the choices are working out</h3><p id="""">Placemark is still a Blitz application, still using Postgres and Replicache. I haven't done any gigantic refactors and don't feel the need to.</p><p id="""">There are two things I keep in mind with tech choices.</p><p id="""">The first is keeping a bit of hindsight. Like, say you're considering switching to a typed language or adding types to your project - something like TypeScript for JavaScript or Sorbet for Ruby. It's useful to reflect on the last few months of development and think about how much that type checker would have caught. Did you see a lot of type errors in production? Maybe the lack of a type system made debugging slower? Basically, if you had made the change in the past, how much time would you have saved?</p><p id="""">The other thing to think about is what ratio of time are you spending on work of substance versus work-about-work. Refactoring is the purest, most obvious sort of work-about-work. A refactor might take months and on the other side all you get is the same product, no new features, maybe the same number of bugs, in a different language, framework, or style. Often refactors are worth it! But a company that spends half its time refactoring is probably doing something wrong.</p><p id="""">Anyway, it's good to keep tabs on this. Did you spend all day futzing with dependencies? Fixing type-checker errors? Maybe that's useful work in the long term, and maybe it's necessary, but it doesn't move the product forward.</p><p id="""">So, tech changes with Placemark happen when the need arises, or when I notice myself futzing too much with something. There haven't been many of those instances recently, which is great! The lifespan of technology choices is a positive indicator - if you can build something for a few years, maybe 5-10 years, and the underpinnings still seem rational and tolerable, that's a win.</p><p id="""">That said, there certainly have been some changes!</p><h3 id="""">From Recoil to Jotai</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2548px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2548px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bf4e4dbb60e49d977968d7_CleanShot%202022-07-01%20at%2015.42.57%402x.png"" loading=""lazy"" alt=""Jotai screenshot"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">Placemark started with <a href=""https://recoiljs.org/"" id="""">Recoil</a>, a state management library under the Facebook umbrella of open source projects. Recoil was the right kind of tool for Placemark. State management that works like React's default setStatemethod is what I like to use. But I encountered some issues around it flickering between different states in the application, and when I went to dig into the Recoil source code, I found it very difficult to understand and contribute to. I'm certain that there are reasons why it's designed the way it is, but the complexity and style of the module didn't feel right.</p><p id="""">So, Placemark switched from Recoil to <a href=""https://jotai.org/"" id="""">Jotai</a>, a smaller, simpler, and easier to understand module. The switch was relatively seamless and I haven't run into any disadvantages of Jotai versus Recoil. Overall, it was painless because Jotai and Recoil are similar libraries and I wanted the same sort of API for state management. Switching to something in a different ""family"" of solutions, like zustand or MobX, would have been a much bigger leap.</p><h3 id="""">react-aria to (mostly) Radix</h3><p id="""">react-aria is a <em id="""">damn good project</em>. I think that team is making the best implementations of a lot of different algorithms and utilities.</p><p id="""">That said, I've switched a lot of UI in Placemark from using react-aria to <a href=""https://www.radix-ui.com/"" id="""">Radix UI</a>.</p><p id="""">Why? <strong id="""">react-aria</strong> is a very low-level module. The idea is that you use its collection of hooks to build your own component library. And I was doing that, and it was working okay. But I was spending a lot of time making this all work with TypeScript. React-aria's examples are in vanilla JavaScript, and its modules don't export all the types needed to work with their hooks. So you'll import @react-aria/listbox but need types from @react-types/shared, or sometimes from some other module. The module from which you get the types, and the types that your component library should work with in the first place, is often a mystery - something you need to figure out by hoping that an auto-import is found.</p><p id="""">So, my component library ended up being pretty verbose and often the types would cause problems when I tried to combine behaviors, like both positioning something and mounting it in a portal. I was just spending a lot of time building a component library that, to a user, looked basic.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2548px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2548px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bf4e797527403095e5e1dc_CleanShot%202022-07-01%20at%2015.43.42%402x.png"" loading=""lazy"" alt=""Radix screenshot"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">Hence, <a href=""https://www.radix-ui.com/"" id="""">Radix</a>. Radix is a level higher than react-aria - components, not hooks - but still lets me define styles from the ground up. It has a really solid set of components covering almost every need. I use a <a href=""https://headlessui.com/"">Headless UI</a> component in one place and a specialized component <a href=""https://github.com/omgovich/react-colorful"" id="""">for a color picker</a>. But everything else - dialogs, popovers, tooltips, collapsible UIs - is all Radix. And it works well!</p><p id="""">Radix has a few downsides. The team that builds Radix just got acquired to work at <a href=""https://workos.com/"" id="""">WorkOS</a>, so the long-term future of the project could go a few different ways. Compared to react-aria, which is under the Adobe organization, one of the oldest and most established tech companies there is. Using Radix also increases the size of my component tree, though not the rendered DOM tree, so that's probably not a big contributor to performance. And the range of things supported by react-aria is a bit more comprehensive than Radix.</p><h3 id="""">From Pusher to Soketi</h3><p id="""">Placemark relies on WebSockets in a peculiar way. This is a design decision in Replicache: we use WebSockets to prompt people to request a new copy of the data, but the data isn't sent in the WebSocket message. The loop of doing this is a critical part of the application, where an extra 100ms matters.</p><p id="""">Initially, Placemark used Pusher to handle WebSockets. This is the one exception to the monolith: the task of doing WebSockets quickly is so different from the rest of the application that I think it should be a separate piece. Before launch, I switched to <a href=""https://github.com/soketi/soketi"" id="""">Soketi</a>, a self-hosted WebSocket server, because Pusher's limits seemed low and I suspected that I could reduce latency by hosting the WebSocket server on the same internal network. Thanks to <a href=""https://render.com/"" id="""">Render</a>, I was able to do this pretty easily.</p><p id="""">So far Soketi seems great, and I hope it continues to. Hopefully the Pusher protocol will make it possible to switch again in the future, if necessary.</p><h3 id="""">New: Comlink</h3><p id="""">I've been using <a href=""https://github.com/googlechromelabs/comlink"" id="""">Comlink</a>, an abstraction layer for Web Workers. It's pretty great! There are lots and lots of gotchas with Web Workers and most bleeding-edge technology, and I've been working through them. For example, Comlink makes it easy to use a Web Worker like you're just calling a function - but in practice the only arguments you can give to that function are serializable objects. So you have to write a serialization wrapper for those things - a workaround that Comlink makes easy, but it's easy to get it wrong.</p><h3 id="""">New: purify-ts</h3><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2548px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2548px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bf5007b395c834452bd250_CleanShot%202022-07-01%20at%2015.50.03%402x.png"" loading=""lazy"" alt=""Purify"" id="""" width=""auto"" height=""auto""></div></figure><p id="""">I added <a href=""https://gigobyte.github.io/purify/"" id="""">purify-ts</a> to use Either and Maybe types in Placemark. The usefulness of an Either type - a type that contain either a Left (or error, usually) value as well as a Right (success) value, is enormous. There are lots of places where Placemark needs to provide detailed errors when operations fail. You might import a file and we want to show you what went wrong. JavaScript's existing error system is basic and it's easy to forget which functions are the ones that you <em id="""">expect</em> to throw an error sometimes and which are the ones that will only throw errors if you've written a bug. TypeScript doesn't make this any better. You can't add a type that defines what sort of error a function might throw.</p><p id="""">But in practice, functional types like Either and Maybe come with a lot of function programming dogma. I don't want to ""fold"" an option, and I would rather the core of the modules I use be efficient, not pure. And I want the documentation to be good. purify-ts is that - it's great. It's practical. I've had a few minor qualms with purify and sometimes I need to meditate on the documentation, but overall it has been the good parts of functional programming without the bad.</p><h3 id="""">What might be next</h3><p id="""">Most of what I have planned for Placemark won't require any big changes to these tools. The complexity is in the app, and most of the bugs are mine. There are a few things I'm interested in, though!</p><p id="""">The file format converter was the first piece of Placemark that uses XState, a state machine abstraction, directly. I know there are plenty of state machines under the hood, in Radix, and there are some informal state machines, like the drawing system. I want to use XState more, in places where it's appropriate. Refactoring the drawing system to use XState might be a good idea, but would also mean refactoring one of the most complex components of Placemark.</p><p id="""">Blitz has been <a href=""https://blitzjs.com/docs/blitz-pivot"" id="""">transitioning from a framework to a library</a>. Once they're done with the refactor, Blitz will be a module that you install and use alongside Next.js. I'm excited for this, in large part because Blitz's fork of Next.js is now quite vintage. The upgrade will mean much faster builds for me, probably an improved experience for users, and all the perks of using a mainstream framework like Next.js.</p><p id="""">Who knows what might be next beyond that! In a lot of ways, it's fun to just ride the wave of things like Next.js, Blitz, and so on - it mostly just gets better.</p>","Which of the parts that make up Placemark have changed, what's new, and some ideas about what's next.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bf4ef250406e041d516008_Tech%20Update%20July%201.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/62bf4ef250406e041d516008_Tech%20Update%20July%201.png,true,Fri Jul 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Development
The application stack: Blitz,the-application-stack-blitz,616750c12c0aece979319ccd,616807299f86a332fbd890ed,Thu Oct 14 2021 10:32:09 GMT+0000 (Coordinated Universal Time),Sun Jul 31 2022 19:05:07 GMT+0000 (Coordinated Universal Time),Sun Jul 31 2022 19:05:12 GMT+0000 (Coordinated Universal Time),"<p id="""">I’m building Placemark with Blitz. <a href=""https://blitzjs.com/"" id="""">Blitz</a> is a layer on top of <a href=""https://nextjs.org/"" id="""">Next.js</a>, which is itself a layer on top of <a href=""https://reactjs.org/"" id="""">React</a>. Remember when I wrote that pretty popular article about <a href=""https://macwright.com/2020/05/10/spa-fatigue.html"" id="""">how React is a little overused</a>? Let me explain.</p><p id="""">As I wrote <a href=""/post/stack-thinking"" id="""">last time here</a>, it’s really important to understand the kind of thing that you’re building. The kinds of things I’ve built in the past are like this:</p><ul id=""""><li id=""""><a href=""https://www.mapbox.com/mapbox-studio"" id="""">Mapbox Studio</a>, a Photoshop-like map styling interface</li><li id=""""><a href=""https://github.com/openstreetmap/iD"" id="""">iD</a>, the default editor for OpenStreetMap</li><li id=""""><a href=""https://observablehq.com/"" id="""">Observable</a>, a code editor and runtime on the web</li><li id="""">$StealthStartupProduct, a collaboration tool for a particular industry</li></ul><p id="""">When I wrote <em id="""">Second Guessing the Modern Web</em>, I was working at the $StealthStartup. What we were building felt a lot like GitHub or Basecamp, and not at all like the Photoshop/editor/interactive tools I had used. And the toolkit for those heavily interactive tools was adapting really, really poorly into this less-interactive domain. We weren’t reaping the benefits, and we were suffering from the negatives.</p><h3 id="""">Most of the web is overbuilt</h3><p id="""">I would wager that a lot of the web is more like that stealth startup’s product than like Mapbox Studio or iD or Placemark. And a lot of successful products on the web are (still) being built with Rails. GitHub is Rails. Gusto. Stripe is a bunch of things, but started with Rails. If I were to build an HR software or a scheduling system or a thing for organizing team standups or a food delivery startup website, I’d think hard about using Rails or something like it.</p><p id="""">Placemark has a big interactive component. One “page”, one URL, will basically have 95% of the value of the thing. Dynamic client-side updates will be the norm, not the exception. That’s just the kind of thing it is. So Rails doesn’t make that much sense. Though I am <em id="""">hyped</em> about things like <a href=""https://remix.run/"" id="""">remix</a> and think that server-rendered HTML should be the strategy of a great majority of web apps, I am not building something in that category.</p><p id="""">Anyway, if server-rendering centric and client-rendering centric websites are the two categories and it’s the job of each engineering team to choose which category their app belongs in, I’d bet: a lot of teams are incorrectly building things that are client-heavy when their apps are not that dynamic. Perhaps some are building things that are server-heavy when their apps are too dynamic - <a href=""https://www.hey.com/index.html"" id="""">hey.com</a> comes to mind here: it’s doing a <em id="""">ton</em> of server-rendering and trying to provide a really slick client experience. Does it pull off that native experience? Barely.</p><p id="""">The general trend though is overbuilding (using React for your blog or mostly-pages-and-forms-website) rather than underbuilding (using Rails for something super-dynamic).</p><h3 id="""">A fullstack monolith</h3><p id="""">Placemark is aiming to be primarily monolithic: I want as much connection between backend and front as possible. Rolling out backend changes, trying to keep APIs consistent, managing fleets of servers, all of this is <em id="""">not building the product</em>. I want to build the product. Building an API, and then a frontend on that API, doesn’t make sense for this product or this team.</p><p id="""">To get to Blitz, I started with Next - built the site in Next for a month, and then started thinking about what to do for the backend. There were options like <a href=""https://next-auth.js.org/"" id="""">Next Auth</a> to <em id="""">just</em> add the authentication piece and then I could use Next’s API routes for the backend, but having rebuilt migrations and a database client and all of that boring, same-seeming stuff in other products, I didn’t want to start with something minimal and then just rebuild the rest.</p><h3 id="""">Redwood</h3><p id=""""><a href=""https://redwoodjs.com/"" id="""">Redwood</a> is another alluring option, but at $StealthStartup I worked with GraphQL for a while and it does <em id="""">not agree with me</em>. I don’t mean to say that GraphQL is bad, it’s simply not my preference, and this particular product has little to take from its sort of abstraction. I’m not going to build a native application anytime soon. I have a limited and known number of database queries that’ll be performed, and it’ll be nice to have an escape hatch to optimize them if I want. GraphQL moves around a lot of complexity into parts where I am simply uncomfortable with it living: I want to control queries at the server level, to selectively cache queries, to jump down to SQL when necessary, to control authentication and authorization the traditional way.</p><p id="""">Redwood is really well-supported otherwise, thoughtfully designed, connected to a <a href=""https://prestonwernerventures.com/"" id="""">foundation</a> led by Tom Preston-Werner, one of the GitHub cofounders. Like Next.js, it’s a second-wave (third-wave, maybe?) open source project, and doesn’t depend on some lonely maintainer’s unpaid labor.</p><h3 id="""">Blitz</h3><p id=""""><a href=""https://blitzjs.com/"" id="""">Blitz</a> is billed as <em id="""">The Fullstack React Framework</em> and even name-drops Rails in its marketing material.</p><p id="""">Within the framework of <a href=""https://boringtechnology.club/"">choose boring technology</a>, you only get so many ‘innovation dollars’: you can invent a few things, and for the rest you should go with standard parts. Blitz does that pretty well. Its database layer, Prisma, is becoming an industry standard. It doesn’t do anything weird with tests or CSS or how it deals with React. A lot of the decisions in Blitz are transferred directly from Next.js, or inspired directly from Rails.</p><p id="""">The one ‘big idea’ in Blitz is that “zero-API data layer”. You can write functions that run on the server, import them on the client, and Blitz takes care of three of the most annoying bits:</p><ul id=""""><li id="""">Managing the API route’s routing and the client’s ability to know that route</li><li id="""">Serializing and deserializing the data on both server &amp; client side</li><li id="""">Making the interaction between your server &amp; client “type-safe”, as much as TypeScript can guarantee that</li></ul><p id="""">These are pretty big benefits, and they work reliably. And, importantly, it’s pretty clear how this works: it’s not so much magic that you can’t open your network tools and see what’s going on, or open your console and see if the server is complaining about anything.</p><p id="""">Blitz has a fancy library, <a href=""https://github.com/blitz-js/superjson"" id="""">superjson</a>, which lets you transfer additional kinds of data between server and client. Just the ability to transfer a Date object is such a relief for me - encoding and decoding dates was such a pain at Observable, where we had a mostly homespun server and API access setup.</p><p id="""">My biggest qualm with Blitz - and with Next - is the high level of abstraction they require. Blitz is going to be running Webpack on your frontend files and baking in a lot of transpilation. My app uses WebGL, so obviously we’re not going to support IE9, but Blitz (via Next) will aggressively turn things like <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"" id="""">generators</a> into a complex pile of transpiled and polyfilled code. The server-side transpilation makes me even more uncomfortable: what if a future bug’s stack trace is filled with incorrect line numbers because of transpilation? What if there’s a bug in Babel or a minifier - this <a href=""https://github.com/tmcw/togeojson/issues/44"" id="""">absolutely does happen</a>.</p><p id="""">But, such is the price of joining a big tent open source project. Other Blitz users will care about older browsers. Their interests won’t perfectly overlap with mine, and just like Rails, the framework will have plenty of things that I don’t use in it.</p><p id="""">But for now, it works pretty well! The basic idea of data queries and mutations is simple, effective, works as designed. Blitz makes it possible to build a mostly-normal React app and graft on a backend without all of the indirection and complexity of a split application. I envy those in the future who will use Blitz after a few more years of stabilization and improvements: these full-stack-React frameworks are all relatively new, compared to Rails or Django. But even at this nascent stage, they’re really worth a look.</p>","There are lots of different ways to build a web application. It's about choosing the one that fits your problem area - here's why I ended up with Blitz.js, a level on top of Next.js, for Placemark.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57b824b742ac0b4e953d_Blitz.png,true,Mon May 10 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
The evolution of data-parsing leniency in Placemark,the-evolution-of-data-parsing-leniency-in-placemark,616750c12c0aece979319ccd,6205a7040d6e0c7c91c39f53,Fri Feb 11 2022 00:00:04 GMT+0000 (Coordinated Universal Time),Fri Feb 11 2022 00:00:04 GMT+0000 (Coordinated Universal Time),Fri Feb 11 2022 00:00:59 GMT+0000 (Coordinated Universal Time),"<p>Have you ever heard of the <a href=""https://en.wikipedia.org/wiki/Robustness_principle"">Robustness Principle</a>, or Postel's Law? It goes like this:</p><blockquote>be conservative in what you send, be liberal in what you accept</blockquote><p>It's a good and interesting principle, but the devil's in the details.</p><h3>Inside of programs, the robustness principle is bad</h3><p>By default, I haven't followed the Robustness Principle when I've built software libraries. The main reason for that is the difference between <em>internal and external</em> data. Take a library like <a href=""https://turfjs.org/docs/"">Turf</a> for example, which runs algorithms on geographic data represented as GeoJSON. Should Turf allow invalid GeoJSON inputs? If you accidentally write 'feature' instead of 'Feature', should it allow either?</p><p>My opinion has been, and continues to be, no. Inside of a system, an inverse Robustness principle applies: if there's bad data floating around, you have a bug in your program. In the case of Turf, the bug would be that you've accepted some GeoJSON input, but you didn't validate it on import. Or you've generated some bad GeoJSON data. The bug is in the generation: fix it there, don't tolerate it elsewhere.</p><p>The same goes for internal APIs. If you have a method that takes, say, a boolean true/false input, should it also be guaranteed to work with 0 or 1, or null and some string - should it cast its inputs to boolean values? I don't think so. If you're calling a method incorrectly, the bug is in the call, and should be fixed there. TypeScript helps a lot with this: it doesn't let you use functions wrong in that way.</p><h3>Follow the robustness principles on import &amp; export</h3><p>That being said, I've been refactoring Placemark's importers recently, and following the robustness principle as far as seems reasonable. For example: if you try to import a GeoJSON file and instead of a FeatureCollection or Feature, the file contains an array of Features, the importer can be smart enough to coerce the data into a correct form. If you import KML and there's an invalid XML namespace that makes the KML <em>technically</em> invalid XML, Placemark will parse the XML anyway and produce what it can, in terms of valid features.</p><p>Why? Well, there's a lot of invalid data out there. In practice, lots of software doesn't follow the robustness principle. Well-known GIS systems produce invalid data, every day. Even if I make a fuss and get them to fix their code, that already-generated invalid data will still be present, lurking on people's hard drives and the internet.</p><p>And between crashing, validating, or parsing what I can – parsing what I can is really the user-friendly solution. Even if I can produce a nice error message, like that this GeoJSON file has an invalid Feature on line 909, is the average user going to open their text editor and patch up the file manually? It's unlikely: you're giving information that isn't really actionable.</p><p>I think the right source for the adage <strong>Parse, don't validate</strong>, is <a href=""https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"">Alexis King</a>. It's a good adage. My strategy with importing is now something like <strong>parse and coerce, don't validate</strong>.</p><h3>The downsides of the principles</h3><p>I find Martin Thomson's <a href=""https://datatracker.ietf.org/doc/html/draft-iab-protocol-maintenance"">critique of the robustness principle</a> very convincing:</p><blockquote>A flaw can become entrenched as a de facto standard. Any implementation of the protocol is required to replicate the aberrant behavior, or it is not interoperable. This is both a consequence of applying the robustness principle, and a product of a natural reluctance to avoid fatal error conditions. Ensuring interoperability in this environment is often referred to as aiming to be ""bug for bug compatible"".</blockquote><p>If Placemark is too lenient with its data input, someone might keep using bad systems or bad scripts that generate bad data, happily importing it into Placemark, and then get angry at another product that fails to ingest the bad data. This sort of tolerance level is hard to perfectly specify.</p><p>A counterpoint would be the <a href=""https://html.spec.whatwg.org/multipage/parsing.html"">HTML living standard</a> which lovingly documents all the <em>correct ways to interpret incorrect documents</em>. Think about that. A wild idea, but it works really well in practice – its success and approval in stark contrast to <a href=""https://en.wikipedia.org/wiki/XHTML"">XHTML</a>, the ill-fated attempt to make HTML <em>stricter</em> and more easily parsed as XML.</p>",Accepting not-quite-valid data so you can make maps instead of fixing XML.,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6205a6f7558f4a66193c018d_Robustness.png,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6205a6f7558f4a66193c018d_Robustness.png,true,Thu Feb 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Thoughts on Collaboration,thoughts-on-collaboration,616750c12c0aece979319ccd,6168055ad66552ca2c91c983,Thu Oct 14 2021 10:24:26 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 19:24:34 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 19:28:43 GMT+0000 (Coordinated Universal Time),"<p>The first goal of Placemark was to reach reasonable parity with geojson.io. For some value of <em>reasonable</em>, the current beta achieves this. It even improves on some parts of geojson.io that I always felt were lacking, like the ability to manage typed values and complex values in properties, a performant way to edit properties in table form, and persistent background layers.</p><p>This goal completely excluded persistence: no way to save, load, or version data. In large part, this is because persistence, I believe, is deep, easy to get wrong, and has many solutions. Persistence, collaboration, and versioning are intertwined systems. If you have a collaboration model, that is how changes are persisted. Edits in the collaboration model are likely your idea of versions. These are all <a href=""https://en.wikipedia.org/wiki/Cross-cutting_concern"">cross-cutting concerns</a>.</p><h3>Collaboration technology</h3><p>The first post I wrote here was about <a href=""/post/stack-thinking"">Stack thinking</a> and then I covered some of the parts I chose - <a href=""/post/the-application-stack-blitz"">Blitz</a>, <a href=""/post/hosting-render"">Render</a>, <a href=""/post/components-react-aria"">react-aria</a>. A snippet from the initial post follows:</p><blockquote><em>Next, it’s really important to find the right kind of thing, more important than it is to find the truly-best option. You probably won’t fail because you used Django instead of Rails, or Vue instead of React. Within each family of solutions things are pretty darn similar.</em></blockquote><p>When I think about this principle in the realm of collaboration, it shows why this choice of collaboration was, and is, so painfully difficult. When I reviewed collaboration technology - libraries and frameworks that let multiple users edit the same document at roughly the same time, and see edits in near-real-time, when I created <a href=""https://www.are.na/tom-macwright/crdt-vs-ot"">are.na</a> boards and collected ideas on Twitter, it appeared that every collaboration platform is its own species.</p><p>I tried to create a <a href=""https://www.are.na/block/13033040"">typology of how some of these systems work</a>, but even that wasn’t complete. There are new technologies like <a href=""https://croquet.io/"">Croquet</a> taking a totally new and unusual approach to the field. I would read incredibly smart people like <a href=""https://josephg.com/blog/crdts-are-the-future/"">Joseph G talking about how CRDTs are the future</a> and other brilliant people like <a href=""https://github.com/xi-editor/xi-editor/issues/1187#issuecomment-491473599"">Raph Levien writing about how they aren’t ready for their projects yet</a>.</p><p>There are technologies like <a href=""https://github.com/share/sharedb"">ShareDB</a> which have been around for years and seem to be winding down, but appear to work. And there are projects that work in theory, but not in practice, that have impressive small-scale demos but few actual users. There’s a frustrating tendency in the field to confuse an ‘active area of research’ with ‘a usable solution’, when there’s often years of development, testing, trial, and error between the two.</p><h3>A collaboration product</h3><p>One of these technologies, CRDT, points to a particular platonic ideal of collaboration: the serverless distributed peer-to-peer system. It’s hard to get over the allure of this possibility. <a href=""https://www.schneier.com/blog/archives/2016/03/data_is_a_toxic.html"">Data is a toxic asset</a>. A world of browsers speaking to each other and data staying far away from Google or Facebook’s clutches seems like a better world.</p><p>I want this world, but I’m not sure it’s here yet. The fully-distributed CRDT systems like <a href=""https://github.com/automerge/automerge"">automerge</a> and <a href=""https://github.com/yjs/yjs"">yjs</a> still have tough APIs and performance pitfalls, though their brilliant developers are moving quickly. The nuts and bolts of browser to browser connections are still tricky to set up properly. <a href=""https://hypercore-protocol.org/"">Hypercore</a> is awesome and capable but needs more than a browser to set up. While I’d love for Placemark to be an installable application, making that a <em>requirement</em> would be a big hurdle to adoption.</p><p>In practice, the most prominent and successful collaboration products are centralized: the Google Docs suite, which is based on Operational Transforms, and <a href=""https://www.figma.com/blog/how-figmas-multiplayer-technology-works/"">Figma</a>, which uses a variation on CRDT. Though there are plenty of decentralized technologies in the finance field - the currency that shall not be named - none of that tech is “performant” or “scalable” by any definition of the word. Placemark sits in the ‘very difficult’ quadrant of this problem, with a relatively complex data model, potentially large datasets, and little opportunity to winnow or create ‘views’ on data.</p><h3>Risks &amp; strategy</h3><p>I’ve been starting with <a href=""https://replicache.dev/"">Replicache</a>. It’s the closest independent project aiming for something like Figma’s technology, and it’s a small business led by brilliant, fast-moving engineers.</p><p>The process thus far (my first commit to the feature branch was Sept 2) has been tough but rewarding. There are still lots of unknowns, and lots of assumptions that I was making when the application was purely local state managed with <a href=""https://recoiljs.org/"">Recoil</a>. For example, I previously relied on the principle that only one geometry would change at a time, so that I could pull it out into a faster-updating data model. With the prospect of changes coming from anywhere, that’s no longer an option. Similarly with all of the concerns around versioning and fast updates - I now have to explicitly think about the data model more.</p><p>This is a big scary project. Try as I might, I couldn’t find any MVP, or cheap fast experiment to test the viability of this approach. The tech options are so different than beyond a two-day prototype I couldn’t thoroughly evaluate their potentials. It’s easy to second-guess with so many other options in the mix: should I be more conservative and just sync to GitHub or a third-party service? Or more utopian and aim for P2P and build on <a href=""https://github.com/tauri-apps/tauri"">tauri</a> or Electron?</p><p>It’s not just about getting a product out the door and making money. I’m learning a tremendous amount in the process about data modeling, consistency, databases, network, and more. And the solution will likely be a combination of approaches - I’d like the ability to load a file from Dropbox, for example, but also edit a file locally without ever uploading the contents, and also the ability to collaborate with a team.</p><p>As you can tell, these ideas are bouncing around my head constantly right now. The challenge is deep, nonlinear, and really interesting. I’d love to know what you think, and what properties of a product are most important to you - P2P, offline, collaborative, etc! You can let me know at tom@placemark.io or <a href=""https://twitter.com/tmcw"">tmcw</a> on Twitter.</p><p>‍</p>","How we use Replicache to power real-time, multiplayer, collaborative map editing.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb60a7c2e0bb1928b1c33c_Thoughts%20on%20collaboration.png,true,Mon Sep 20 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Using folders to organize your map data,using-folders-to-organize-your-map-data,616750c12c0aece979319ccd,627d330a66bd7dd66de94275,Thu May 12 2022 16:17:14 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:35:39 GMT+0000 (Coordinated Universal Time),Sat Oct 08 2022 19:37:54 GMT+0000 (Coordinated Universal Time),"<p id="""">Here's a Placemark feature that was spawned out of user feedback and has been a real game-changer: folders.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d324af926427408f245a9_folders.jpg"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""""></div></figure><p id="""">Folders are everywhere: in your computer's operating system, in some email clients, in many photo-editing tools, and more. But many map editing tools don't have them.</p><p id="""">This is partly an artifact of history. Older geospatial formats are extremely limited in what they can do. Popular formats like <a href=""/documentation/shapefile"" id="""">ESRI Shapefile </a>and <a href=""/documentation/geojson"" id="""">GeoJSON</a> doesn't support folders.</p><p id="""">In fact, the only common geospatial format that supports folders is <a href=""/documentation/kml"" id="""">KML</a>. Targeting great KML support is part of the reason why Placemark supports folders, but it isn't the only one.</p><p id="""">Folders are just really useful.</p><p id="""">Often to make a map, you're going to import multiple files. Placemark supports <a href=""/documentation/importing"" id="""">importing a lot of different file formats</a>, and there's a lot of map data you can find on the map, just by searching for, say, ""DC Metro Stations KML."" But you don't want to just combine all of those files into the same mess of map data. With folders, you can keep different datasets separate while editing them as one map.</p><p id="""">Here's an example with DC Metro stations. Metro Lines are in one folder, Metro Stations are in another. I was cropping the lines to show just a few segments of Metro access in DC. With folders, I could cross-reference the Metro stations but only export the edited lines.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2150px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2150px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d31ca72023be7b7b81053_CleanShot%202022-05-12%20at%2011.56.47%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A map showing subway lines in DC, styled""></div><figcaption id="""">Using folders to map DC&nbsp;Metro Stations</figcaption></figure><p id="""">Plus, you can nest folders. Here's that same ""metro map"" concept expanded to multiple cities - I created a DC folder using the ""Add folder"" icon on the left side, and a San Francisco folder for Muni data.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2150px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2150px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d31de1ad1ef7e6169a153_CleanShot%202022-05-12%20at%2012.00.55%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""A map showing multiple folders with multiple transit systems as data""></div><figcaption id="""">Nesting folders to map both DC&nbsp;&amp; San Francisco</figcaption></figure><p id="""">When I go to export, I can choose to just export the SF data, DC data, all of the data, or some subset. If I export to KML, the folder structure is preserved - otherwise features in nested folders are flattened.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2148px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2148px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d31f10fb453c48f59d83e_CleanShot%202022-05-12%20at%2012.02.39%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Export dialog showing the ability to export only one folder""></div><figcaption id="""">Choosing which folders to export</figcaption></figure><p id="""">You can also lock and hide folders, using the Lock &amp; Eye icons next to them. This is super useful if, for example, you're using a map of districts or regions as a reference point to edit other data and you don’t want to accidentally select the underlying data.</p><figure id="""" class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2002px"" data-rt-type=""image"" data-rt-align=""fullwidth"" data-rt-max-width=""2002px""><div id=""""><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d31ff90a1ee6bd58bfa90_CleanShot%202022-05-12%20at%2012.08.13%402x.png"" loading=""lazy"" width=""auto"" height=""auto"" id="""" alt=""Layers list showing the ability to toggle layer visibility""></div><figcaption id="""">Showing &amp;&nbsp;hiding folders</figcaption></figure><h4 id="""">A standard for folders in JSON</h4><p id="""">What we're doing with folders is a bit new, but following Placemark's philosophy of building with open source and contributing back, we've published <a href=""https://github.com/placemark/geojson-folders"" id="""">a proposed standard for representing geospatial data in a GeoJSON-like format, but with folders, called geojson-folders</a>. The discussion on that format will run for a while before there's a 1.0 release of the specification, which will also work out of the box with Placemark's open-sourced format converters, <a href=""https://github.com/placemark/togeojson"" id="""">toGeoJSON</a> and <a href=""https://github.com/placemark/tokml"" id="""">tokml</a>.</p><p id="""">‍</p><h4 id="""">Start mapping with folders!</h4><p id=""""><a href=""/pricing"" id="""">Sign up for a Placemark account</a> and start using folders today!</p>","Nestable, nameable, hidable folders are a great way to organize your maps.",https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d324af926427408f245a9_folders.jpg,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/627d324af926427408f245a9_folders.jpg,true,Thu May 12 2022 00:00:00 GMT+0000 (Coordinated Universal Time),Product
Values,values,616750c12c0aece979319ccd,6168052cc50ec73e73cd99fc,Thu Oct 14 2021 10:23:40 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 19:26:05 GMT+0000 (Coordinated Universal Time),Sat May 14 2022 19:28:43 GMT+0000 (Coordinated Universal Time),"<p>I dislike company values. The vast majority are platitudes meant for marketing and applied selectively if at all. <em>Fun</em> is a popular company value, until someone has too much fun.</p><figure class=""w-richtext-figure-type-image w-richtext-align-center"" data-rt-type=""image"" data-rt-align=""center""><div><img src=""https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/6168051766af3c6214fef100_tree.jpeg"" alt=""Tree"" width=""auto"" height=""auto"" loading=""auto""></div></figure><p>Placemark does, though, have a few intentions, and I figure it’s worth writing them down, because they’re the kinds of things that you can point to and ask “are we doing that?”</p><h3>Be an anti-silo</h3><p>Centralization has a strong technical and economic pull. Despite what some decentralization zealots claim, it’s far easier to build a contained system with one source of truth than to deal with the compatibility and consensus requirements of an open system.</p><p>There are cross-currents. Cloud storage is so common that <a href=""https://www.theverge.com/22684730/students-file-folder-directory-structure-education-gen-z"">students today are unfamiliar with files and folders on their computers</a>. Mobile support necessitates cross-device storage. Collaboration doesn’t work well with files on disk.</p><p>Placemark’s <a href=""/post/thoughts-on-collaboration"">collaboration system</a> is centralized: it uses a single source of truth. This is because I’m not confident in the practicality of fully-decentralized systems.</p><p>So what is Placemark doing? It’s building on existing open source file formats, with strong support for local files. I’m investigating ways to integrate with independent cloud storage providers so that you can use load &amp; save files elsewhere. Export &amp; Import are first-class features.</p><h3>Be a one-sided business</h3><p>It’s an unfortunate reality that the ‘backend’ business is the one that makes the money for a lot of companies. The other side of a <a href=""https://en.wikipedia.org/wiki/Two-sided_market"">two-sided market</a>. Remember <a href=""https://www.appannie.com/en/"">App Annie</a>, that company that does analytics for mobile apps? Their <a href=""https://www.sec.gov/news/press-release/2021-176"">SEC lawsuit</a> is an interesting one: their actual business was selling app data to hedge funds and they maximized that business so much that they disaggregated the data and just gave the hedge funds the exact numbers. Repeat for everything. Foursquare’s backend business became the frontend - <a href=""https://foursquare.com/"">their homepage is now just about the data they extracted from users</a>, not <a href=""https://foursquare.com/city-guide"">the app they once developed</a> and has been frozen in place for years.</p><p>There’s a strong argument that you can make that, well, people don’t pay for apps and businesses do, so why not have the people pay with data that they don’t value, and the businesses pay with money that they have a lot of. Arguable but unsatisfying.</p><p>Placemark has a business plan: sell the product for money. Placemark is an application you pay for, not a data-collection scheme or a way to promote some other product.</p><h3>Do good by open source</h3><p>Placemark isn’t open source, and won’t be. There, I said it. I long ago came to the conclusion that open source is incredible for modules and libraries and an absolute disaster for applications built by companies. I’ve done this - developed <a href=""https://tilemill-project.github.io/tilemill/"">TileMill</a>, <a href=""https://en.wikipedia.org/wiki/ID_(software)"">iD</a>, and lots and lots of libraries in the open. I rallied hard for <a href=""https://www.mapbox.com/mapbox-studio"">Mapbox Studio</a> <em>not</em> to be open source. It was the right decision. I’ve written <a href=""https://macwright.com/2017/02/05/the-case-against-open-source-by-default.html"">a lot</a> about <a href=""https://web.archive.org/web/20180129064131/https://www.mapbox.com/about/open/"">this</a>.</p><p>On the other hand, though, I still care a lot about the OSS community - still have, ahem, passion. So with Placemark I’m trying to do right by it.</p><p>First, contributing to projects. I’m contributing financially to the <a href=""https://blitzjs.com/"">Blitz</a> and <a href=""https://github.com/typicode"">typicode</a>, two projects that Placemark relies on, but at a very low level. That’ll increase according to revenue. The same goes for CodeMirror and other important dependencies.</p><p>Second, maintaining projects. Some of the best OSS projects are those that are heavily used by their creators as part of an application. I aim to create a few of those. I’m already maintaining <a href=""https://github.com/placemark/check-geojson"">check-geojson</a>, a successor to the now-abandoned geojsonhint project. The same goes for <a href=""https://github.com/placemark/togeojson"">togeojson</a> and <a href=""https://github.com/placemark/tokml"">tokml</a> - by virtue of being used in Placemark, these projects will be continually and professionally maintained.</p><p>Third, investing in compatibility. Open source is built on open standards and I aim to support as many formats, at high fidelity, as possible.</p><h3>Don’t bullshit</h3><p>The gravitational pull of bullshit on corporate communications is incredible. Few companies are able to avoid it. So much anodyne marketing tries so hard not to describe <em>what it is</em> and <em>what’s going on</em>: there’s always an experience and a partnership and a vague product and solution and a bright tomorrow.</p><p>I don’t get why people do this. I’ve never met anyone who expects or enjoys that kind of content. And on the other hand, I don’t see a risk in being honest, so I’ll continue to be.</p><h3>Design to the edges</h3><blockquote><em>Design to the edges is a design approach that optimizes things for as many people as possible. It is a rejection of the idea that things be designed for the average person. Instead, design to the edges optimizes for the full range of human characteristics, traits, abilities and interests. - </em><a href=""https://simplicable.com/new/design-to-the-edges""><em>John Spacey</em></a></blockquote><p>I will never stop caring about ARIA accessibility or color contrast no matter how complex a user interface is. Placemark has an uphill battle in many regards, because it’s very difficult to make maps accessible. And it’s very difficult to make editing accessible too. Just think of what code editors do when you press Tab - they insert a tab character, instead of moving to the next item on the webpage. Which is the right behavior?</p><p>This applies to other elements. Collaboration is importantly offline-first, so that unsteady internet connections don’t disadvantage people. Mobile support is a challenge I dread but am also ready to face.</p><p>So that’s the plan. It’s early, and I’m going one step at a time. Placemark isn’t magical or refined yet, it’s buggy and unrefined. Every day it changes and I learn as I go. As E.L. Doctorow said,</p><blockquote><em>Writing a novel is like driving a car at night. You can only see as far as your headlights, but you can make the whole trip that way.</em></blockquote><p>‍</p>","Here are the goals and principles we're keeping in mind, building this geospatial application.",,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb57e248e9d4889b701789_Values.png,true,Wed Sep 29 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
Why we switched to Webflow,why-placemark-switched-the-blog-marketing-to-webflow,616750c12c0aece979319ccd,61b0dc50a21a1ff684376141,Wed Dec 08 2021 16:24:48 GMT+0000 (Coordinated Universal Time),Wed Dec 22 2021 19:33:46 GMT+0000 (Coordinated Universal Time),Wed Dec 22 2021 19:36:46 GMT+0000 (Coordinated Universal Time),"<p>I recently ported Placemark's marketing site to <a href=""https://webflow.com/"">Webflow</a>. Initially, the homepage &amp; documentation were maintained in the same <a href=""https://www.placemark.io/post/the-application-stack-blitz"">Blitz</a> codebase as the app itself, and the blog used a <a href=""https://jekyllrb.com/"">Jekyll</a> setup more or less copied from <a href=""https://macwright.com/"">my blog</a>. Using Blitz &amp; Jekyll did check most of the boxes for my <a href=""https://www.placemark.io/post/stack-thinking"">general philosophy</a>, but I decided to take Tyler's advice:</p><div></div><p>Why? It's not because I didn't want to code my own marketing site. I'm happy to write the HTML and CSS and such, and get into the details. Heck, I <em>love</em> making stuff by hand.</p><p>And I'm not exactly preparing to onboard a marketing team and farm out that work. Maybe that'll happen in a year or two, but Placemark is a small and focused operation, and I'm also happy to write all the marketing copy.</p><p>So why Webflow?</p><h3>1. Marketing content always churns</h3><p>I've worked on enough marketing pages to know that marketing pages <em>always change</em>. They change because the company's trying out a new slogan. Because they're trying to appeal to a different audience. A/B testing some signup optimizations. Leadership changed and they want to make a mark on the company.</p><p>Whatever the reason, a lot of these marketing page changes are simple and should be fast. I shouldn't have to redeploy my application in order to change a ""Sign up"" button to say ""Try it for free."" These changes are overwhelmingly visual and content-oriented in nature, not functional.</p><p>Similarly, marketing should always be growing and evolving. Placemark has a growing <a href=""https://www.placemark.io/documentation-index"">set of documentation</a>, and it'll have tutorials and feature pages and all kinds of content. Sure, I could manage this as Markdown in a folder and build my own category system, but having all of this live with the application doesn't make much sense.</p><h3>2. React &amp; SPAs still aren't that great for marketing sites</h3><p>I guess I <a href=""https://macwright.com/2020/05/10/spa-fatigue.html"">wrote about this at length</a> a little while ago: there are a lot of things that are difficult to do efficiently with React. I'm using <a href=""https://www.placemark.io/post/the-application-stack-blitz"">Blitz</a> as the application stack for Placemark.</p><p>Blitz has been working very well for the application: I think my decision back in March to build on it was the right one. But it's basically a layer on top of <a href=""https://nextjs.org/"">Next.js</a>, which is a layer on top of <a href=""https://reactjs.org/"">React</a>.</p><div></div><p>Right now React and its meta-frameworks like Next.js just aren't that great for the performance of simple pages.</p><p>To be clear, I think we are on the cusp of React being a good choice for marketing sites. <a href=""https://nextjs.org/blog/next-12#react-server-components"">Server components</a>, which Next.js and React are starting to support, will make it possible to do things like delivering a page of content as HTML, without sending the JavaScript version of that content again. Right now, you basically have to send it twice. Maybe your framework is smart enough to transform your Markdown into JSX so that you don't have to send a Markdown compiler as well with the pageload, but still - it's far from ideal. React is just not a great way to just send over a webpage. <a href=""https://remix.run/"">Remix</a>, too, is making progressive enhancement, possibly zero-JavaScript pages possible.</p><p>Which is exciting! But this stuff is bleeding edge. In a year or two when it's all mature I'll take another long look at it, but right now, I'd rather not innovate too much when I'm creating a basic marketing site.</p><h3>3. Different performance budgets</h3><p>The performance budget for the placemark.io marketing site is much different than for the application.</p><p>The marketing site needs to have a really fast initial pageload, because both the average customer and the Google web crawler are very discerning when it comes to that initial pageload. The behavior of <em>successive interactions</em> matters a lot less: whether clicking a link instantly brings up the next page, or whether some interactive element runs at 60 frames per second or 30.</p><p>The Placemark application, on the other hand, loads slowly and then has to run quickly. Even the initial page of the application loads almost 500kb of gzipped resources. That'd be totally unacceptable for a marketing site. But the behavior around the application is different: you load it, then use it for a long period of time. It matters whether the lasso operation to multi-select features runs quickly. It doesn't matter nearly as much how long the initial pageload takes. Applications are like this: anyone who's opened up Photoshop remembers the progress bar.</p><h3>Why Webflow in particular?</h3><p>Why not Jekyll? Well - I want as few pieces of technology that I maintain as possible. I'll pay $20 a month instead of having another build process and framework to worry about.</p><p>Webflow has alternatives, like Wix, SquareSpace, and I'm sure lots of others. I went with it because it's what a lot of companies are using. It's okay: some things like the blog editor are janky, but overall it works well. I'm old enough to have used <a href=""https://en.wikipedia.org/wiki/Adobe_Dreamweaver"">Dreamweaver</a> and, well, Webflow is Dreamweaver for 2021. Recreating the design of the previous site took less than an hour. It pays to make minimal designs. Oh, and if you want to follow this lead, I do have an <a href=""https://webflow.grsm.io/g8z9caejyo5m"">affiliate link to sign up for Webflow</a>. Or if you want to just sign up for Webflow, just go to <a href=""https://webflow.com/"">webflow.com</a>, either way.</p><p>I've been happy with this decision: it removed a big chunk of marketing code from the application and removed some of the friction involved in blogging and marketing.</p><p><br></p>",Why it might be a good idea to build your marketing site with a different technology stack than the one your application uses.,,https://uploads-ssl.webflow.com/61672c738436bb6bb116c6f2/61bb579e7858b762188e048b_Switching%20to%20Webflow.png,true,Wed Dec 08 2021 00:00:00 GMT+0000 (Coordinated Universal Time),Development
